/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**************************!*\
  !*** ./static/index.jsx ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _domready = __webpack_require__(/*! domready */ 1);
	
	var _domready2 = _interopRequireDefault(_domready);
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(/*! react-dom */ 34);
	
	var _reactJsonschemaForm = __webpack_require__(/*! react-jsonschema-form */ 169);
	
	var _reactJsonschemaForm2 = _interopRequireDefault(_reactJsonschemaForm);
	
	var _jquery = __webpack_require__(/*! jquery */ 216);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _validation = __webpack_require__(/*! ./validation */ 217);
	
	var _validation2 = _interopRequireDefault(_validation);
	
	var _upload = __webpack_require__(/*! ./upload */ 218);
	
	var _upload2 = _interopRequireDefault(_upload);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var LOCAL_STORAGE_KEY = "latestMetadataSubmission";
	
	/*
	   Default form validation figures out that custom values for enums
	   are not valid according to the JSON schema.
	
	   We monkey-patch Form class to use another schema for validation,
	   which differs from the original in that 'enum' entries are just deleted.
	*/
	var defaultFormValidate = _reactJsonschemaForm2.default.prototype.validate;
	_reactJsonschemaForm2.default.prototype.validate = function (formData, schema) {
	    console.log(formData);
	    return defaultFormValidate.call(this, formData, this.props.validationSchema);
	};
	
	var SelectOrFreeTextWidget = function (_React$Component) {
	    _inherits(SelectOrFreeTextWidget, _React$Component);
	
	    function SelectOrFreeTextWidget() {
	        _classCallCheck(this, SelectOrFreeTextWidget);
	
	        return _possibleConstructorReturn(this, Object.getPrototypeOf(SelectOrFreeTextWidget).apply(this, arguments));
	    }
	
	    _createClass(SelectOrFreeTextWidget, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            /*
	               <select> element is responsible for checking if the value is 'Other';
	               if it is, it sets this.state.hasCustomValue to true
	               and then fires an onChange event
	            */
	            var _props = this.props;
	            var id = _props.id;
	            var options = _props.options;
	            var placeholder = _props.placeholder;
	            var value = _props.value;
	            var required = _props.required;
	            var _onChange = _props.onChange;
	
	
	            var customValueInput = void 0;
	            var selectValue = value;
	
	            var customValueIdentifier = 'Other...';
	
	            if (this.state && this.state['hasCustomValue']) {
	                customValueInput = _react2.default.createElement('input', { className: 'form-control',
	                    value: value,
	                    placeholder: 'Enter custom value',
	                    style: { marginTop: '5px' },
	                    required: required,
	                    onChange: function onChange(e) {
	                        return _onChange(e.target.value);
	                    } });
	                selectValue = customValueIdentifier;
	            }
	
	            // the rest is essentially a copy-paste from react-jsonschema-form SelectWidget code
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'select',
	                    {
	                        id: id,
	                        className: 'form-control',
	                        title: placeholder,
	                        value: selectValue,
	                        required: required,
	                        onChange: function onChange(e) {
	                            var val = e.target.value;
	                            if (val == customValueIdentifier) {
	                                _this2.setState({ 'hasCustomValue': true }, function () {
	                                    return _onChange('');
	                                });
	                            } else {
	                                _this2.setState({ 'hasCustomValue': false }, function () {
	                                    return _onChange(val);
	                                });
	                            }
	                        } },
	                    options.map(function (_ref, i) {
	                        var value = _ref.value;
	                        var label = _ref.label;
	
	                        return _react2.default.createElement(
	                            'option',
	                            { key: i, value: value },
	                            label
	                        );
	                    }),
	                    _react2.default.createElement(
	                        'option',
	                        { key: -1, value: customValueIdentifier },
	                        customValueIdentifier
	                    )
	                ),
	                customValueInput
	            );
	        }
	    }]);
	
	    return SelectOrFreeTextWidget;
	}(_react2.default.Component);
	
	var MetadataForm = function MetadataForm(props) {
	    return _react2.default.createElement(_reactJsonschemaForm2.default, props);
	};
	
	var App = function (_React$Component2) {
	    _inherits(App, _React$Component2);
	
	    function App() {
	        _classCallCheck(this, App);
	
	        return _possibleConstructorReturn(this, Object.getPrototypeOf(App).apply(this, arguments));
	    }
	
	    _createClass(App, [{
	        key: 'onMetadataFormSubmit',
	        value: function onMetadataFormSubmit(_ref2) {
	            var formData = _ref2.formData;
	
	            if (this._uploader.uploadValidate()) {
	                var xmlhttp = new XMLHttpRequest();
	                xmlhttp.open("POST", "/submit");
	                xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
	                xmlhttp.send(JSON.stringify(formData));
	                console.log(xmlhttp.response);
	                if (typeof Storage !== "undefined") {
	                    var serializedFormData = JSON.stringify(formData);
	                    localStorage.setItem(LOCAL_STORAGE_KEY, serializedFormData);
	                } else {/* not supported by browser */}
	
	                alert("Success! For uploading another dataset please reload the page");
	            } else {
	                alert("Please select the files to upload");
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this4 = this;
	
	            return _react2.default.createElement(
	                'div',
	                { style: { width: '80%', maxWidth: '1000px', padding: '50px' } },
	                _react2.default.createElement(_upload2.default, { ref: function ref(x) {
	                        return _this4._uploader = x;
	                    } }),
	                _react2.default.createElement(MetadataForm, _extends({ onSubmit: this.onMetadataFormSubmit.bind(this) }, this.props))
	            );
	        }
	    }]);
	
	    return App;
	}(_react2.default.Component);
	
	/**
	 * Extract filename from file path (without extension)
	 */
	
	
	function getFilename(path) {
	    var fn = path.replace(/^.*[\\\/]/, '');
	    return fn.substr(0, fn.lastIndexOf('.'));
	}
	
	function getUISchema(schema) {
	    switch (schema.type) {
	        case 'object':
	            var result = {};
	            for (var prop in schema.properties) {
	                result[prop] = getUISchema(schema.properties[prop]);
	            }return result;
	        case 'string':
	            if ('enum' in schema) {
	                var options = schema['enum'];
	                if (options[options.length - 1].startsWith('Other')) {
	                    schema['enum'] = options.slice(0, options.length - 1);
	                    return { "ui:widget": SelectOrFreeTextWidget };
	                }
	            }
	            return undefined;
	        default:
	            return undefined;
	    }
	}
	
	function getValidationSchema(schema) {
	    switch (schema.type) {
	        case 'object':
	            var result = {};
	            for (var prop in schema.properties) {
	                result[prop] = getValidationSchema(schema.properties[prop]);
	            }return Object.assign({}, schema, { "properties": result });
	        case 'string':
	            if ('enum' in schema) {
	                var _result = Object.assign({}, schema);
	                if (schema['required']) _result['minLength'] = 1;
	                delete _result['enum'];
	                return _result;
	            }
	            return schema;
	        default:
	            return schema;
	    }
	}
	
	(0, _domready2.default)(function () {
	    var schema = __webpack_require__(/*! ./schema.json */ 229);
	    var uiSchema = getUISchema(schema); // modifies enums with 'Other => ...'
	    var validationSchema = getValidationSchema(schema);
	    console.log(validationSchema);
	
	    if (typeof Storage !== "undefined") {
	        var previousSubmission = localStorage.getItem(LOCAL_STORAGE_KEY);
	        console.log(previousSubmission);
	        var parsedFormData = JSON.parse(previousSubmission);
	        console.log(parsedFormData);
	        (0, _reactDom.render)(_react2.default.createElement(App, { schema: schema,
	            formData: parsedFormData // can handle null
	            , uiSchema: uiSchema,
	            validate: _validation2.default,
	            validationSchema: validationSchema }), document.getElementById("app-container"));
	    } else {/* not supported by browser */}
	
	    (0, _jquery2.default)('legend').click(function () {
	        (0, _jquery2.default)(this).siblings().toggle();
	        return false;
	    });
	});

/***/ },
/* 1 */
/*!*****************************!*\
  !*** ./~/domready/ready.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	/*!
	  * domready (c) Dustin Diaz 2014 - License MIT
	  */
	!function (name, definition) {
	
	  if (true) module.exports = definition()
	  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)
	  else this[name] = definition()
	
	}('domready', function () {
	
	  var fns = [], listener
	    , doc = document
	    , hack = doc.documentElement.doScroll
	    , domContentLoaded = 'DOMContentLoaded'
	    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)
	
	
	  if (!loaded)
	  doc.addEventListener(domContentLoaded, listener = function () {
	    doc.removeEventListener(domContentLoaded, listener)
	    loaded = 1
	    while (listener = fns.shift()) listener()
	  })
	
	  return function (fn) {
	    loaded ? setTimeout(fn, 0) : fns.push(fn)
	  }
	
	});


/***/ },
/* 2 */
/*!**************************!*\
  !*** ./~/react/react.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(/*! ./lib/React */ 3);


/***/ },
/* 3 */
/*!******************************!*\
  !*** ./~/react/lib/React.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var ReactChildren = __webpack_require__(/*! ./ReactChildren */ 6);
	var ReactComponent = __webpack_require__(/*! ./ReactComponent */ 17);
	var ReactClass = __webpack_require__(/*! ./ReactClass */ 23);
	var ReactDOMFactories = __webpack_require__(/*! ./ReactDOMFactories */ 28);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	var ReactElementValidator = __webpack_require__(/*! ./ReactElementValidator */ 29);
	var ReactPropTypes = __webpack_require__(/*! ./ReactPropTypes */ 31);
	var ReactVersion = __webpack_require__(/*! ./ReactVersion */ 32);
	
	var onlyChild = __webpack_require__(/*! ./onlyChild */ 33);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var __spread = _assign;
	
	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 4 */
/*!******************************!*\
  !*** ./~/process/browser.js ***!
  \******************************/
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/*!**********************************!*\
  !*** ./~/object-assign/index.js ***!
  \**********************************/
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 6 */
/*!**************************************!*\
  !*** ./~/react/lib/ReactChildren.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 7);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 12);
	var traverseAllChildren = __webpack_require__(/*! ./traverseAllChildren */ 14);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 7 */
/*!************************************!*\
  !*** ./~/react/lib/PooledClass.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 8 */
/*!*********************************!*\
  !*** ./~/fbjs/lib/invariant.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 9 */
/*!*************************************!*\
  !*** ./~/react/lib/ReactElement.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 10);
	
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	var canDefineProperty = __webpack_require__(/*! ./canDefineProperty */ 13);
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	var specialPropKeyWarningShown, specialPropRefWarningShown;
	
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }
	
	  return element;
	};
	
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    if (process.env.NODE_ENV !== 'production') {
	      ref = !config.hasOwnProperty('ref') || Object.getOwnPropertyDescriptor(config, 'ref').get ? null : config.ref;
	      key = !config.hasOwnProperty('key') || Object.getOwnPropertyDescriptor(config, 'key').get ? null : '' + config.key;
	    } else {
	      ref = config.ref === undefined ? null : config.ref;
	      key = config.key === undefined ? null : '' + config.key;
	    }
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // Create dummy `key` and `ref` property to `props` to warn users
	    // against its use
	    if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	      if (!props.hasOwnProperty('key')) {
	        Object.defineProperty(props, 'key', {
	          get: function () {
	            if (!specialPropKeyWarningShown) {
	              specialPropKeyWarningShown = true;
	              process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element') : void 0;
	            }
	            return undefined;
	          },
	          configurable: true
	        });
	      }
	      if (!props.hasOwnProperty('ref')) {
	        Object.defineProperty(props, 'ref', {
	          get: function () {
	            if (!specialPropRefWarningShown) {
	              specialPropRefWarningShown = true;
	              process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element') : void 0;
	            }
	            return undefined;
	          },
	          configurable: true
	        });
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = _assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 10 */
/*!******************************************!*\
  !*** ./~/react/lib/ReactCurrentOwner.js ***!
  \******************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 11 */
/*!*******************************!*\
  !*** ./~/fbjs/lib/warning.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 12);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }
	
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	
	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 12 */
/*!*************************************!*\
  !*** ./~/fbjs/lib/emptyFunction.js ***!
  \*************************************/
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 13 */
/*!******************************************!*\
  !*** ./~/react/lib/canDefineProperty.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 14 */
/*!********************************************!*\
  !*** ./~/react/lib/traverseAllChildren.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 10);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	
	var getIteratorFn = __webpack_require__(/*! ./getIteratorFn */ 15);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var KeyEscapeUtils = __webpack_require__(/*! ./KeyEscapeUtils */ 16);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 15 */
/*!**************************************!*\
  !*** ./~/react/lib/getIteratorFn.js ***!
  \**************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 16 */
/*!***************************************!*\
  !*** ./~/react/lib/KeyEscapeUtils.js ***!
  \***************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule KeyEscapeUtils
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {*} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 17 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactComponent.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */
	
	'use strict';
	
	var ReactNoopUpdateQueue = __webpack_require__(/*! ./ReactNoopUpdateQueue */ 18);
	var ReactInstrumentation = __webpack_require__(/*! ./ReactInstrumentation */ 19);
	
	var canDefineProperty = __webpack_require__(/*! ./canDefineProperty */ 13);
	var emptyObject = __webpack_require__(/*! fbjs/lib/emptyObject */ 22);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : void 0;
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onSetState();
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 18 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactNoopUpdateQueue.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */
	
	'use strict';
	
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : void 0;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  }
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 19 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactInstrumentation.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstrumentation
	 */
	
	'use strict';
	
	var ReactDebugTool = __webpack_require__(/*! ./ReactDebugTool */ 20);
	
	module.exports = { debugTool: ReactDebugTool };

/***/ },
/* 20 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactDebugTool.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDebugTool
	 */
	
	'use strict';
	
	var ReactInvalidSetStateWarningDevTool = __webpack_require__(/*! ./ReactInvalidSetStateWarningDevTool */ 21);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var eventHandlers = [];
	var handlerDoesThrowForEvent = {};
	
	function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
	  if (process.env.NODE_ENV !== 'production') {
	    eventHandlers.forEach(function (handler) {
	      try {
	        if (handler[handlerFunctionName]) {
	          handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
	        }
	      } catch (e) {
	        process.env.NODE_ENV !== 'production' ? warning(!handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e.message) : void 0;
	        handlerDoesThrowForEvent[handlerFunctionName] = true;
	      }
	    });
	  }
	}
	
	var ReactDebugTool = {
	  addDevtool: function (devtool) {
	    eventHandlers.push(devtool);
	  },
	  removeDevtool: function (devtool) {
	    for (var i = 0; i < eventHandlers.length; i++) {
	      if (eventHandlers[i] === devtool) {
	        eventHandlers.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onMountRootComponent: function (internalInstance) {
	    emitEvent('onMountRootComponent', internalInstance);
	  },
	  onMountComponent: function (internalInstance) {
	    emitEvent('onMountComponent', internalInstance);
	  },
	  onUpdateComponent: function (internalInstance) {
	    emitEvent('onUpdateComponent', internalInstance);
	  },
	  onUnmountComponent: function (internalInstance) {
	    emitEvent('onUnmountComponent', internalInstance);
	  }
	};
	
	ReactDebugTool.addDevtool(ReactInvalidSetStateWarningDevTool);
	
	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 21 */
/*!***********************************************************!*\
  !*** ./~/react/lib/ReactInvalidSetStateWarningDevTool.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInvalidSetStateWarningDevTool
	 */
	
	'use strict';
	
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;
	
	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}
	
	var ReactInvalidSetStateWarningDevTool = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};
	
	module.exports = ReactInvalidSetStateWarningDevTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 22 */
/*!***********************************!*\
  !*** ./~/fbjs/lib/emptyObject.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 23 */
/*!***********************************!*\
  !*** ./~/react/lib/ReactClass.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var ReactComponent = __webpack_require__(/*! ./ReactComponent */ 17);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	var ReactPropTypeLocations = __webpack_require__(/*! ./ReactPropTypeLocations */ 24);
	var ReactPropTypeLocationNames = __webpack_require__(/*! ./ReactPropTypeLocationNames */ 26);
	var ReactNoopUpdateQueue = __webpack_require__(/*! ./ReactNoopUpdateQueue */ 18);
	
	var emptyObject = __webpack_require__(/*! fbjs/lib/emptyObject */ 22);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var keyMirror = __webpack_require__(/*! fbjs/lib/keyMirror */ 25);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 27);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var MIXINS_KEY = keyOf({ mixins: null });
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}
	
	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : void 0;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : void 0;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.') : invariant(false) : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : void 0;
	
	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : void 0;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : void 0;
	
	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : void 0;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : void 0;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};
	
	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : void 0;
	
	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 24 */
/*!***********************************************!*\
  !*** ./~/react/lib/ReactPropTypeLocations.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(/*! fbjs/lib/keyMirror */ 25);
	
	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});
	
	module.exports = ReactPropTypeLocations;

/***/ },
/* 25 */
/*!*********************************!*\
  !*** ./~/fbjs/lib/keyMirror.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! ./invariant */ 8);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 26 */
/*!***************************************************!*\
  !*** ./~/react/lib/ReactPropTypeLocationNames.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 27 */
/*!*****************************!*\
  !*** ./~/fbjs/lib/keyOf.js ***!
  \*****************************/
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	module.exports = keyOf;

/***/ },
/* 28 */
/*!******************************************!*\
  !*** ./~/react/lib/ReactDOMFactories.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	var ReactElementValidator = __webpack_require__(/*! ./ReactElementValidator */ 29);
	
	var mapObject = __webpack_require__(/*! fbjs/lib/mapObject */ 30);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',
	
	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'
	
	}, createDOMFactory);
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 29 */
/*!**********************************************!*\
  !*** ./~/react/lib/ReactElementValidator.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	var ReactPropTypeLocations = __webpack_require__(/*! ./ReactPropTypeLocations */ 24);
	var ReactPropTypeLocationNames = __webpack_require__(/*! ./ReactPropTypeLocationNames */ 26);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 10);
	
	var canDefineProperty = __webpack_require__(/*! ./canDefineProperty */ 13);
	var getIteratorFn = __webpack_require__(/*! ./getIteratorFn */ 15);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	var loggedTypeFailures = {};
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : void 0;
	}
	
	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	
	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;
	
	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  return addenda;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 30 */
/*!*********************************!*\
  !*** ./~/fbjs/lib/mapObject.js ***!
  \*********************************/
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}
	
	module.exports = mapObject;

/***/ },
/* 31 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactPropTypes.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	var ReactPropTypeLocationNames = __webpack_require__(/*! ./ReactPropTypeLocationNames */ 26);
	
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 12);
	var getIteratorFn = __webpack_require__(/*! ./getIteratorFn */ 15);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/
	
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;

/***/ },
/* 32 */
/*!*************************************!*\
  !*** ./~/react/lib/ReactVersion.js ***!
  \*************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */
	
	'use strict';
	
	module.exports = '15.0.2';

/***/ },
/* 33 */
/*!**********************************!*\
  !*** ./~/react/lib/onlyChild.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : void 0;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 34 */
/*!******************************!*\
  !*** ./~/react-dom/index.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(/*! react/lib/ReactDOM */ 35);


/***/ },
/* 35 */
/*!*********************************!*\
  !*** ./~/react/lib/ReactDOM.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactDefaultInjection = __webpack_require__(/*! ./ReactDefaultInjection */ 39);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 159);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 60);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 56);
	var ReactVersion = __webpack_require__(/*! ./ReactVersion */ 32);
	
	var findDOMNode = __webpack_require__(/*! ./findDOMNode */ 166);
	var getNativeComponentFromComposite = __webpack_require__(/*! ./getNativeComponentFromComposite */ 167);
	var renderSubtreeIntoContainer = __webpack_require__(/*! ./renderSubtreeIntoContainer */ 168);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	ReactDefaultInjection.inject();
	
	var render = ReactPerf.measure('React', 'render', ReactMount.render);
	
	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getNativeComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 36 */
/*!**********************************************!*\
  !*** ./~/react/lib/ReactDOMComponentTree.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponentTree
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 37);
	var ReactDOMComponentFlags = __webpack_require__(/*! ./ReactDOMComponentFlags */ 38);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;
	
	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
	
	/**
	 * Drill down (through composites and empty components) until we get a native or
	 * native text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedNativeOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}
	
	/**
	 * Populate `_nativeNode` on the rendered native/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var nativeInst = getRenderedNativeOrTextFromComponent(inst);
	  nativeInst._nativeNode = node;
	  node[internalInstanceKey] = nativeInst;
	}
	
	function uncacheNode(inst) {
	  var node = inst._nativeNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._nativeNode = null;
	  }
	}
	
	/**
	 * Populate `_nativeNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedNativeOrTextFromComponent(childInst)._domID;
	    if (childID == null) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : invariant(false) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}
	
	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }
	
	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }
	
	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }
	
	  return closest;
	}
	
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._nativeNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._nativeNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;
	
	  if (inst._nativeNode) {
	    return inst._nativeNode;
	  }
	
	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._nativeNode) {
	    parents.push(inst);
	    !inst._nativeParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : invariant(false) : void 0;
	    inst = inst._nativeParent;
	  }
	
	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._nativeNode);
	  }
	
	  return inst._nativeNode;
	}
	
	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};
	
	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 37 */
/*!************************************!*\
  !*** ./~/react/lib/DOMProperty.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_SIDE_EFFECTS: 0x2,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : void 0;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : void 0;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : void 0;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	
	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',
	
	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\uB7\\u0300-\\u036F\\u203F-\\u2040',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 38 */
/*!***********************************************!*\
  !*** ./~/react/lib/ReactDOMComponentFlags.js ***!
  \***********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponentFlags
	 */
	
	'use strict';
	
	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};
	
	module.exports = ReactDOMComponentFlags;

/***/ },
/* 39 */
/*!**********************************************!*\
  !*** ./~/react/lib/ReactDefaultInjection.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */
	
	'use strict';
	
	var BeforeInputEventPlugin = __webpack_require__(/*! ./BeforeInputEventPlugin */ 40);
	var ChangeEventPlugin = __webpack_require__(/*! ./ChangeEventPlugin */ 55);
	var DefaultEventPluginOrder = __webpack_require__(/*! ./DefaultEventPluginOrder */ 67);
	var EnterLeaveEventPlugin = __webpack_require__(/*! ./EnterLeaveEventPlugin */ 68);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	var HTMLDOMPropertyConfig = __webpack_require__(/*! ./HTMLDOMPropertyConfig */ 73);
	var ReactComponentBrowserEnvironment = __webpack_require__(/*! ./ReactComponentBrowserEnvironment */ 74);
	var ReactDOMComponent = __webpack_require__(/*! ./ReactDOMComponent */ 87);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactDOMEmptyComponent = __webpack_require__(/*! ./ReactDOMEmptyComponent */ 128);
	var ReactDOMTreeTraversal = __webpack_require__(/*! ./ReactDOMTreeTraversal */ 129);
	var ReactDOMTextComponent = __webpack_require__(/*! ./ReactDOMTextComponent */ 130);
	var ReactDefaultBatchingStrategy = __webpack_require__(/*! ./ReactDefaultBatchingStrategy */ 131);
	var ReactEventListener = __webpack_require__(/*! ./ReactEventListener */ 132);
	var ReactInjection = __webpack_require__(/*! ./ReactInjection */ 135);
	var ReactReconcileTransaction = __webpack_require__(/*! ./ReactReconcileTransaction */ 136);
	var SVGDOMPropertyConfig = __webpack_require__(/*! ./SVGDOMPropertyConfig */ 144);
	var SelectEventPlugin = __webpack_require__(/*! ./SelectEventPlugin */ 145);
	var SimpleEventPlugin = __webpack_require__(/*! ./SimpleEventPlugin */ 146);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	
	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(/*! ./ReactDefaultPerf */ 157);
	      ReactDefaultPerf.start();
	    }
	  }
	}
	
	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 40 */
/*!***********************************************!*\
  !*** ./~/react/lib/BeforeInputEventPlugin.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 41);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 42);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	var FallbackCompositionState = __webpack_require__(/*! ./FallbackCompositionState */ 50);
	var SyntheticCompositionEvent = __webpack_require__(/*! ./SyntheticCompositionEvent */ 52);
	var SyntheticInputEvent = __webpack_require__(/*! ./SyntheticInputEvent */ 54);
	
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 27);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ },
/* 41 */
/*!***************************************!*\
  !*** ./~/react/lib/EventConstants.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(/*! fbjs/lib/keyMirror */ 25);
	
	var PropagationPhases = keyMirror({ bubbled: null, captured: null });
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topAnimationEnd: null,
	  topAnimationIteration: null,
	  topAnimationStart: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topInvalid: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topTransitionEnd: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};
	
	module.exports = EventConstants;

/***/ },
/* 42 */
/*!*****************************************!*\
  !*** ./~/react/lib/EventPropagators.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 41);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 43);
	var EventPluginUtils = __webpack_require__(/*! ./EventPluginUtils */ 45);
	
	var accumulateInto = __webpack_require__(/*! ./accumulateInto */ 47);
	var forEachAccumulated = __webpack_require__(/*! ./forEachAccumulated */ 48);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 43 */
/*!***************************************!*\
  !*** ./~/react/lib/EventPluginHub.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */
	
	'use strict';
	
	var EventPluginRegistry = __webpack_require__(/*! ./EventPluginRegistry */ 44);
	var EventPluginUtils = __webpack_require__(/*! ./EventPluginUtils */ 45);
	var ReactErrorUtils = __webpack_require__(/*! ./ReactErrorUtils */ 46);
	
	var accumulateInto = __webpack_require__(/*! ./accumulateInto */ 47);
	var forEachAccumulated = __webpack_require__(/*! ./forEachAccumulated */ 48);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : void 0;
	
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[inst._rootNodeID] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[inst._rootNodeID];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[inst._rootNodeID];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][inst._rootNodeID]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }
	
	      delete listenerBank[registrationName][inst._rootNodeID];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 44 */
/*!********************************************!*\
  !*** ./~/react/lib/EventPluginRegistry.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : void 0;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	
	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	  }
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : void 0;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 45 */
/*!*****************************************!*\
  !*** ./~/react/lib/EventPluginUtils.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 41);
	var ReactErrorUtils = __webpack_require__(/*! ./ReactErrorUtils */ 46);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 46 */
/*!****************************************!*\
  !*** ./~/react/lib/ReactErrorUtils.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 47 */
/*!***************************************!*\
  !*** ./~/react/lib/accumulateInto.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : void 0;
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);
	
	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }
	
	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }
	
	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 48 */
/*!*******************************************!*\
  !*** ./~/react/lib/forEachAccumulated.js ***!
  \*******************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};
	
	module.exports = forEachAccumulated;

/***/ },
/* 49 */
/*!********************************************!*\
  !*** ./~/fbjs/lib/ExecutionEnvironment.js ***!
  \********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 50 */
/*!*************************************************!*\
  !*** ./~/react/lib/FallbackCompositionState.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 7);
	
	var getTextContentAccessor = __webpack_require__(/*! ./getTextContentAccessor */ 51);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ },
/* 51 */
/*!***********************************************!*\
  !*** ./~/react/lib/getTextContentAccessor.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ },
/* 52 */
/*!**************************************************!*\
  !*** ./~/react/lib/SyntheticCompositionEvent.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 53);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ },
/* 53 */
/*!***************************************!*\
  !*** ./~/react/lib/SyntheticEvent.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 7);
	
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	
	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }
	
	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}
	
	_assign(SyntheticEvent.prototype, {
	
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      var noop = __webpack_require__(/*! fbjs/lib/emptyFunction */ 12);
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', noop));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', noop));
	    }
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();
	
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	
	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };
	
	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }
	
	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }
	
	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 54 */
/*!********************************************!*\
  !*** ./~/react/lib/SyntheticInputEvent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 53);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ },
/* 55 */
/*!******************************************!*\
  !*** ./~/react/lib/ChangeEventPlugin.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 41);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 43);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 42);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 56);
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 53);
	
	var getEventTarget = __webpack_require__(/*! ./getEventTarget */ 64);
	var isEventSupported = __webpack_require__(/*! ./isEventSupported */ 65);
	var isTextInputElement = __webpack_require__(/*! ./isTextInputElement */ 66);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 27);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}
	
	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 11);
	}
	
	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}
	
	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	
	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }
	
	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}
	
	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return targetInst;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }
	
	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ },
/* 56 */
/*!*************************************!*\
  !*** ./~/react/lib/ReactUpdates.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var CallbackQueue = __webpack_require__(/*! ./CallbackQueue */ 57);
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 7);
	var ReactFeatureFlags = __webpack_require__(/*! ./ReactFeatureFlags */ 58);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 60);
	var Transaction = __webpack_require__(/*! ./Transaction */ 63);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : void 0;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}
	
	_assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : void 0;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.props === component._renderedComponent._currentElement) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);
	
	    if (markerName) {
	      console.timeEnd(markerName);
	    }
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 57 */
/*!**************************************!*\
  !*** ./~/react/lib/CallbackQueue.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 7);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}
	
	_assign(CallbackQueue.prototype, {
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },
	
	  checkpoint: function () {
	    return this._callbacks ? this._callbacks.length : 0;
	  },
	
	  rollback: function (len) {
	    if (this._callbacks) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  },
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },
	
	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }
	
	});
	
	PooledClass.addPoolingTo(CallbackQueue);
	
	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 58 */
/*!******************************************!*\
  !*** ./~/react/lib/ReactFeatureFlags.js ***!
  \******************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactFeatureFlags
	 */
	
	'use strict';
	
	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};
	
	module.exports = ReactFeatureFlags;

/***/ },
/* 59 */
/*!**********************************!*\
  !*** ./~/react/lib/ReactPerf.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 */
	
	'use strict';
	
	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,
	
	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,
	
	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },
	
	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },
	
	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};
	
	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}
	
	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 60 */
/*!****************************************!*\
  !*** ./~/react/lib/ReactReconciler.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(/*! ./ReactRef */ 61);
	var ReactInstrumentation = __webpack_require__(/*! ./ReactInstrumentation */ 19);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing native component instance
	   * @param {?object} info about the native container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, nativeParent, nativeContainerInfo, context) {
	    var markup = internalInstance.mountComponent(transaction, nativeParent, nativeContainerInfo, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onMountComponent(internalInstance);
	    }
	    return markup;
	  },
	
	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getNativeNode: function (internalInstance) {
	    return internalInstance.getNativeNode();
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onUnmountComponent(internalInstance);
	    }
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onUpdateComponent(internalInstance);
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onUpdateComponent(internalInstance);
	    }
	  }
	
	};
	
	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 61 */
/*!*********************************!*\
  !*** ./~/react/lib/ReactRef.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(/*! ./ReactOwner */ 62);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	
	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 62 */
/*!***********************************!*\
  !*** ./~/react/lib/ReactOwner.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	
	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },
	
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : void 0;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 63 */
/*!************************************!*\
  !*** ./~/react/lib/Transaction.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	var Transaction = {
	
	  Mixin: Mixin,
	
	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}
	
	};
	
	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 64 */
/*!***************************************!*\
  !*** ./~/react/lib/getEventTarget.js ***!
  \***************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	
	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }
	
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ },
/* 65 */
/*!*****************************************!*\
  !*** ./~/react/lib/isEventSupported.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 66 */
/*!*******************************************!*\
  !*** ./~/react/lib/isTextInputElement.js ***!
  \*******************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}
	
	module.exports = isTextInputElement;

/***/ },
/* 67 */
/*!************************************************!*\
  !*** ./~/react/lib/DefaultEventPluginOrder.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */
	
	'use strict';
	
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 27);
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];
	
	module.exports = DefaultEventPluginOrder;

/***/ },
/* 68 */
/*!**********************************************!*\
  !*** ./~/react/lib/EnterLeaveEventPlugin.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 41);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 42);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 69);
	
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 27);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);
	
	    return [leave, enter];
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 69 */
/*!********************************************!*\
  !*** ./~/react/lib/SyntheticMouseEvent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 70);
	var ViewportMetrics = __webpack_require__(/*! ./ViewportMetrics */ 71);
	
	var getEventModifierState = __webpack_require__(/*! ./getEventModifierState */ 72);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ },
/* 70 */
/*!*****************************************!*\
  !*** ./~/react/lib/SyntheticUIEvent.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 53);
	
	var getEventTarget = __webpack_require__(/*! ./getEventTarget */ 64);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ },
/* 71 */
/*!****************************************!*\
  !*** ./~/react/lib/ViewportMetrics.js ***!
  \****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 72 */
/*!**********************************************!*\
  !*** ./~/react/lib/getEventModifierState.js ***!
  \**********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ },
/* 73 */
/*!**********************************************!*\
  !*** ./~/react/lib/HTMLDOMPropertyConfig.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 37);
	
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: 0,
	    wmode: 0,
	    wrap: 0,
	
	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 74 */
/*!*********************************************************!*\
  !*** ./~/react/lib/ReactComponentBrowserEnvironment.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(/*! ./DOMChildrenOperations */ 75);
	var ReactDOMIDOperations = __webpack_require__(/*! ./ReactDOMIDOperations */ 86);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup,
	
	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {}
	
	};
	
	ReactPerf.measureMethods(ReactComponentBrowserEnvironment, 'ReactComponentBrowserEnvironment', {
	  replaceNodeWithMarkup: 'replaceNodeWithMarkup'
	});
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 75 */
/*!**********************************************!*\
  !*** ./~/react/lib/DOMChildrenOperations.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(/*! ./DOMLazyTree */ 76);
	var Danger = __webpack_require__(/*! ./Danger */ 81);
	var ReactMultiChildUpdateTypes = __webpack_require__(/*! ./ReactMultiChildUpdateTypes */ 85);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(/*! ./createMicrosoftUnsafeLocalFunction */ 77);
	var setInnerHTML = __webpack_require__(/*! ./setInnerHTML */ 80);
	var setTextContent = __webpack_require__(/*! ./setTextContent */ 78);
	
	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getNativeNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});
	
	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}
	
	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}
	
	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}
	
	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}
	
	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}
	
	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
	
	  replaceDelimitedText: replaceDelimitedText,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          removeChild(parentNode, update.fromNode);
	          break;
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  replaceDelimitedText: 'replaceDelimitedText'
	});
	
	module.exports = DOMChildrenOperations;

/***/ },
/* 76 */
/*!************************************!*\
  !*** ./~/react/lib/DOMLazyTree.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMLazyTree
	 */
	
	'use strict';
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(/*! ./createMicrosoftUnsafeLocalFunction */ 77);
	var setTextContent = __webpack_require__(/*! ./setTextContent */ 78);
	
	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
	
	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    node.innerHTML = tree.html;
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}
	
	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level.
	  if (tree.node.nodeType === 11) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});
	
	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}
	
	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}
	
	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    tree.node.innerHTML = html;
	  }
	}
	
	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}
	
	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null
	  };
	}
	
	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;
	
	module.exports = DOMLazyTree;

/***/ },
/* 77 */
/*!***********************************************************!*\
  !*** ./~/react/lib/createMicrosoftUnsafeLocalFunction.js ***!
  \***********************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createMicrosoftUnsafeLocalFunction
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};
	
	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 78 */
/*!***************************************!*\
  !*** ./~/react/lib/setTextContent.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	var escapeTextContentForBrowser = __webpack_require__(/*! ./escapeTextContentForBrowser */ 79);
	var setInnerHTML = __webpack_require__(/*! ./setInnerHTML */ 80);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 79 */
/*!****************************************************!*\
  !*** ./~/react/lib/escapeTextContentForBrowser.js ***!
  \****************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */
	
	'use strict';
	
	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};
	
	var ESCAPE_REGEX = /[&><"']/g;
	
	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 80 */
/*!*************************************!*\
  !*** ./~/react/lib/setInnerHTML.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(/*! ./createMicrosoftUnsafeLocalFunction */ 77);
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  node.innerHTML = html;
	});
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 81 */
/*!*******************************!*\
  !*** ./~/react/lib/Danger.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(/*! ./DOMLazyTree */ 76);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	
	var createNodesFromMarkup = __webpack_require__(/*! fbjs/lib/createNodesFromMarkup */ 82);
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 12);
	var getMarkupWrap = __webpack_require__(/*! fbjs/lib/getMarkupWrap */ 84);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';
	
	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}
	
	var Danger = {
	
	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : void 0;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : void 0;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];
	
	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];
	
	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }
	
	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );
	
	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
	
	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);
	
	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : void 0;
	
	          resultList[resultIndex] = renderNode;
	
	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }
	
	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : void 0;
	
	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : void 0;
	
	    return resultList;
	  },
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : void 0;
	
	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 82 */
/*!*********************************************!*\
  !*** ./~/fbjs/lib/createNodesFromMarkup.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 49);
	
	var createArrayFromMixed = __webpack_require__(/*! ./createArrayFromMixed */ 83);
	var getMarkupWrap = __webpack_require__(/*! ./getMarkupWrap */ 84);
	var invariant = __webpack_require__(/*! ./invariant */ 8);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 83 */
/*!********************************************!*\
  !*** ./~/fbjs/lib/createArrayFromMixed.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(/*! ./invariant */ 8);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
	
	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 84 */
/*!*************************************!*\
  !*** ./~/fbjs/lib/getMarkupWrap.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 49);
	
	var invariant = __webpack_require__(/*! ./invariant */ 8);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 85 */
/*!***************************************************!*\
  !*** ./~/react/lib/ReactMultiChildUpdateTypes.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(/*! fbjs/lib/keyMirror */ 25);
	
	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});
	
	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 86 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactDOMIDOperations.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(/*! ./DOMChildrenOperations */ 75);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};
	
	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});
	
	module.exports = ReactDOMIDOperations;

/***/ },
/* 87 */
/*!******************************************!*\
  !*** ./~/react/lib/ReactDOMComponent.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var AutoFocusUtils = __webpack_require__(/*! ./AutoFocusUtils */ 88);
	var CSSPropertyOperations = __webpack_require__(/*! ./CSSPropertyOperations */ 90);
	var DOMLazyTree = __webpack_require__(/*! ./DOMLazyTree */ 76);
	var DOMNamespaces = __webpack_require__(/*! ./DOMNamespaces */ 98);
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 37);
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 99);
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 41);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 43);
	var EventPluginRegistry = __webpack_require__(/*! ./EventPluginRegistry */ 44);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 104);
	var ReactComponentBrowserEnvironment = __webpack_require__(/*! ./ReactComponentBrowserEnvironment */ 74);
	var ReactDOMButton = __webpack_require__(/*! ./ReactDOMButton */ 107);
	var ReactDOMComponentFlags = __webpack_require__(/*! ./ReactDOMComponentFlags */ 38);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactDOMInput = __webpack_require__(/*! ./ReactDOMInput */ 109);
	var ReactDOMOption = __webpack_require__(/*! ./ReactDOMOption */ 111);
	var ReactDOMSelect = __webpack_require__(/*! ./ReactDOMSelect */ 112);
	var ReactDOMTextarea = __webpack_require__(/*! ./ReactDOMTextarea */ 113);
	var ReactMultiChild = __webpack_require__(/*! ./ReactMultiChild */ 114);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	
	var escapeTextContentForBrowser = __webpack_require__(/*! ./escapeTextContentForBrowser */ 79);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var isEventSupported = __webpack_require__(/*! ./isEventSupported */ 65);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 27);
	var shallowEqual = __webpack_require__(/*! fbjs/lib/shallowEqual */ 126);
	var validateDOMNesting = __webpack_require__(/*! ./validateDOMNesting */ 127);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};
	
	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : invariant(false) : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : void 0;
	}
	
	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._nativeContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  if (!doc) {
	    // Server rendering.
	    return;
	  }
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : void 0;
	
	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }
	
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topInvalid, 'invalid', node)];
	      break;
	  }
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	var globalIdCounter = 1;
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._nativeNode = null;
	  this._nativeParent = null;
	  this._rootNodeID = null;
	  this._domID = null;
	  this._nativeContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the containing DOM component instance
	   * @param {?object} info about the native container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = nativeContainerInfo._idCounter++;
	    this._nativeParent = nativeParent;
	    this._nativeContainerInfo = nativeContainerInfo;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'iframe':
	      case 'object':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, nativeParent);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, nativeParent);
	        props = ReactDOMInput.getNativeProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, nativeParent);
	        props = ReactDOMOption.getNativeProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, nativeParent);
	        props = ReactDOMSelect.getNativeProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, nativeParent);
	        props = ReactDOMTextarea.getNativeProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }
	
	    assertValidProps(this, props);
	
	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (nativeParent != null) {
	      namespaceURI = nativeParent._namespaceURI;
	      parentTag = nativeParent._tag;
	    } else if (nativeContainerInfo._tag) {
	      namespaceURI = nativeContainerInfo._namespaceURI;
	      parentTag = nativeContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (nativeParent != null) {
	        parentInfo = nativeParent._ancestorInfo;
	      } else if (nativeContainerInfo._tag) {
	        parentInfo = nativeContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = nativeContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else {
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._nativeParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'button':
	      case 'input':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    if (!this._nativeParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        DOMLazyTree.queueText(lazyTree, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  getNativeNode: function () {
	    return getNode(this);
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'iframe':
	      case 'object':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : void 0;
	        break;
	    }
	
	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._domID = null;
	    this._wrapperState = null;
	  },
	
	  getPublicInstance: function () {
	    return getNode(this);
	  }
	
	};
	
	ReactPerf.measureMethods(ReactDOMComponent.Mixin, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  receiveComponent: 'receiveComponent'
	});
	
	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 88 */
/*!***************************************!*\
  !*** ./~/react/lib/AutoFocusUtils.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 */
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	
	var focusNode = __webpack_require__(/*! fbjs/lib/focusNode */ 89);
	
	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ },
/* 89 */
/*!*********************************!*\
  !*** ./~/fbjs/lib/focusNode.js ***!
  \*********************************/
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 90 */
/*!**********************************************!*\
  !*** ./~/react/lib/CSSPropertyOperations.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(/*! ./CSSProperty */ 91);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	
	var camelizeStyleName = __webpack_require__(/*! fbjs/lib/camelizeStyleName */ 92);
	var dangerousStyleValue = __webpack_require__(/*! ./dangerousStyleValue */ 94);
	var hyphenateStyleName = __webpack_require__(/*! fbjs/lib/hyphenateStyleName */ 95);
	var memoizeStringOnly = __webpack_require__(/*! fbjs/lib/memoizeStringOnly */ 97);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	
	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };
	
	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }
	
	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };
	
	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }
	
	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 91 */
/*!************************************!*\
  !*** ./~/react/lib/CSSProperty.js ***!
  \************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ },
/* 92 */
/*!*****************************************!*\
  !*** ./~/fbjs/lib/camelizeStyleName.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(/*! ./camelize */ 93);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 93 */
/*!********************************!*\
  !*** ./~/fbjs/lib/camelize.js ***!
  \********************************/
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 94 */
/*!********************************************!*\
  !*** ./~/react/lib/dangerousStyleValue.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(/*! ./CSSProperty */ 91);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      if (component) {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 95 */
/*!******************************************!*\
  !*** ./~/fbjs/lib/hyphenateStyleName.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(/*! ./hyphenate */ 96);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 96 */
/*!*********************************!*\
  !*** ./~/fbjs/lib/hyphenate.js ***!
  \*********************************/
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 97 */
/*!*****************************************!*\
  !*** ./~/fbjs/lib/memoizeStringOnly.js ***!
  \*****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 98 */
/*!**************************************!*\
  !*** ./~/react/lib/DOMNamespaces.js ***!
  \**************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMNamespaces
	 */
	
	'use strict';
	
	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};
	
	module.exports = DOMNamespaces;

/***/ },
/* 99 */
/*!**********************************************!*\
  !*** ./~/react/lib/DOMPropertyOperations.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 37);
	var ReactDOMInstrumentation = __webpack_require__(/*! ./ReactDOMInstrumentation */ 100);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	
	var quoteAttributeValueForBrowser = __webpack_require__(/*! ./quoteAttributeValueForBrowser */ 103);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },
	
	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactDOMInstrumentation.debugTool.onCreateMarkupForProperty(name, value);
	    }
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactDOMInstrumentation.debugTool.onSetValueForProperty(node, name, value);
	    }
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactDOMInstrumentation.debugTool.onDeleteValueForProperty(node, name);
	    }
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          // No HAS_SIDE_EFFECTS logic here, only `value` has it and is string.
	          node[propName] = false;
	        } else {
	          if (!propertyInfo.hasSideEffects || '' + node[propName] !== '') {
	            node[propName] = '';
	          }
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 100 */
/*!************************************************!*\
  !*** ./~/react/lib/ReactDOMInstrumentation.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInstrumentation
	 */
	
	'use strict';
	
	var ReactDOMDebugTool = __webpack_require__(/*! ./ReactDOMDebugTool */ 101);
	
	module.exports = { debugTool: ReactDOMDebugTool };

/***/ },
/* 101 */
/*!******************************************!*\
  !*** ./~/react/lib/ReactDOMDebugTool.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMDebugTool
	 */
	
	'use strict';
	
	var ReactDOMUnknownPropertyDevtool = __webpack_require__(/*! ./ReactDOMUnknownPropertyDevtool */ 102);
	
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var eventHandlers = [];
	var handlerDoesThrowForEvent = {};
	
	function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
	  if (process.env.NODE_ENV !== 'production') {
	    eventHandlers.forEach(function (handler) {
	      try {
	        if (handler[handlerFunctionName]) {
	          handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
	        }
	      } catch (e) {
	        process.env.NODE_ENV !== 'production' ? warning(!handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e.message) : void 0;
	        handlerDoesThrowForEvent[handlerFunctionName] = true;
	      }
	    });
	  }
	}
	
	var ReactDOMDebugTool = {
	  addDevtool: function (devtool) {
	    eventHandlers.push(devtool);
	  },
	  removeDevtool: function (devtool) {
	    for (var i = 0; i < eventHandlers.length; i++) {
	      if (eventHandlers[i] === devtool) {
	        eventHandlers.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  onCreateMarkupForProperty: function (name, value) {
	    emitEvent('onCreateMarkupForProperty', name, value);
	  },
	  onSetValueForProperty: function (node, name, value) {
	    emitEvent('onSetValueForProperty', node, name, value);
	  },
	  onDeleteValueForProperty: function (node, name) {
	    emitEvent('onDeleteValueForProperty', node, name);
	  }
	};
	
	ReactDOMDebugTool.addDevtool(ReactDOMUnknownPropertyDevtool);
	
	module.exports = ReactDOMDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 102 */
/*!*******************************************************!*\
  !*** ./~/react/lib/ReactDOMUnknownPropertyDevtool.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMUnknownPropertyDevtool
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 37);
	var EventPluginRegistry = __webpack_require__(/*! ./EventPluginRegistry */ 44);
	
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};
	
	  var warnUnknownProperty = function (name) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }
	
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : void 0;
	
	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;
	
	    process.env.NODE_ENV !== 'production' ? warning(registrationName == null, 'Unknown event handler property %s. Did you mean `%s`?', name, registrationName) : void 0;
	  };
	}
	
	var ReactDOMUnknownPropertyDevtool = {
	  onCreateMarkupForProperty: function (name, value) {
	    warnUnknownProperty(name);
	  },
	  onSetValueForProperty: function (node, name, value) {
	    warnUnknownProperty(name);
	  },
	  onDeleteValueForProperty: function (node, name) {
	    warnUnknownProperty(name);
	  }
	};
	
	module.exports = ReactDOMUnknownPropertyDevtool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 103 */
/*!******************************************************!*\
  !*** ./~/react/lib/quoteAttributeValueForBrowser.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(/*! ./escapeTextContentForBrowser */ 79);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 104 */
/*!*************************************************!*\
  !*** ./~/react/lib/ReactBrowserEventEmitter.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 41);
	var EventPluginRegistry = __webpack_require__(/*! ./EventPluginRegistry */ 44);
	var ReactEventEmitterMixin = __webpack_require__(/*! ./ReactEventEmitterMixin */ 105);
	var ViewportMetrics = __webpack_require__(/*! ./ViewportMetrics */ 71);
	
	var getVendorPrefixedEventName = __webpack_require__(/*! ./getVendorPrefixedEventName */ 106);
	var isEventSupported = __webpack_require__(/*! ./isEventSupported */ 65);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = document.createEvent && 'pageX' in document.createEvent('MouseEvent');
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 105 */
/*!***********************************************!*\
  !*** ./~/react/lib/ReactEventEmitterMixin.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 43);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 106 */
/*!***************************************************!*\
  !*** ./~/react/lib/getVendorPrefixedEventName.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getVendorPrefixedEventName
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	
	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
	
	  return prefixes;
	}
	
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};
	
	/**
	 * Element to check for prefixes on.
	 */
	var style = {};
	
	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }
	
	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }
	
	  var prefixMap = vendorPrefixes[eventName];
	
	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }
	
	  return '';
	}
	
	module.exports = getVendorPrefixedEventName;

/***/ },
/* 107 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactDOMButton.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */
	
	'use strict';
	
	var DisabledInputUtils = __webpack_require__(/*! ./DisabledInputUtils */ 108);
	
	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: DisabledInputUtils.getNativeProps
	};
	
	module.exports = ReactDOMButton;

/***/ },
/* 108 */
/*!*******************************************!*\
  !*** ./~/react/lib/DisabledInputUtils.js ***!
  \*******************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DisabledInputUtils
	 */
	
	'use strict';
	
	var disableableMouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};
	
	/**
	 * Implements a native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var DisabledInputUtils = {
	  getNativeProps: function (inst, props) {
	    if (!props.disabled) {
	      return props;
	    }
	
	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (!disableableMouseListenerNames[key] && props.hasOwnProperty(key)) {
	        nativeProps[key] = props[key];
	      }
	    }
	
	    return nativeProps;
	  }
	};
	
	module.exports = DisabledInputUtils;

/***/ },
/* 109 */
/*!**************************************!*\
  !*** ./~/react/lib/ReactDOMInput.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var DisabledInputUtils = __webpack_require__(/*! ./DisabledInputUtils */ 108);
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 99);
	var LinkedValueUtils = __webpack_require__(/*! ./LinkedValueUtils */ 110);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 56);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueNull = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	function warnIfValueIsNull(props) {
	  if (props != null && props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `input` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;
	
	    didWarnValueNull = true;
	  }
	}
	
	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var nativeProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined
	    }, DisabledInputUtils.getNativeProps(inst, props), {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValueDefaultValue = true;
	      }
	      warnIfValueIsNull(props);
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	
	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = props.checked !== undefined || props.value !== undefined;
	    }
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    if (process.env.NODE_ENV !== 'production') {
	      warnIfValueIsNull(props);
	
	      var initialValue = inst._wrapperState.initialChecked || inst._wrapperState.initialValue;
	      var defaultValue = props.defaultChecked || props.defaultValue;
	      var controlled = props.checked !== undefined || props.value !== undefined;
	      var owner = inst._currentElement._owner;
	
	      if ((initialValue || !inst._wrapperState.controlled) && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && (defaultValue || !controlled) && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 110 */
/*!*****************************************!*\
  !*** ./~/react/lib/LinkedValueUtils.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 */
	
	'use strict';
	
	var ReactPropTypes = __webpack_require__(/*! ./ReactPropTypes */ 31);
	var ReactPropTypeLocations = __webpack_require__(/*! ./ReactPropTypeLocations */ 24);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : void 0;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : void 0;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 111 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactDOMOption.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var ReactChildren = __webpack_require__(/*! ./ReactChildren */ 6);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactDOMSelect = __webpack_require__(/*! ./ReactDOMSelect */ 112);
	
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, nativeParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }
	
	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (nativeParent != null) {
	      var selectParent = nativeParent;
	
	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._nativeParent;
	      }
	
	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }
	
	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },
	
	  getNativeProps: function (inst, props) {
	    var nativeProps = _assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = '';
	
	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	      }
	    });
	
	    if (content) {
	      nativeProps.children = content;
	    }
	
	    return nativeProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 112 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactDOMSelect.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var DisabledInputUtils = __webpack_require__(/*! ./DisabledInputUtils */ 108);
	var LinkedValueUtils = __webpack_require__(/*! ./LinkedValueUtils */ 110);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 56);
	
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var didWarnValueLink = false;
	var didWarnValueNull = false;
	var didWarnValueDefaultValue = false;
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	function warnIfValueIsNull(props) {
	  if (props != null && props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `select` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;
	
	    didWarnValueNull = true;
	  }
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getNativeProps: function (inst, props) {
	    return _assign({}, DisabledInputUtils.getNativeProps(inst, props), {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	      warnIfValueIsNull(props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },
	
	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    if (process.env.NODE_ENV !== 'production') {
	      warnIfValueIsNull(props);
	    }
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 113 */
/*!*****************************************!*\
  !*** ./~/react/lib/ReactDOMTextarea.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var DisabledInputUtils = __webpack_require__(/*! ./DisabledInputUtils */ 108);
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 99);
	var LinkedValueUtils = __webpack_require__(/*! ./LinkedValueUtils */ 110);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 56);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var didWarnValueLink = false;
	var didWarnValueNull = false;
	var didWarnValDefaultVal = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	function warnIfValueIsNull(props) {
	  if (props != null && props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `textarea` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;
	
	    didWarnValueNull = true;
	  }
	}
	
	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : void 0;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = _assign({}, DisabledInputUtils.getNativeProps(inst, props), {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	      warnIfValueIsNull(props);
	    }
	
	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : void 0;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : void 0;
	        children = children[0];
	      }
	
	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    if (process.env.NODE_ENV !== 'production') {
	      warnIfValueIsNull(props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 114 */
/*!****************************************!*\
  !*** ./~/react/lib/ReactMultiChild.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(/*! ./ReactComponentEnvironment */ 115);
	var ReactMultiChildUpdateTypes = __webpack_require__(/*! ./ReactMultiChildUpdateTypes */ 85);
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 10);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 60);
	var ReactChildReconciler = __webpack_require__(/*! ./ReactChildReconciler */ 116);
	
	var flattenChildren = __webpack_require__(/*! ./flattenChildren */ 125);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getNativeNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, removedNodes, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, removedNodes, transaction, context);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, removedNodes, transaction, context);
	      return nextChildren;
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._nativeContainerInfo, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : invariant(false) : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : invariant(false) : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },
	
	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, lastPlacedNode, nextIndex, transaction, context));
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getNativeNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, afterNode, index, transaction, context) {
	      var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._nativeContainerInfo, context);
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 115 */
/*!**************************************************!*\
  !*** ./~/react/lib/ReactComponentEnvironment.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : void 0;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 116 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactChildReconciler.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 60);
	
	var instantiateReactComponent = __webpack_require__(/*! ./instantiateReactComponent */ 117);
	var KeyEscapeUtils = __webpack_require__(/*! ./KeyEscapeUtils */ 16);
	var shouldUpdateReactComponent = __webpack_require__(/*! ./shouldUpdateReactComponent */ 122);
	var traverseAllChildren = __webpack_require__(/*! ./traverseAllChildren */ 14);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', KeyEscapeUtils.unescape(name)) : void 0;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, removedNodes, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getNativeNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getNativeNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 117 */
/*!**************************************************!*\
  !*** ./~/react/lib/instantiateReactComponent.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 118);
	var ReactEmptyComponent = __webpack_require__(/*! ./ReactEmptyComponent */ 123);
	var ReactNativeComponent = __webpack_require__(/*! ./ReactNativeComponent */ 124);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : void 0;
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : void 0;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getNativeNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 118 */
/*!************************************************!*\
  !*** ./~/react/lib/ReactCompositeComponent.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var ReactComponentEnvironment = __webpack_require__(/*! ./ReactComponentEnvironment */ 115);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 10);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	var ReactErrorUtils = __webpack_require__(/*! ./ReactErrorUtils */ 46);
	var ReactInstanceMap = __webpack_require__(/*! ./ReactInstanceMap */ 119);
	var ReactInstrumentation = __webpack_require__(/*! ./ReactInstrumentation */ 19);
	var ReactNodeTypes = __webpack_require__(/*! ./ReactNodeTypes */ 120);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	var ReactPropTypeLocations = __webpack_require__(/*! ./ReactPropTypeLocations */ 24);
	var ReactPropTypeLocationNames = __webpack_require__(/*! ./ReactPropTypeLocationNames */ 26);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 60);
	var ReactUpdateQueue = __webpack_require__(/*! ./ReactUpdateQueue */ 121);
	
	var emptyObject = __webpack_require__(/*! fbjs/lib/emptyObject */ 22);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var shouldUpdateReactComponent = __webpack_require__(/*! ./shouldUpdateReactComponent */ 122);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};
	
	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || ReactElement.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}
	
	function shouldConstruct(Component) {
	  return Component.prototype && Component.prototype.isReactComponent;
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;
	    this._nativeParent = null;
	    this._nativeContainerInfo = null;
	
	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	
	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} nativeParent
	   * @param {?object} nativeContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._nativeParent = nativeParent;
	    this._nativeContainerInfo = nativeContainerInfo;
	
	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    // Initialize the public class
	    var inst = this._constructComponent(publicProps, publicContext);
	    var renderedElement;
	
	    // Support functional components
	    if (!shouldConstruct(Component) && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || ReactElement.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : invariant(false) : void 0;
	      inst = new StatelessComponent(Component);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	
	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';
	
	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
	    }
	
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }
	
	    return markup;
	  },
	
	  _constructComponent: function (publicProps, publicContext) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(publicProps, publicContext);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(publicProps, publicContext);
	    }
	  },
	
	  _constructComponentWithoutOwner: function (publicProps, publicContext) {
	    var Component = this._currentElement.type;
	    if (shouldConstruct(Component)) {
	      return new Component(publicProps, publicContext, ReactUpdateQueue);
	    } else {
	      return Component(publicProps, publicContext, ReactUpdateQueue);
	    }
	  },
	
	  performInitialMountWithErrorHandling: function (renderedElement, nativeParent, nativeContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();
	
	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);
	
	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
	    }
	    return markup;
	  },
	
	  performInitialMount: function (renderedElement, nativeParent, nativeContainerInfo, transaction, context) {
	    var inst = this._instance;
	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    this._renderedNodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedComponent = this._instantiateReactComponent(renderedElement);
	
	    var markup = ReactReconciler.mountComponent(this._renderedComponent, transaction, nativeParent, nativeContainerInfo, this._processChildContext(context));
	
	    return markup;
	  },
	
	  getNativeNode: function () {
	    return ReactReconciler.getNativeNode(this._renderedComponent);
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        inst.componentWillUnmount();
	      }
	    }
	
	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	    }
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onEndProcessingChildContext();
	    }
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },
	
	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);
	
	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : void 0;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : void 0;
	          }
	        }
	      }
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    }
	
	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    var willReceive = false;
	    var nextContext;
	    var nextProps;
	
	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }
	
	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      willReceive = true;
	    }
	
	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      inst.componentWillReceiveProps(nextProps, nextContext);
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	
	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }
	
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldNativeNode = ReactReconciler.getNativeNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);
	
	      this._renderedNodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, transaction, this._nativeParent, this._nativeContainerInfo, this._processChildContext(context));
	      this._replaceNodeWithMarkup(oldNativeNode, nextMarkup);
	    }
	  },
	
	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldNativeNode, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldNativeNode, nextMarkup);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedComponent === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }
	
	    return renderedComponent;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;
	    return renderedComponent;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});
	
	var ReactCompositeComponent = {
	
	  Mixin: ReactCompositeComponentMixin
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 119 */
/*!*****************************************!*\
  !*** ./~/react/lib/ReactInstanceMap.js ***!
  \*****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 120 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactNodeTypes.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNodeTypes
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	var ReactNodeTypes = {
	  NATIVE: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,
	
	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (ReactElement.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.NATIVE;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : invariant(false) : void 0;
	  }
	};
	
	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 121 */
/*!*****************************************!*\
  !*** ./~/react/lib/ReactUpdateQueue.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 10);
	var ReactInstanceMap = __webpack_require__(/*! ./ReactInstanceMap */ 119);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 56);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : void 0;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  },
	
	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : invariant(false) : void 0;
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 122 */
/*!***************************************************!*\
  !*** ./~/react/lib/shouldUpdateReactComponent.js ***!
  \***************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 123 */
/*!********************************************!*\
  !*** ./~/react/lib/ReactEmptyComponent.js ***!
  \********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */
	
	'use strict';
	
	var emptyComponentFactory;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};
	
	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 124 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactNativeComponent.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;
	
	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}
	
	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : void 0;
	  return new genericComponentClass(element);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};
	
	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 125 */
/*!****************************************!*\
  !*** ./~/react/lib/flattenChildren.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */
	
	'use strict';
	
	var KeyEscapeUtils = __webpack_require__(/*! ./KeyEscapeUtils */ 16);
	var traverseAllChildren = __webpack_require__(/*! ./traverseAllChildren */ 14);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', KeyEscapeUtils.unescape(name)) : void 0;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 126 */
/*!************************************!*\
  !*** ./~/fbjs/lib/shallowEqual.js ***!
  \************************************/
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 127 */
/*!*******************************************!*\
  !*** ./~/react/lib/validateDOMNesting.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    current: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.current = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      var tagDisplayName = childTag;
	      if (childTag !== '#text') {
	        tagDisplayName = '<' + childTag + '>';
	      }
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>. ' + 'See %s.%s', tagDisplayName, ancestorTag, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 128 */
/*!***********************************************!*\
  !*** ./~/react/lib/ReactDOMEmptyComponent.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMEmptyComponent
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var DOMLazyTree = __webpack_require__(/*! ./DOMLazyTree */ 76);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	
	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._nativeNode = null;
	  this._nativeParent = null;
	  this._nativeContainerInfo = null;
	  this._domID = null;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
	    var domID = nativeContainerInfo._idCounter++;
	    this._domID = domID;
	    this._nativeParent = nativeParent;
	    this._nativeContainerInfo = nativeContainerInfo;
	
	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = nativeContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getNativeNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});
	
	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 129 */
/*!**********************************************!*\
  !*** ./~/react/lib/ReactDOMTreeTraversal.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTreeTraversal
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_nativeNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;
	  !('_nativeNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;
	
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._nativeParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._nativeParent) {
	    depthB++;
	  }
	
	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._nativeParent;
	    depthA--;
	  }
	
	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._nativeParent;
	    depthB--;
	  }
	
	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._nativeParent;
	    instB = instB._nativeParent;
	  }
	  return null;
	}
	
	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_nativeNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : invariant(false) : void 0;
	  !('_nativeNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : invariant(false) : void 0;
	
	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._nativeParent;
	  }
	  return false;
	}
	
	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_nativeNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : invariant(false) : void 0;
	
	  return inst._nativeParent;
	}
	
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._nativeParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], false, arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], true, arg);
	  }
	}
	
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._nativeParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._nativeParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], true, argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], false, argTo);
	  }
	}
	
	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 130 */
/*!**********************************************!*\
  !*** ./~/react/lib/ReactDOMTextComponent.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var DOMChildrenOperations = __webpack_require__(/*! ./DOMChildrenOperations */ 75);
	var DOMLazyTree = __webpack_require__(/*! ./DOMLazyTree */ 76);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	
	var escapeTextContentForBrowser = __webpack_require__(/*! ./escapeTextContentForBrowser */ 79);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var validateDOMNesting = __webpack_require__(/*! ./validateDOMNesting */ 127);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._nativeNode = null;
	  this._nativeParent = null;
	
	  // Properties
	  this._domID = null;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};
	
	_assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (nativeParent != null) {
	        parentInfo = nativeParent._ancestorInfo;
	      } else if (nativeContainerInfo != null) {
	        parentInfo = nativeContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting('#text', this, parentInfo);
	      }
	    }
	
	    var domID = nativeContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._nativeParent = nativeParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = nativeContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getNativeNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },
	
	  getNativeNode: function () {
	    var nativeNode = this._commentNodes;
	    if (nativeNode) {
	      return nativeNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : invariant(false) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    nativeNode = [this._nativeNode, this._closingComment];
	    this._commentNodes = nativeNode;
	    return nativeNode;
	  },
	
	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	
	});
	
	ReactPerf.measureMethods(ReactDOMTextComponent.prototype, 'ReactDOMTextComponent', {
	  mountComponent: 'mountComponent',
	  receiveComponent: 'receiveComponent'
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 131 */
/*!*****************************************************!*\
  !*** ./~/react/lib/ReactDefaultBatchingStrategy.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 56);
	var Transaction = __webpack_require__(/*! ./Transaction */ 63);
	
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 12);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 132 */
/*!*******************************************!*\
  !*** ./~/react/lib/ReactEventListener.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var EventListener = __webpack_require__(/*! fbjs/lib/EventListener */ 133);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 7);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 56);
	
	var getEventTarget = __webpack_require__(/*! ./getEventTarget */ 64);
	var getUnboundedScrollPosition = __webpack_require__(/*! fbjs/lib/getUnboundedScrollPosition */ 134);
	
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._nativeParent) {
	    inst = inst._nativeParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ },
/* 133 */
/*!*************************************!*\
  !*** ./~/fbjs/lib/EventListener.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 12);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function () {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 134 */
/*!**************************************************!*\
  !*** ./~/fbjs/lib/getUnboundedScrollPosition.js ***!
  \**************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 135 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactInjection.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 37);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 43);
	var EventPluginUtils = __webpack_require__(/*! ./EventPluginUtils */ 45);
	var ReactComponentEnvironment = __webpack_require__(/*! ./ReactComponentEnvironment */ 115);
	var ReactClass = __webpack_require__(/*! ./ReactClass */ 23);
	var ReactEmptyComponent = __webpack_require__(/*! ./ReactEmptyComponent */ 123);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 104);
	var ReactNativeComponent = __webpack_require__(/*! ./ReactNativeComponent */ 124);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 56);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ },
/* 136 */
/*!**************************************************!*\
  !*** ./~/react/lib/ReactReconcileTransaction.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var CallbackQueue = __webpack_require__(/*! ./CallbackQueue */ 57);
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 7);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 104);
	var ReactInputSelection = __webpack_require__(/*! ./ReactInputSelection */ 137);
	var Transaction = __webpack_require__(/*! ./Transaction */ 63);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },
	
	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	_assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;

/***/ },
/* 137 */
/*!********************************************!*\
  !*** ./~/react/lib/ReactInputSelection.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(/*! ./ReactDOMSelection */ 138);
	
	var containsNode = __webpack_require__(/*! fbjs/lib/containsNode */ 140);
	var focusNode = __webpack_require__(/*! fbjs/lib/focusNode */ 89);
	var getActiveElement = __webpack_require__(/*! fbjs/lib/getActiveElement */ 143);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ },
/* 138 */
/*!******************************************!*\
  !*** ./~/react/lib/ReactDOMSelection.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	
	var getNodeForCharacterOffset = __webpack_require__(/*! ./getNodeForCharacterOffset */ 139);
	var getTextContentAccessor = __webpack_require__(/*! ./getTextContentAccessor */ 51);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ },
/* 139 */
/*!**************************************************!*\
  !*** ./~/react/lib/getNodeForCharacterOffset.js ***!
  \**************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ },
/* 140 */
/*!************************************!*\
  !*** ./~/fbjs/lib/containsNode.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var isTextNode = __webpack_require__(/*! ./isTextNode */ 141);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 141 */
/*!**********************************!*\
  !*** ./~/fbjs/lib/isTextNode.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(/*! ./isNode */ 142);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 142 */
/*!******************************!*\
  !*** ./~/fbjs/lib/isNode.js ***!
  \******************************/
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 143 */
/*!****************************************!*\
  !*** ./~/fbjs/lib/getActiveElement.js ***!
  \****************************************/
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 144 */
/*!*********************************************!*\
  !*** ./~/react/lib/SVGDOMPropertyConfig.js ***!
  \*********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */
	
	'use strict';
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};
	
	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});
	
	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 145 */
/*!******************************************!*\
  !*** ./~/react/lib/SelectEventPlugin.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 41);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 42);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 49);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactInputSelection = __webpack_require__(/*! ./ReactInputSelection */ 137);
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 53);
	
	var getActiveElement = __webpack_require__(/*! fbjs/lib/getActiveElement */ 143);
	var isTextInputElement = __webpack_require__(/*! ./isTextInputElement */ 66);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 27);
	var shallowEqual = __webpack_require__(/*! fbjs/lib/shallowEqual */ 126);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ },
/* 146 */
/*!******************************************!*\
  !*** ./~/react/lib/SimpleEventPlugin.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 41);
	var EventListener = __webpack_require__(/*! fbjs/lib/EventListener */ 133);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 42);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var SyntheticAnimationEvent = __webpack_require__(/*! ./SyntheticAnimationEvent */ 147);
	var SyntheticClipboardEvent = __webpack_require__(/*! ./SyntheticClipboardEvent */ 148);
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 53);
	var SyntheticFocusEvent = __webpack_require__(/*! ./SyntheticFocusEvent */ 149);
	var SyntheticKeyboardEvent = __webpack_require__(/*! ./SyntheticKeyboardEvent */ 150);
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 69);
	var SyntheticDragEvent = __webpack_require__(/*! ./SyntheticDragEvent */ 153);
	var SyntheticTouchEvent = __webpack_require__(/*! ./SyntheticTouchEvent */ 154);
	var SyntheticTransitionEvent = __webpack_require__(/*! ./SyntheticTransitionEvent */ 155);
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 70);
	var SyntheticWheelEvent = __webpack_require__(/*! ./SyntheticWheelEvent */ 156);
	
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 12);
	var getEventCharCode = __webpack_require__(/*! ./getEventCharCode */ 151);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 27);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  animationEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationEnd: true }),
	      captured: keyOf({ onAnimationEndCapture: true })
	    }
	  },
	  animationIteration: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationIteration: true }),
	      captured: keyOf({ onAnimationIterationCapture: true })
	    }
	  },
	  animationStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationStart: true }),
	      captured: keyOf({ onAnimationStartCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  invalid: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInvalid: true }),
	      captured: keyOf({ onInvalidCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  transitionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTransitionEnd: true }),
	      captured: keyOf({ onTransitionEndCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};
	
	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topAnimationEnd: eventTypes.animationEnd,
	  topAnimationIteration: eventTypes.animationIteration,
	  topAnimationStart: eventTypes.animationStart,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topInvalid: eventTypes.invalid,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topTransitionEnd: eventTypes.transitionEnd,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};
	
	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}
	
	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topInvalid:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topAnimationEnd:
	      case topLevelTypes.topAnimationIteration:
	      case topLevelTypes.topAnimationStart:
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case topLevelTypes.topTransitionEnd:
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var id = inst._rootNodeID;
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      var id = inst._rootNodeID;
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 147 */
/*!************************************************!*\
  !*** ./~/react/lib/SyntheticAnimationEvent.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticAnimationEvent
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 53);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
	
	module.exports = SyntheticAnimationEvent;

/***/ },
/* 148 */
/*!************************************************!*\
  !*** ./~/react/lib/SyntheticClipboardEvent.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 53);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ },
/* 149 */
/*!********************************************!*\
  !*** ./~/react/lib/SyntheticFocusEvent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 70);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ },
/* 150 */
/*!***********************************************!*\
  !*** ./~/react/lib/SyntheticKeyboardEvent.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 70);
	
	var getEventCharCode = __webpack_require__(/*! ./getEventCharCode */ 151);
	var getEventKey = __webpack_require__(/*! ./getEventKey */ 152);
	var getEventModifierState = __webpack_require__(/*! ./getEventModifierState */ 72);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 151 */
/*!*****************************************!*\
  !*** ./~/react/lib/getEventCharCode.js ***!
  \*****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ },
/* 152 */
/*!************************************!*\
  !*** ./~/react/lib/getEventKey.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(/*! ./getEventCharCode */ 151);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ },
/* 153 */
/*!*******************************************!*\
  !*** ./~/react/lib/SyntheticDragEvent.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 69);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ },
/* 154 */
/*!********************************************!*\
  !*** ./~/react/lib/SyntheticTouchEvent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 70);
	
	var getEventModifierState = __webpack_require__(/*! ./getEventModifierState */ 72);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ },
/* 155 */
/*!*************************************************!*\
  !*** ./~/react/lib/SyntheticTransitionEvent.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTransitionEvent
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 53);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
	
	module.exports = SyntheticTransitionEvent;

/***/ },
/* 156 */
/*!********************************************!*\
  !*** ./~/react/lib/SyntheticWheelEvent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 69);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ },
/* 157 */
/*!*****************************************!*\
  !*** ./~/react/lib/ReactDefaultPerf.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 37);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactDefaultPerfAnalysis = __webpack_require__(/*! ./ReactDefaultPerfAnalysis */ 158);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 159);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	
	var performanceNow = __webpack_require__(/*! fbjs/lib/performanceNow */ 164);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}
	
	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}
	
	// Composite/text components don't have any built-in ID: we have to make our own
	var compositeIDMap;
	var compositeIDCounter = 17000;
	function getIDOfComposite(inst) {
	  if (!compositeIDMap) {
	    compositeIDMap = new WeakMap();
	  }
	  if (compositeIDMap.has(inst)) {
	    return compositeIDMap.get(inst);
	  } else {
	    var id = compositeIDCounter++;
	    compositeIDMap.set(inst, id);
	    return id;
	  }
	}
	
	function getID(inst) {
	  if (inst.hasOwnProperty('_rootNodeID')) {
	    return inst._rootNodeID;
	  } else {
	    return getIDOfComposite(inst);
	  }
	}
	
	function stripComplexValues(key, value) {
	  if (typeof value !== 'object' || Array.isArray(value) || value == null) {
	    return value;
	  }
	  var prototype = Object.getPrototypeOf(value);
	  if (!prototype || prototype === Object.prototype) {
	    return value;
	  }
	  return '<not serializable>';
	}
	
	// This implementation of ReactPerf is going away some time mid 15.x.
	// While we plan to keep most of the API, the actual format of measurements
	// will change dramatically. To signal this, we wrap them into an opaque-ish
	// object to discourage reaching into it until the API stabilizes.
	function wrapLegacyMeasurements(measurements) {
	  return { __unstable_this_format_will_change: measurements };
	}
	function unwrapLegacyMeasurements(measurements) {
	  return measurements && measurements.__unstable_this_format_will_change || measurements;
	}
	
	var warnedAboutPrintDOM = false;
	var warnedAboutGetMeasurementsSummaryMap = false;
	
	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _compositeStack: [],
	  _injected: false,
	
	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }
	
	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },
	
	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },
	
	  getLastMeasurements: function () {
	    return wrapLegacyMeasurements(ReactDefaultPerf._allMeasurements);
	  },
	
	  printExclusive: function (measurements) {
	    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },
	
	  printInclusive: function (measurements) {
	    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  getMeasurementsSummaryMap: function (measurements) {
	    process.env.NODE_ENV !== 'production' ? warning(warnedAboutGetMeasurementsSummaryMap, '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + '`ReactPerf.getWasted(...)` instead.') : void 0;
	    warnedAboutGetMeasurementsSummaryMap = true;
	    return ReactDefaultPerf.getWasted(measurements);
	  },
	
	  getWasted: function (measurements) {
	    measurements = unwrapLegacyMeasurements(measurements);
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },
	
	  printWasted: function (measurements) {
	    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
	    console.table(ReactDefaultPerf.getWasted(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  printDOM: function (measurements) {
	    process.env.NODE_ENV !== 'production' ? warning(warnedAboutPrintDOM, '`ReactPerf.printDOM(...)` is deprecated. Use ' + '`ReactPerf.printOperations(...)` instead.') : void 0;
	    warnedAboutPrintDOM = true;
	    return ReactDefaultPerf.printOperations(measurements);
	  },
	
	  printOperations: function (measurements) {
	    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args, stripComplexValues);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
	    var writes = entry.writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },
	
	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      var totalTime;
	      var rv;
	      var start;
	
	      var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
	
	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push(entry = {
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          hierarchy: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        entry.totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations' || moduleName === 'ReactComponentBrowserEnvironment') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (fnName === '_mountImageIntoNode') {
	          ReactDefaultPerf._recordWrite('', fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[1].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.content !== null) {
	              writeArgs.content = update.content;
	            }
	            ReactDefaultPerf._recordWrite(args[0]._rootNodeID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (moduleName === 'EventPluginHub') {
	            id = id._rootNodeID;
	          } else if (fnName === 'replaceNodeWithMarkup') {
	            // Old node is already unmounted; can't get its instance
	            id = ReactDOMComponentTree.getInstanceFromNode(args[1].node)._rootNodeID;
	          } else if (fnName === 'replaceDelimitedText') {
	            id = getID(ReactDOMComponentTree.getInstanceFromNode(args[0]));
	          } else if (typeof id === 'object') {
	            id = getID(ReactDOMComponentTree.getInstanceFromNode(args[0]));
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {
	
	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }
	
	        var rootNodeID = getIDOfComposite(this);
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';
	
	        var mountStack = ReactDefaultPerf._mountStack;
	
	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }
	
	        ReactDefaultPerf._compositeStack.push(rootNodeID);
	
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        ReactDefaultPerf._compositeStack.pop();
	
	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }
	
	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };
	
	        return rv;
	      } else if ((moduleName === 'ReactDOMComponent' || moduleName === 'ReactDOMTextComponent') && (fnName === 'mountComponent' || fnName === 'receiveComponent')) {
	
	        rv = func.apply(this, args);
	        entry.hierarchy[getID(this)] = ReactDefaultPerf._compositeStack.slice();
	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};
	
	module.exports = ReactDefaultPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 158 */
/*!*************************************************!*\
  !*** ./~/react/lib/ReactDefaultPerfAnalysis.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */
	
	'use strict';
	
	// Don't try to save users less than 1.2ms (a number I made up)
	
	var _assign = __webpack_require__(/*! object-assign */ 5);
	
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'replaceDelimitedText': 'replace'
	};
	
	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}
	
	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}
	
	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = _assign({}, measurement.exclusive, measurement.inclusive);
	
	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;
	
	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });
	
	  return arr;
	}
	
	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = _assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;
	
	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }
	
	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }
	
	      var displayName = measurement.displayNames[id];
	
	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;
	
	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };
	
	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });
	
	  return arr;
	}
	
	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var writes = measurement.writes;
	  var hierarchy = measurement.hierarchy;
	  var dirtyComposites = {};
	  Object.keys(writes).forEach(function (id) {
	    writes[id].forEach(function (write) {
	      // Root mounting (innerHTML set) is recorded with an ID of ''
	      if (id !== '' && hierarchy.hasOwnProperty(id)) {
	        hierarchy[id].forEach(function (c) {
	          return dirtyComposites[c] = true;
	        });
	      }
	    });
	  });
	  var allIDs = _assign({}, measurement.exclusive, measurement.inclusive);
	
	  for (var id in allIDs) {
	    var isDirty = false;
	    // See if any of the DOM operations applied to this component's subtree.
	    if (dirtyComposites[id]) {
	      isDirty = true;
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}
	
	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};
	
	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 159 */
/*!***********************************!*\
  !*** ./~/react/lib/ReactMount.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(/*! ./DOMLazyTree */ 76);
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 37);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 104);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 10);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactDOMContainerInfo = __webpack_require__(/*! ./ReactDOMContainerInfo */ 160);
	var ReactDOMFeatureFlags = __webpack_require__(/*! ./ReactDOMFeatureFlags */ 161);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 9);
	var ReactFeatureFlags = __webpack_require__(/*! ./ReactFeatureFlags */ 58);
	var ReactInstrumentation = __webpack_require__(/*! ./ReactInstrumentation */ 19);
	var ReactMarkupChecksum = __webpack_require__(/*! ./ReactMarkupChecksum */ 162);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 59);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 60);
	var ReactUpdateQueue = __webpack_require__(/*! ./ReactUpdateQueue */ 121);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 56);
	
	var emptyObject = __webpack_require__(/*! fbjs/lib/emptyObject */ 22);
	var instantiateReactComponent = __webpack_require__(/*! ./instantiateReactComponent */ 117);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var setInnerHTML = __webpack_require__(/*! ./setInnerHTML */ 80);
	var shouldUpdateReactComponent = __webpack_require__(/*! ./shouldUpdateReactComponent */ 122);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var instancesByReactRootID = {};
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }
	
	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context);
	
	  if (markerName) {
	    console.timeEnd(markerName);
	  }
	
	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  ReactReconciler.unmountComponent(instance, safely);
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._nativeParent);
	  }
	}
	
	function getNativeRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevNativeInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevNativeInstance && !prevNativeInstance._nativeParent ? prevNativeInstance : null;
	}
	
	function getTopLevelWrapperInContainer(container) {
	  var root = getNativeRootInstanceInContainer(container);
	  return root ? root._nativeContainerInfo._topLevelWrapper : null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    return prevComponent;
	  },
	
	  /**
	   * Render a new component into the DOM. Hooked by devtools!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : void 0;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
	
	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;
	
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onMountRootComponent(componentInstance);
	    }
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : void 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	
	    var nextWrappedElement = ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : void 0;
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }
	
	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },
	
	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : void 0;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : void 0;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : void 0;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	  }
	};
	
	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 160 */
/*!**********************************************!*\
  !*** ./~/react/lib/ReactDOMContainerInfo.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMContainerInfo
	 */
	
	'use strict';
	
	var validateDOMNesting = __webpack_require__(/*! ./validateDOMNesting */ 127);
	
	var DOC_NODE_TYPE = 9;
	
	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}
	
	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 161 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactDOMFeatureFlags.js ***!
  \*********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: true
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 162 */
/*!********************************************!*\
  !*** ./~/react/lib/ReactMarkupChecksum.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(/*! ./adler32 */ 163);
	
	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 163 */
/*!********************************!*\
  !*** ./~/react/lib/adler32.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 164 */
/*!**************************************!*\
  !*** ./~/fbjs/lib/performanceNow.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var performance = __webpack_require__(/*! ./performance */ 165);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 165 */
/*!***********************************!*\
  !*** ./~/fbjs/lib/performance.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 49);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 166 */
/*!************************************!*\
  !*** ./~/react/lib/findDOMNode.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 10);
	var ReactDOMComponentTree = __webpack_require__(/*! ./ReactDOMComponentTree */ 36);
	var ReactInstanceMap = __webpack_require__(/*! ./ReactInstanceMap */ 119);
	
	var getNativeComponentFromComposite = __webpack_require__(/*! ./getNativeComponentFromComposite */ 167);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 8);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 11);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	
	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getNativeComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }
	
	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : void 0;
	  }
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 167 */
/*!********************************************************!*\
  !*** ./~/react/lib/getNativeComponentFromComposite.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNativeComponentFromComposite
	 */
	
	'use strict';
	
	var ReactNodeTypes = __webpack_require__(/*! ./ReactNodeTypes */ 120);
	
	function getNativeComponentFromComposite(inst) {
	  var type;
	
	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }
	
	  if (type === ReactNodeTypes.NATIVE) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}
	
	module.exports = getNativeComponentFromComposite;

/***/ },
/* 168 */
/*!***************************************************!*\
  !*** ./~/react/lib/renderSubtreeIntoContainer.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/
	
	'use strict';
	
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 159);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 169 */
/*!**********************************************!*\
  !*** ./~/react-jsonschema-form/lib/index.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Form = __webpack_require__(/*! ./components/Form */ 170);
	
	var _Form2 = _interopRequireDefault(_Form);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _Form2.default;

/***/ },
/* 170 */
/*!********************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/Form.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _SchemaField2 = __webpack_require__(/*! ./fields/SchemaField */ 171);
	
	var _SchemaField3 = _interopRequireDefault(_SchemaField2);
	
	var _TitleField2 = __webpack_require__(/*! ./fields/TitleField */ 180);
	
	var _TitleField3 = _interopRequireDefault(_TitleField2);
	
	var _ErrorList = __webpack_require__(/*! ./ErrorList */ 204);
	
	var _ErrorList2 = _interopRequireDefault(_ErrorList);
	
	var _utils = __webpack_require__(/*! ../utils */ 172);
	
	var _validate = __webpack_require__(/*! ../validate */ 205);
	
	var _validate2 = _interopRequireDefault(_validate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Form = function (_Component) {
	  _inherits(Form, _Component);
	
	  function Form(props) {
	    _classCallCheck(this, Form);
	
	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Form).call(this, props));
	
	    _this.onChange = function (formData) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? { validate: false } : arguments[1];
	
	      var mustValidate = _this.props.liveValidate || options.validate;
	      var state = { status: "editing", formData: formData };
	      if (mustValidate) {
	        var _this$validate = _this.validate(formData);
	
	        var errors = _this$validate.errors;
	        var errorSchema = _this$validate.errorSchema;
	
	        state = _extends({}, state, { errors: errors, errorSchema: errorSchema });
	      }
	      (0, _utils.setState)(_this, state, function () {
	        if (_this.props.onChange) {
	          _this.props.onChange(_this.state);
	        }
	      });
	    };
	
	    _this.onSubmit = function (event) {
	      event.preventDefault();
	      _this.setState({ status: "submitted" });
	
	      var _this$validate2 = _this.validate(_this.state.formData);
	
	      var errors = _this$validate2.errors;
	      var errorSchema = _this$validate2.errorSchema;
	
	      if (Object.keys(errors).length > 0) {
	        (0, _utils.setState)(_this, { errors: errors, errorSchema: errorSchema }, function () {
	          if (_this.props.onError) {
	            _this.props.onError(errors);
	          } else {
	            console.error("Form validation failed", errors);
	          }
	        });
	        return;
	      } else if (_this.props.onSubmit) {
	        _this.props.onSubmit(_this.state);
	      }
	      _this.setState({ status: "initial", errors: [], errorSchema: {} });
	    };
	
	    _this.state = _this.getStateFromProps(props);
	    return _this;
	  }
	
	  _createClass(Form, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState(this.getStateFromProps(nextProps));
	    }
	  }, {
	    key: "getStateFromProps",
	    value: function getStateFromProps(props) {
	      var state = this.state || {};
	      var schema = "schema" in props ? props.schema : this.props.schema;
	      var uiSchema = "uiSchema" in props ? props.uiSchema : this.props.uiSchema;
	      var edit = typeof props.formData !== "undefined";
	      var liveValidate = props.liveValidate || this.props.liveValidate;
	      var mustValidate = edit && liveValidate;
	      var definitions = schema.definitions;
	
	      var formData = (0, _utils.getDefaultFormState)(schema, props.formData, definitions);
	
	      var _ref = mustValidate ? this.validate(formData, schema) : {
	        errors: state.errors || [],
	        errorSchema: state.errorSchema || {}
	      };
	
	      var errors = _ref.errors;
	      var errorSchema = _ref.errorSchema;
	
	      var idSchema = (0, _utils.toIdSchema)(schema, uiSchema["ui:rootFieldId"], definitions);
	      return { status: "initial", formData: formData, edit: edit, errors: errors, errorSchema: errorSchema, idSchema: idSchema };
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _utils.shouldRender)(this, nextProps, nextState);
	    }
	  }, {
	    key: "validate",
	    value: function validate(formData, schema) {
	      var validate = this.props.validate;
	
	      return (0, _validate2.default)(formData, schema || this.props.schema, validate);
	    }
	  }, {
	    key: "renderErrors",
	    value: function renderErrors() {
	      var _state = this.state;
	      var status = _state.status;
	      var errors = _state.errors;
	
	      if (status !== "editing" && errors.length) {
	        return _react2.default.createElement(_ErrorList2.default, { errors: errors });
	      }
	      return null;
	    }
	  }, {
	    key: "getRegistry",
	    value: function getRegistry() {
	      // For BC, accept passed SchemaField and TitleField props and pass them to
	      // the "fields" registry one.
	      var _SchemaField = this.props.SchemaField || _SchemaField3.default;
	      var _TitleField = this.props.TitleField || _TitleField3.default;
	      var fields = Object.assign({
	        SchemaField: _SchemaField,
	        TitleField: _TitleField
	      }, this.props.fields);
	      return {
	        fields: fields,
	        widgets: this.props.widgets || {},
	        definitions: this.props.schema.definitions || {}
	      };
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _props = this.props;
	      var children = _props.children;
	      var schema = _props.schema;
	      var uiSchema = _props.uiSchema;
	      var safeRenderCompletion = _props.safeRenderCompletion;
	      var _state2 = this.state;
	      var formData = _state2.formData;
	      var errorSchema = _state2.errorSchema;
	      var idSchema = _state2.idSchema;
	
	      var registry = this.getRegistry();
	      var _SchemaField = registry.fields.SchemaField;
	      return _react2.default.createElement(
	        "form",
	        { className: "rjsf", onSubmit: this.onSubmit },
	        this.renderErrors(),
	        _react2.default.createElement(_SchemaField, {
	          schema: schema,
	          uiSchema: uiSchema,
	          errorSchema: errorSchema,
	          idSchema: idSchema,
	          formData: formData,
	          onChange: this.onChange,
	          registry: registry,
	          safeRenderCompletion: safeRenderCompletion }),
	        children ? children : _react2.default.createElement(
	          "p",
	          null,
	          _react2.default.createElement(
	            "button",
	            { type: "submit", className: "btn btn-info" },
	            "Submit"
	          )
	        )
	      );
	    }
	  }]);
	
	  return Form;
	}(_react.Component);
	
	Form.defaultProps = {
	  uiSchema: {},
	  liveValidate: false,
	  safeRenderCompletion: false
	};
	exports.default = Form;
	
	
	if (process.env.NODE_ENV !== "production") {
	  Form.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    uiSchema: _react.PropTypes.object,
	    formData: _react.PropTypes.any,
	    widgets: _react.PropTypes.objectOf(_react.PropTypes.func),
	    fields: _react.PropTypes.objectOf(_react.PropTypes.func),
	    onChange: _react.PropTypes.func,
	    onError: _react.PropTypes.func,
	    onSubmit: _react.PropTypes.func,
	    liveValidate: _react.PropTypes.bool,
	    safeRenderCompletion: _react.PropTypes.bool
	  };
	}
	
	exports.default = Form;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 171 */
/*!**********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/fields/SchemaField.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _utils = __webpack_require__(/*! ../../utils */ 172);
	
	var _ArrayField = __webpack_require__(/*! ./ArrayField */ 197);
	
	var _ArrayField2 = _interopRequireDefault(_ArrayField);
	
	var _BooleanField = __webpack_require__(/*! ./BooleanField */ 198);
	
	var _BooleanField2 = _interopRequireDefault(_BooleanField);
	
	var _NumberField = __webpack_require__(/*! ./NumberField */ 200);
	
	var _NumberField2 = _interopRequireDefault(_NumberField);
	
	var _ObjectField = __webpack_require__(/*! ./ObjectField */ 202);
	
	var _ObjectField2 = _interopRequireDefault(_ObjectField);
	
	var _StringField = __webpack_require__(/*! ./StringField */ 201);
	
	var _StringField2 = _interopRequireDefault(_StringField);
	
	var _UnsupportedField = __webpack_require__(/*! ./UnsupportedField */ 203);
	
	var _UnsupportedField2 = _interopRequireDefault(_UnsupportedField);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var REQUIRED_FIELD_SYMBOL = "*";
	var COMPONENT_TYPES = {
	  "array": _ArrayField2.default,
	  "boolean": _BooleanField2.default,
	  "integer": _NumberField2.default,
	  "number": _NumberField2.default,
	  "object": _ObjectField2.default,
	  "string": _StringField2.default
	};
	
	function getFieldComponent(schema, uiSchema, fields) {
	  var field = uiSchema["ui:field"];
	  if (typeof field === "function") {
	    return field;
	  }
	  if (typeof field === "string" && field in fields) {
	    return fields[field];
	  }
	  return COMPONENT_TYPES[schema.type] || _UnsupportedField2.default;
	}
	
	function getLabel(label, required, id) {
	  if (!label) {
	    return null;
	  }
	  return _react2.default.createElement(
	    "label",
	    { className: "control-label", htmlFor: id },
	    required ? label + REQUIRED_FIELD_SYMBOL : label
	  );
	}
	
	function ErrorList(_ref) {
	  var errors = _ref.errors;
	
	  return _react2.default.createElement(
	    "div",
	    null,
	    _react2.default.createElement("p", null),
	    _react2.default.createElement(
	      "ul",
	      { className: "error-detail bs-callout bs-callout-info" },
	      (errors || []).map(function (error, index) {
	        return _react2.default.createElement(
	          "li",
	          { className: "text-danger", key: index },
	          error
	        );
	      })
	    )
	  );
	}
	
	function Wrapper(_ref2) {
	  var type = _ref2.type;
	  var classNames = _ref2.classNames;
	  var errorSchema = _ref2.errorSchema;
	  var label = _ref2.label;
	  var hidden = _ref2.hidden;
	  var help = _ref2.help;
	  var required = _ref2.required;
	  var displayLabel = _ref2.displayLabel;
	  var id = _ref2.id;
	  var children = _ref2.children;
	
	  if (hidden) {
	    return children;
	  }
	  var errors = errorSchema.__errors;
	  var isError = errors && errors.length > 0;
	  var classList = ["form-group", "field", "field-" + type, isError ? "field-error has-error" : "", classNames].join(" ").trim();
	  return _react2.default.createElement(
	    "div",
	    { className: classList },
	    displayLabel && label ? getLabel(label, required, id) : null,
	    children,
	    isError ? _react2.default.createElement(ErrorList, { errors: errors }) : _react2.default.createElement("div", null),
	    help ? _react2.default.createElement(
	      "p",
	      { className: "help-block" },
	      help
	    ) : null
	  );
	}
	
	if (process.env.NODE_ENV !== "production") {
	  Wrapper.propTypes = {
	    type: _react.PropTypes.string.isRequired,
	    id: _react.PropTypes.string,
	    classNames: _react2.default.PropTypes.string,
	    label: _react.PropTypes.string,
	    hidden: _react.PropTypes.bool,
	    help: _react.PropTypes.string,
	    required: _react.PropTypes.bool,
	    displayLabel: _react.PropTypes.bool,
	    children: _react2.default.PropTypes.node.isRequired
	  };
	}
	
	Wrapper.defaultProps = {
	  classNames: "",
	  errorSchema: { errors: [] },
	  hidden: false,
	  required: false,
	  displayLabel: true
	};
	
	function SchemaField(props) {
	  var uiSchema = props.uiSchema;
	  var errorSchema = props.errorSchema;
	  var idSchema = props.idSchema;
	  var name = props.name;
	  var required = props.required;
	  var registry = props.registry;
	  var definitions = registry.definitions;
	  var fields = registry.fields;
	
	  var schema = (0, _utils.retrieveSchema)(props.schema, definitions);
	  var FieldComponent = getFieldComponent(schema, uiSchema, fields);
	  var disabled = Boolean(props.disabled || uiSchema["ui:disabled"]);
	  var readonly = Boolean(props.readonly || uiSchema["ui:readonly"]);
	
	  if (Object.keys(schema).length === 0) {
	    return _react2.default.createElement("div", null);
	  }
	
	  var displayLabel = true;
	  if (schema.type === "array") {
	    displayLabel = (0, _utils.isMultiSelect)(schema);
	  }
	  if (schema.type === "object") {
	    displayLabel = false;
	  }
	  if (schema.type === "boolean" && !uiSchema["ui:widget"]) {
	    displayLabel = false;
	  }
	
	  return _react2.default.createElement(
	    Wrapper,
	    {
	      label: props.schema.title || schema.title || name,
	      errorSchema: errorSchema,
	      hidden: uiSchema["ui:widget"] === "hidden",
	      help: uiSchema["ui:help"],
	      required: required,
	      type: schema.type,
	      displayLabel: displayLabel,
	      id: idSchema.id,
	      classNames: uiSchema.classNames },
	    _react2.default.createElement(FieldComponent, _extends({}, props, {
	      schema: schema,
	      disabled: disabled,
	      readonly: readonly }))
	  );
	}
	
	SchemaField.defaultProps = {
	  uiSchema: {},
	  errorSchema: {},
	  idSchema: {},
	  registry: (0, _utils.getDefaultRegistry)(),
	  disabled: false,
	  readonly: false
	};
	
	if (process.env.NODE_ENV !== "production") {
	  SchemaField.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    uiSchema: _react.PropTypes.object,
	    idSchema: _react.PropTypes.object,
	    formData: _react.PropTypes.any,
	    errorSchema: _react.PropTypes.object,
	    registry: _react.PropTypes.shape({
	      widgets: _react.PropTypes.objectOf(_react.PropTypes.func).isRequired,
	      fields: _react.PropTypes.objectOf(_react.PropTypes.func).isRequired,
	      definitions: _react.PropTypes.object.isRequired
	    })
	  };
	}
	
	exports.default = SchemaField;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 172 */
/*!**********************************************!*\
  !*** ./~/react-jsonschema-form/lib/utils.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	exports.getDefaultRegistry = getDefaultRegistry;
	exports.defaultFieldValue = defaultFieldValue;
	exports.getAlternativeWidget = getAlternativeWidget;
	exports.getDefaultFormState = getDefaultFormState;
	exports.isObject = isObject;
	exports.mergeObjects = mergeObjects;
	exports.asNumber = asNumber;
	exports.orderProperties = orderProperties;
	exports.isMultiSelect = isMultiSelect;
	exports.isFixedItems = isFixedItems;
	exports.allowAdditionalItems = allowAdditionalItems;
	exports.optionsList = optionsList;
	exports.retrieveSchema = retrieveSchema;
	exports.shouldRender = shouldRender;
	exports.toIdSchema = toIdSchema;
	exports.parseDateString = parseDateString;
	exports.toDateString = toDateString;
	exports.pad = pad;
	exports.setState = setState;
	
	__webpack_require__(/*! setimmediate */ 174);
	
	var _deeper = __webpack_require__(/*! deeper */ 175);
	
	var _deeper2 = _interopRequireDefault(_deeper);
	
	var _TitleField = __webpack_require__(/*! ./components/fields/TitleField */ 180);
	
	var _TitleField2 = _interopRequireDefault(_TitleField);
	
	var _PasswordWidget = __webpack_require__(/*! ./components/widgets/PasswordWidget */ 181);
	
	var _PasswordWidget2 = _interopRequireDefault(_PasswordWidget);
	
	var _RadioWidget = __webpack_require__(/*! ./components/widgets/RadioWidget */ 183);
	
	var _RadioWidget2 = _interopRequireDefault(_RadioWidget);
	
	var _UpDownWidget = __webpack_require__(/*! ./components/widgets/UpDownWidget */ 184);
	
	var _UpDownWidget2 = _interopRequireDefault(_UpDownWidget);
	
	var _RangeWidget = __webpack_require__(/*! ./components/widgets/RangeWidget */ 185);
	
	var _RangeWidget2 = _interopRequireDefault(_RangeWidget);
	
	var _SelectWidget = __webpack_require__(/*! ./components/widgets/SelectWidget */ 186);
	
	var _SelectWidget2 = _interopRequireDefault(_SelectWidget);
	
	var _TextWidget = __webpack_require__(/*! ./components/widgets/TextWidget */ 187);
	
	var _TextWidget2 = _interopRequireDefault(_TextWidget);
	
	var _DateWidget = __webpack_require__(/*! ./components/widgets/DateWidget */ 188);
	
	var _DateWidget2 = _interopRequireDefault(_DateWidget);
	
	var _DateTimeWidget = __webpack_require__(/*! ./components/widgets/DateTimeWidget */ 189);
	
	var _DateTimeWidget2 = _interopRequireDefault(_DateTimeWidget);
	
	var _AltDateWidget = __webpack_require__(/*! ./components/widgets/AltDateWidget */ 190);
	
	var _AltDateWidget2 = _interopRequireDefault(_AltDateWidget);
	
	var _AltDateTimeWidget = __webpack_require__(/*! ./components/widgets/AltDateTimeWidget */ 191);
	
	var _AltDateTimeWidget2 = _interopRequireDefault(_AltDateTimeWidget);
	
	var _EmailWidget = __webpack_require__(/*! ./components/widgets/EmailWidget */ 192);
	
	var _EmailWidget2 = _interopRequireDefault(_EmailWidget);
	
	var _URLWidget = __webpack_require__(/*! ./components/widgets/URLWidget */ 193);
	
	var _URLWidget2 = _interopRequireDefault(_URLWidget);
	
	var _TextareaWidget = __webpack_require__(/*! ./components/widgets/TextareaWidget */ 194);
	
	var _TextareaWidget2 = _interopRequireDefault(_TextareaWidget);
	
	var _HiddenWidget = __webpack_require__(/*! ./components/widgets/HiddenWidget */ 195);
	
	var _HiddenWidget2 = _interopRequireDefault(_HiddenWidget);
	
	var _ColorWidget = __webpack_require__(/*! ./components/widgets/ColorWidget */ 196);
	
	var _ColorWidget2 = _interopRequireDefault(_ColorWidget);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	var altWidgetMap = {
	  boolean: {
	    radio: _RadioWidget2.default,
	    select: _SelectWidget2.default,
	    hidden: _HiddenWidget2.default
	  },
	  string: {
	    password: _PasswordWidget2.default,
	    radio: _RadioWidget2.default,
	    select: _SelectWidget2.default,
	    textarea: _TextareaWidget2.default,
	    hidden: _HiddenWidget2.default,
	    date: _DateWidget2.default,
	    datetime: _DateTimeWidget2.default,
	    "alt-date": _AltDateWidget2.default,
	    "alt-datetime": _AltDateTimeWidget2.default,
	    color: _ColorWidget2.default
	  },
	  number: {
	    updown: _UpDownWidget2.default,
	    range: _RangeWidget2.default,
	    hidden: _HiddenWidget2.default
	  },
	  integer: {
	    updown: _UpDownWidget2.default,
	    range: _RangeWidget2.default,
	    hidden: _HiddenWidget2.default
	  }
	};
	
	var stringFormatWidgets = {
	  "date-time": _DateTimeWidget2.default,
	  "date": _DateWidget2.default,
	  "email": _EmailWidget2.default,
	  "hostname": _TextWidget2.default,
	  "ipv4": _TextWidget2.default,
	  "ipv6": _TextWidget2.default,
	  "uri": _URLWidget2.default
	};
	
	function getDefaultRegistry() {
	  return {
	    fields: {
	      // Prevent a bug where SchemaField is undefined when imported via Babel.
	      // This seems to have been introduced when upgrading React from 0.14 to to
	      // 15.0, which now seems to prevent cyclic references of exported
	      // components.
	      // Investigation hint: getDefaultRegistry is called from within
	      // SchemaField itself.
	      SchemaField: __webpack_require__(/*! ./components/fields/SchemaField */ 171).default,
	      TitleField: _TitleField2.default
	    },
	    widgets: {},
	    definitions: {}
	  };
	}
	
	function defaultFieldValue(formData, schema) {
	  return typeof formData === "undefined" ? schema.default : formData;
	}
	
	function getAlternativeWidget(schema, widget) {
	  var registeredWidgets = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	  var type = schema.type;
	  var format = schema.format;
	
	  if (typeof widget === "function") {
	    return widget;
	  }
	  if (typeof widget !== "string") {
	    throw new Error("Unsupported widget definition: " + (typeof widget === "undefined" ? "undefined" : _typeof(widget)));
	  }
	  if (widget in registeredWidgets) {
	    return registeredWidgets[widget];
	  }
	  if (!altWidgetMap.hasOwnProperty(type)) {
	    throw new Error("No alternative widget for type " + type);
	  }
	  if (altWidgetMap[type].hasOwnProperty(widget)) {
	    return altWidgetMap[type][widget];
	  }
	  if (type === "string" && stringFormatWidgets.hasOwnProperty(format)) {
	    return stringFormatWidgets[format];
	  }
	  var info = type === "string" && format ? "/" + format : "";
	  throw new Error("No alternative widget \"" + widget + "\" for type " + type + info);
	}
	
	function computeDefaults(schema, parentDefaults) {
	  var definitions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	  // Compute the defaults recursively: give highest priority to deepest nodes.
	  var defaults = parentDefaults;
	  if (isObject(defaults) && isObject(schema.default)) {
	    // For object defaults, only override parent defaults that are defined in
	    // schema.default.
	    defaults = mergeObjects(defaults, schema.default);
	  } else if ("default" in schema) {
	    // Use schema defaults for this node.
	    defaults = schema.default;
	  } else if ("enum" in schema && Array.isArray(schema.enum)) {
	    // For enum with no defined default, select the first entry.
	    defaults = schema.enum[0];
	  } else if ("$ref" in schema) {
	    // Use referenced schema defaults for this node.
	    var refSchema = findSchemaDefinition(schema.$ref, definitions);
	    return computeDefaults(refSchema, defaults, definitions);
	  } else if (isFixedItems(schema)) {
	    defaults = schema.items.map(function (itemSchema) {
	      return computeDefaults(itemSchema, undefined, definitions);
	    });
	  }
	  // Not defaults defined for this node, fallback to generic typed ones.
	  if (typeof defaults === "undefined") {
	    defaults = schema.default;
	  }
	  // We need to recur for object schema inner default values.
	  if (schema.type === "object") {
	    return Object.keys(schema.properties).reduce(function (acc, key) {
	      // Compute the defaults for this node, with the parent defaults we might
	      // have from a previous run: defaults[key].
	      acc[key] = computeDefaults(schema.properties[key], (defaults || {})[key], definitions);
	      return acc;
	    }, {});
	  }
	  return defaults;
	}
	
	function getDefaultFormState(_schema, formData) {
	  var definitions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	  if (!isObject(_schema)) {
	    throw new Error("Invalid schema: " + _schema);
	  }
	  var schema = retrieveSchema(_schema, definitions);
	  var defaults = computeDefaults(schema, _schema.default, definitions);
	  if (typeof formData === "undefined") {
	    // No form data? Use schema defaults.
	    return defaults;
	  }
	  if (isObject(formData)) {
	    // Override schema defaults with form data.
	    return mergeObjects(defaults, formData);
	  }
	  return formData || defaults;
	}
	
	function isObject(thing) {
	  return (typeof thing === "undefined" ? "undefined" : _typeof(thing)) === "object" && thing !== null && !Array.isArray(thing);
	}
	
	function mergeObjects(obj1, obj2) {
	  var concatArrays = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
	
	  // Recursively merge deeply nested objects.
	  var acc = Object.assign({}, obj1); // Prevent mutation of source object.
	  return Object.keys(obj2).reduce(function (acc, key) {
	    var left = obj1[key],
	        right = obj2[key];
	    if (obj1.hasOwnProperty(key) && isObject(right)) {
	      acc[key] = mergeObjects(left, right, concatArrays);
	    } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {
	      acc[key] = left.concat(right);
	    } else {
	      acc[key] = right;
	    }
	    return acc;
	  }, acc);
	}
	
	function asNumber(value) {
	  if (/\.$/.test(value)) {
	    // "3." can't really be considered a number even if it parses in js. The
	    // user is most likely entering a float.
	    return value;
	  }
	  var n = Number(value);
	  var valid = typeof n === "number" && !Number.isNaN(n);
	  return valid ? n : value;
	}
	
	function orderProperties(properties, order) {
	  if (!Array.isArray(order)) {
	    return properties;
	  }
	  if (order.length !== properties.length) {
	    throw new Error("uiSchema order list length should match object properties length");
	  }
	  var fingerprint = function fingerprint(arr) {
	    return [].slice.call(arr).sort().toString();
	  };
	  if (fingerprint(order) !== fingerprint(properties)) {
	    throw new Error("uiSchema order list does not match object properties list");
	  }
	  return order;
	}
	
	function isMultiSelect(schema) {
	  return Array.isArray(schema.items.enum) && schema.uniqueItems;
	}
	
	function isFixedItems(schema) {
	  return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every(function (item) {
	    return isObject(item);
	  });
	}
	
	function allowAdditionalItems(schema) {
	  if (schema.additionalItems === true) {
	    console.warn("additionalItems=true is currently not supported");
	  }
	  return isObject(schema.additionalItems);
	}
	
	function optionsList(schema) {
	  return schema.enum.map(function (value, i) {
	    var label = schema.enumNames && schema.enumNames[i] || String(value);
	    return { label: label, value: value };
	  });
	}
	
	function findSchemaDefinition($ref) {
	  var definitions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  // Extract and use the referenced definition if we have it.
	  var match = /#\/definitions\/(.*)$/.exec($ref);
	  if (match && match[1] && definitions.hasOwnProperty(match[1])) {
	    return definitions[match[1]];
	  }
	  // No matching definition found, that's an error (bogus schema?)
	  throw new Error("Could not find a definition for " + $ref + ".");
	}
	
	function retrieveSchema(schema) {
	  var definitions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  // No $ref attribute found, returning the original schema.
	  if (!schema.hasOwnProperty("$ref")) {
	    return schema;
	  }
	  // Retrieve the referenced schema definition.
	  var $refSchema = findSchemaDefinition(schema.$ref, definitions);
	  // Drop the $ref property of the source schema.
	  var $ref = schema.$ref;
	
	  var localSchema = _objectWithoutProperties(schema, ["$ref"]); // eslint-disable-line no-unused-vars
	  // Update referenced schema definition with local schema properties.
	
	
	  return _extends({}, $refSchema, localSchema);
	}
	
	function shouldRender(comp, nextProps, nextState) {
	  return !(0, _deeper2.default)(comp.props, nextProps) || !(0, _deeper2.default)(comp.state, nextState);
	}
	
	function toIdSchema(schema, id, definitions) {
	  var idSchema = { id: id || "root" };
	  if ("$ref" in schema) {
	    var _schema = retrieveSchema(schema, definitions);
	    return toIdSchema(_schema, id, definitions);
	  }
	  if ("items" in schema) {
	    return toIdSchema(schema.items, id, definitions);
	  }
	  if (schema.type !== "object") {
	    return idSchema;
	  }
	  for (var name in schema.properties || {}) {
	    var field = schema.properties[name];
	    var fieldId = idSchema.id + "_" + name;
	    idSchema[name] = toIdSchema(field, fieldId, definitions);
	  }
	  return idSchema;
	}
	
	function parseDateString(dateString) {
	  var includeTime = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	  if (!dateString) {
	    return {
	      year: -1,
	      month: -1,
	      day: -1,
	      hour: includeTime ? -1 : 0,
	      minute: includeTime ? -1 : 0,
	      second: includeTime ? -1 : 0
	    };
	  }
	  var date = new Date(dateString);
	  if (Number.isNaN(date.getTime())) {
	    throw new Error("Unable to parse date " + dateString);
	  }
	  return {
	    year: date.getUTCFullYear(),
	    month: date.getUTCMonth() + 1, // oh you, javascript.
	    day: date.getUTCDate(),
	    hour: includeTime ? date.getUTCHours() : 0,
	    minute: includeTime ? date.getUTCMinutes() : 0,
	    second: includeTime ? date.getUTCSeconds() : 0
	  };
	}
	
	function toDateString(_ref) {
	  var year = _ref.year;
	  var month = _ref.month;
	  var day = _ref.day;
	  var _ref$hour = _ref.hour;
	  var hour = _ref$hour === undefined ? 0 : _ref$hour;
	  var _ref$minute = _ref.minute;
	  var minute = _ref$minute === undefined ? 0 : _ref$minute;
	  var _ref$second = _ref.second;
	  var second = _ref$second === undefined ? 0 : _ref$second;
	  var time = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	  var utcTime = Date.UTC(year, month - 1, day, hour, minute, second);
	  var datetime = new Date(utcTime).toJSON();
	  return time ? datetime : datetime.slice(0, 10);
	}
	
	function pad(num, size) {
	  var s = String(num);
	  while (s.length < size) {
	    s = "0" + s;
	  }
	  return s;
	}
	
	function setState(instance, state, callback) {
	  var safeRenderCompletion = instance.props.safeRenderCompletion;
	
	  if (safeRenderCompletion) {
	    instance.setState(state, callback);
	  } else {
	    instance.setState(state);
	    setImmediate(callback);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/timers-browserify/main.js */ 173).setImmediate))

/***/ },
/* 173 */
/*!*************************************!*\
  !*** ./~/timers-browserify/main.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(/*! process/browser.js */ 4).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/timers-browserify/main.js */ 173).setImmediate, __webpack_require__(/*! ./~/timers-browserify/main.js */ 173).clearImmediate))

/***/ },
/* 174 */
/*!****************************************!*\
  !*** ./~/setimmediate/setImmediate.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, clearImmediate, process) {(function (global, undefined) {
	    "use strict";
	
	    if (global.setImmediate) {
	        return;
	    }
	
	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var setImmediate;
	
	    function addFromSetImmediateArguments(args) {
	        tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);
	        return nextHandle++;
	    }
	
	    // This function accepts the same arguments as setImmediate, but
	    // returns a function that requires no arguments.
	    function partiallyApplied(handler) {
	        var args = [].slice.call(arguments, 1);
	        return function() {
	            if (typeof handler === "function") {
	                handler.apply(undefined, args);
	            } else {
	                (new Function("" + handler))();
	            }
	        };
	    }
	
	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(partiallyApplied(runIfPresent, handle), 0);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    task();
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }
	
	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }
	
	    function installNextTickImplementation() {
	        setImmediate = function() {
	            var handle = addFromSetImmediateArguments(arguments);
	            process.nextTick(partiallyApplied(runIfPresent, handle));
	            return handle;
	        };
	    }
	
	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }
	
	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	
	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	
	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }
	
	        setImmediate = function() {
	            var handle = addFromSetImmediateArguments(arguments);
	            global.postMessage(messagePrefix + handle, "*");
	            return handle;
	        };
	    }
	
	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };
	
	        setImmediate = function() {
	            var handle = addFromSetImmediateArguments(arguments);
	            channel.port2.postMessage(handle);
	            return handle;
	        };
	    }
	
	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        setImmediate = function() {
	            var handle = addFromSetImmediateArguments(arguments);
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	            return handle;
	        };
	    }
	
	    function installSetTimeoutImplementation() {
	        setImmediate = function() {
	            var handle = addFromSetImmediateArguments(arguments);
	            setTimeout(partiallyApplied(runIfPresent, handle), 0);
	            return handle;
	        };
	    }
	
	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
	
	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();
	
	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();
	
	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();
	
	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();
	
	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }
	
	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(/*! ./~/timers-browserify/main.js */ 173).clearImmediate, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 175 */
/*!***************************!*\
  !*** ./~/deeper/index.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'
	
	function isArguments (object) {
	  return Object.prototype.toString.call(object) === '[object Arguments]'
	}
	
	function deeper (a, b) {
	  return deeper_(a, b, [], [])
	}
	
	module.exports = deeper
	
	try {
	  deeper.fastEqual = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"buffertools\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).equals
	} catch (e) {
	  // whoops, nobody told buffertools it wasn't installed
	}
	
	/**
	 * This is a Node-specific version of a structural equality test, modeled on
	 * bits and pieces of loads of other implementations of this algorithm, most
	 * notably the one in the Node.js source and the Underscore library. It doesn't
	 * throw and handles cycles.
	 *
	 * Everybody who writes one of these functions puts the documentation
	 * inline, which makes it incredibly hard to follow. Here's what this version
	 * of the algorithm does, in order:
	 *
	 * 1. `===` only tests objects and functions by reference. `null` is an object.
	 *    Any pairs of identical entities failing this test are therefore objects
	 *    (including `null`), which need to be recursed into and compared attribute by
	 *    attribute.
	 * 2. Since the only entities to get to this test must be objects, if `a` or `b`
	 *    is not an object, they're clearly not the same. All unfiltered `a` and `b`
	 *    getting past this are objects (including `null`).
	 * 3. `null` is an object, but `null === null.` All unfiltered `a` and `b` are
	 *    non-null `Objects`.
	 * 4. Buffers need to be special-cased because they live partially on the wrong
	 *    side of the C++ / JavaScript barrier. Still, calling this on structures
	 *    that can contain Buffers is a bad idea, because they can contain
	 *    multiple megabytes of data and comparing them byte-by-byte is hella
	 *    expensive.
	 * 5. It's much faster to compare dates by numeric value (`.getTime()`) than by
	 *    lexical value.
	 * 6. Compare `RegExps` by their components, not the objects themselves.
	 * 7. Treat argumens objects like arrays. The parts of an arguments list most
	 *    people care about are the arguments themselves, not `callee`, which you
	 *    shouldn't be looking at anyway.
	 * 8. Objects are more complex:
	 *     1. Ensure that `a` and `b` are on the same constructor chain.
	 *     2. Ensure that `a` and `b` have the same number of own properties (which is
	 *        what `Object.keys()` returns).
	 *     3. Ensure that cyclical references don't blow up the stack.
	 *     4. Ensure that all the key names match (faster).
	 *     5. Ensure that all of the associated values match, recursively (slower).
	 *
	 * (somewhat untested) assumptions:
	 *
	 * - Functions are only considered identical if they unify to the same
	 *   reference. To anything else is to invite the wrath of the halting problem.
	 * - V8 is smart enough to optimize treating an Array like any other kind of
	 *   object.
	 * - Users of this function are cool with mutually recursive data structures
	 *   that are otherwise identical being treated as the same.
	 */
	function deeper_ (a, b, ca, cb) {
	  if (a === b) {
	    return true
	  } else if (typeof a !== 'object' || typeof b !== 'object') {
	    return false
	  } else if (a === null || b === null) {
	    return false
	  } else if (Buffer.isBuffer(a) && Buffer.isBuffer(b)) {
	    if (a.equals) {
	      return a.equals(b)
	    } else if (deeper.fastEqual) {
	      return deeper.fastEqual.call(a, b)
	    } else {
	      if (a.length !== b.length) return false
	
	      for (var i = 0; i < a.length; i++) if (a[i] !== b[i]) return false
	
	      return true
	    }
	  } else if (a instanceof Date && b instanceof Date) {
	    return a.getTime() === b.getTime()
	  } else if (a instanceof RegExp && b instanceof RegExp) {
	    return a.source === b.source &&
	    a.global === b.global &&
	    a.multiline === b.multiline &&
	    a.lastIndex === b.lastIndex &&
	    a.ignoreCase === b.ignoreCase
	  } else if (isArguments(a) || isArguments(b)) {
	    if (!(isArguments(a) && isArguments(b))) return false
	
	    var slice = Array.prototype.slice
	    return deeper_(slice.call(a), slice.call(b), ca, cb)
	  } else {
	    if (a.constructor !== b.constructor) return false
	
	    var ka = Object.keys(a)
	    var kb = Object.keys(b)
	    // don't bother with stack acrobatics if there's nothing there
	    if (ka.length === 0 && kb.length === 0) return true
	    if (ka.length !== kb.length) return false
	
	    var cal = ca.length
	    while (cal--) if (ca[cal] === a) return cb[cal] === b
	    ca.push(a); cb.push(b)
	
	    ka.sort(); kb.sort()
	    for (var j = ka.length - 1; j >= 0; j--) if (ka[j] !== kb[j]) return false
	
	    var key
	    for (var k = ka.length - 1; k >= 0; k--) {
	      key = ka[k]
	      if (!deeper_(a[key], b[key], ca, cb)) return false
	    }
	
	    ca.pop(); cb.pop()
	
	    return true
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/buffer/index.js */ 176).Buffer))

/***/ },
/* 176 */
/*!***************************!*\
  !*** ./~/buffer/index.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(/*! base64-js */ 177)
	var ieee754 = __webpack_require__(/*! ieee754 */ 178)
	var isArray = __webpack_require__(/*! isarray */ 179)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation
	
	var rootParent = {}
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }
	
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    this.length = 0
	    this.parent = undefined
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }
	
	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }
	
	  // Unusual.
	  return fromObject(this, arg)
	}
	
	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'
	
	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)
	
	  that.write(string, encoding)
	  return that
	}
	
	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)
	
	  if (isArray(object)) return fromArray(that, object)
	
	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }
	
	  if (object.length) return fromArrayLike(that, object)
	
	  return fromJsonObject(that, object)
	}
	
	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}
	
	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0
	
	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)
	
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	} else {
	  // pre-set for values that may exist in the future
	  Buffer.prototype.length = undefined
	  Buffer.prototype.parent = undefined
	}
	
	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }
	
	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent
	
	  return that
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)
	
	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break
	
	    ++i
	  }
	
	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')
	
	  if (list.length === 0) {
	    return new Buffer(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }
	
	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}
	
	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0
	
	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'binary':
	        return binarySlice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0
	
	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1
	
	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)
	
	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }
	
	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}
	
	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'binary':
	        return binaryWrite(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  if (newBuf.length) newBuf.parent = this.parent || this
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }
	
	  return len
	}
	
	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length
	
	  if (end < start) throw new RangeError('end < start')
	
	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return
	
	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')
	
	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var BP = Buffer.prototype
	
	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true
	
	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set
	
	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set
	
	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer
	
	  return arr
	}
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/buffer/index.js */ 176).Buffer, (function() { return this; }())))

/***/ },
/* 177 */
/*!********************************!*\
  !*** ./~/base64-js/lib/b64.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	
	;(function (exports) {
		'use strict';
	
	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array
	
		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)
	
		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}
	
		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr
	
			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}
	
			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0
	
			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)
	
			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length
	
			var L = 0
	
			function push (v) {
				arr[L++] = v
			}
	
			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}
	
			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}
	
			return arr
		}
	
		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length
	
			function encode (num) {
				return lookup.charAt(num)
			}
	
			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}
	
			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}
	
			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}
	
			return output
		}
	
		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 178 */
/*!****************************!*\
  !*** ./~/ieee754/index.js ***!
  \****************************/
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 179 */
/*!****************************!*\
  !*** ./~/isarray/index.js ***!
  \****************************/
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 180 */
/*!*********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/fields/TitleField.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var REQUIRED_FIELD_SYMBOL = "*";
	
	function TitleField(props) {
	  var id = props.id;
	  var title = props.title;
	  var required = props.required;
	
	  var legend = required ? title + REQUIRED_FIELD_SYMBOL : title;
	  return _react2.default.createElement(
	    "legend",
	    { id: id },
	    legend
	  );
	}
	
	if (process.env.NODE_ENV !== "production") {
	  TitleField.propTypes = {
	    id: _react.PropTypes.string,
	    title: _react.PropTypes.string,
	    required: _react.PropTypes.bool
	  };
	}
	
	exports.default = TitleField;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 181 */
/*!**************************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/PasswordWidget.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _BaseInput = __webpack_require__(/*! ./BaseInput */ 182);
	
	var _BaseInput2 = _interopRequireDefault(_BaseInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function PasswordWidget(props) {
	  return _react2.default.createElement(_BaseInput2.default, _extends({ type: "password" }, props));
	}
	
	if (process.env.NODE_ENV !== "production") {
	  PasswordWidget.propTypes = {
	    value: _react.PropTypes.string
	  };
	}
	
	exports.default = PasswordWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 182 */
/*!*********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/BaseInput.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function BaseInput(props) {
	  var value = props.value;
	  var readonly = props.readonly;
	  var _onChange = props.onChange;
	
	  return _react2.default.createElement("input", _extends({}, props, {
	    className: "form-control",
	    readOnly: readonly,
	    value: typeof value === "undefined" ? "" : value,
	    onChange: function onChange(event) {
	      return _onChange(event.target.value);
	    } }));
	}
	
	BaseInput.defaultProps = {
	  type: "text",
	  required: false,
	  disabled: false,
	  readonly: false
	};
	
	if (process.env.NODE_ENV !== "production") {
	  BaseInput.propTypes = {
	    id: _react.PropTypes.string.isRequired,
	    placeholder: _react.PropTypes.string,
	    value: _react.PropTypes.any,
	    required: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    readonly: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func
	  };
	}
	
	exports.default = BaseInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 183 */
/*!***********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/RadioWidget.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function RadioWidget(_ref) {
	  var schema = _ref.schema;
	  var options = _ref.options;
	  var placeholder = _ref.placeholder;
	  var value = _ref.value;
	  var required = _ref.required;
	  var disabled = _ref.disabled;
	  var _onChange = _ref.onChange;
	
	  // Generating a unique field name to identify this set of radio buttons
	  var name = Math.random().toString();
	  return _react2.default.createElement(
	    "div",
	    { className: "field-radio-group" },
	    options.map(function (option, i) {
	      var checked = option.value === value;
	      return _react2.default.createElement(
	        "div",
	        { key: i, className: "radio " + (disabled ? "disabled" : "") },
	        _react2.default.createElement(
	          "label",
	          null,
	          _react2.default.createElement("input", { type: "radio",
	            name: name,
	            value: option.value,
	            checked: checked,
	            disabled: disabled,
	            placeholder: placeholder,
	            onChange: function onChange(_) {
	              return _onChange(option.value);
	            } }),
	          option.label
	        )
	      );
	    })
	  );
	}
	
	if (process.env.NODE_ENV !== "production") {
	  RadioWidget.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    id: _react.PropTypes.string.isRequired,
	    options: _react.PropTypes.array.isRequired,
	    placeholder: _react.PropTypes.string,
	    value: _react.PropTypes.any,
	    required: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func
	  };
	}
	exports.default = RadioWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 184 */
/*!************************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/UpDownWidget.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _BaseInput = __webpack_require__(/*! ./BaseInput */ 182);
	
	var _BaseInput2 = _interopRequireDefault(_BaseInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function rangeSpec(schema) {
	  var spec = {};
	  if (schema.multipleOf) {
	    spec.step = schema.multipleOf;
	  }
	  if (schema.minimum) {
	    spec.min = schema.minimum;
	  }
	  if (schema.maximum) {
	    spec.max = schema.maximum;
	  }
	  return spec;
	}
	
	function UpDownWidget(props) {
	  return _react2.default.createElement(_BaseInput2.default, _extends({ type: "number" }, props, rangeSpec(props.schema)));
	}
	
	if (process.env.NODE_ENV !== "production") {
	  UpDownWidget.propTypes = {
	    value: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
	  };
	}
	
	exports.default = UpDownWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 185 */
/*!***********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/RangeWidget.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _BaseInput = __webpack_require__(/*! ./BaseInput */ 182);
	
	var _BaseInput2 = _interopRequireDefault(_BaseInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function rangeSpec(schema) {
	  var spec = {};
	  if (schema.multipleOf) {
	    spec.step = schema.multipleOf;
	  }
	  if (schema.minimum) {
	    spec.min = schema.minimum;
	  }
	  if (schema.maximum) {
	    spec.max = schema.maximum;
	  }
	  return spec;
	}
	
	function RangeWidget(props) {
	  var schema = props.schema;
	  var value = props.value;
	
	  return _react2.default.createElement(
	    "div",
	    { className: "field-range-wrapper" },
	    _react2.default.createElement(_BaseInput2.default, _extends({
	      type: "range"
	    }, props, rangeSpec(schema))),
	    _react2.default.createElement(
	      "span",
	      { className: "range-view" },
	      value
	    )
	  );
	}
	
	if (process.env.NODE_ENV !== "production") {
	  RangeWidget.propTypes = {
	    value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number])
	  };
	}
	
	exports.default = RangeWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 186 */
/*!************************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/SelectWidget.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _utils = __webpack_require__(/*! ../../utils */ 172);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * This is a silly limitation in the DOM where option change event values are
	 * always retrieved as strings.
	 */
	function processValue(type, value) {
	  if (type === "boolean") {
	    return value === "true";
	  } else if (type === "number") {
	    return (0, _utils.asNumber)(value);
	  }
	  return value;
	}
	
	function SelectWidget(_ref) {
	  var schema = _ref.schema;
	  var id = _ref.id;
	  var options = _ref.options;
	  var placeholder = _ref.placeholder;
	  var value = _ref.value;
	  var required = _ref.required;
	  var disabled = _ref.disabled;
	  var readonly = _ref.readonly;
	  var multiple = _ref.multiple;
	  var _onChange = _ref.onChange;
	
	  return _react2.default.createElement(
	    "select",
	    {
	      id: id,
	      multiple: multiple,
	      className: "form-control",
	      title: placeholder,
	      value: value,
	      required: required,
	      disabled: disabled,
	      readOnly: readonly,
	      onChange: function onChange(event) {
	        var newValue = void 0;
	        if (multiple) {
	          newValue = [].filter.call(event.target.options, function (o) {
	            return o.selected;
	          }).map(function (o) {
	            return o.value;
	          });
	        } else {
	          newValue = event.target.value;
	        }
	
	        _onChange(processValue(schema.type, newValue));
	      } },
	    options.map(function (_ref2, i) {
	      var value = _ref2.value;
	      var label = _ref2.label;
	
	      return _react2.default.createElement(
	        "option",
	        { key: i, value: value },
	        label
	      );
	    })
	  );
	}
	
	if (process.env.NODE_ENV !== "production") {
	  SelectWidget.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    id: _react.PropTypes.string.isRequired,
	    options: _react.PropTypes.array.isRequired,
	    placeholder: _react.PropTypes.string,
	    value: _react.PropTypes.any,
	    required: _react.PropTypes.bool,
	    multiple: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func
	  };
	}
	
	exports.default = SelectWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 187 */
/*!**********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/TextWidget.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _BaseInput = __webpack_require__(/*! ./BaseInput */ 182);
	
	var _BaseInput2 = _interopRequireDefault(_BaseInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function TextWidget(props) {
	  return _react2.default.createElement(_BaseInput2.default, props);
	}
	
	if (process.env.NODE_ENV !== "production") {
	  TextWidget.propTypes = {
	    value: _react.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number])
	  };
	}
	
	exports.default = TextWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 188 */
/*!**********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/DateWidget.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _BaseInput = __webpack_require__(/*! ./BaseInput */ 182);
	
	var _BaseInput2 = _interopRequireDefault(_BaseInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function DateWidget(props) {
	  return _react2.default.createElement(_BaseInput2.default, _extends({ type: "date" }, props));
	}
	
	if (process.env.NODE_ENV !== "production") {
	  DateWidget.propTypes = {
	    value: _react.PropTypes.string
	  };
	}
	
	exports.default = DateWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 189 */
/*!**************************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/DateTimeWidget.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _BaseInput = __webpack_require__(/*! ./BaseInput */ 182);
	
	var _BaseInput2 = _interopRequireDefault(_BaseInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function fromJSONDate(jsonDate) {
	  return jsonDate ? jsonDate.slice(0, 19) : "";
	}
	
	function toJSONDate(dateString) {
	  if (dateString) {
	    return new Date(dateString).toJSON();
	  }
	}
	
	function DateTimeWidget(props) {
	  var value = props.value;
	  var _onChange = props.onChange;
	
	  return _react2.default.createElement(_BaseInput2.default, _extends({
	    type: "datetime-local"
	  }, props, {
	    value: fromJSONDate(value),
	    onChange: function onChange(value) {
	      return _onChange(toJSONDate(value));
	    }
	  }));
	}
	
	if (process.env.NODE_ENV !== "production") {
	  DateTimeWidget.propTypes = {
	    value: _react.PropTypes.string
	  };
	}
	
	exports.default = DateTimeWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 190 */
/*!*************************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/AltDateWidget.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _utils = __webpack_require__(/*! ../../utils */ 172);
	
	var _SelectWidget = __webpack_require__(/*! ../widgets/SelectWidget */ 186);
	
	var _SelectWidget2 = _interopRequireDefault(_SelectWidget);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function rangeOptions(type, start, stop) {
	  var options = [{ value: -1, label: type }];
	  for (var i = start; i <= stop; i++) {
	    options.push({ value: i, label: (0, _utils.pad)(i, 2) });
	  }
	  return options;
	}
	
	function readyForChange(state) {
	  return Object.keys(state).every(function (key) {
	    return state[key] !== -1;
	  });
	}
	
	function DateElement(props) {
	  var type = props.type;
	  var range = props.range;
	  var value = props.value;
	  var select = props.select;
	  var rootId = props.rootId;
	  var disabled = props.disabled;
	  var readonly = props.readonly;
	
	  var id = rootId + "_" + type;
	  return _react2.default.createElement(_SelectWidget2.default, {
	    schema: { type: "integer" },
	    id: id,
	    className: "form-control",
	    options: rangeOptions(type, range[0], range[1]),
	    value: value,
	    disabled: disabled,
	    readonly: readonly,
	    onChange: function onChange(value) {
	      return select(type, value);
	    } });
	}
	
	var AltDateWidget = function (_Component) {
	  _inherits(AltDateWidget, _Component);
	
	  function AltDateWidget(props) {
	    _classCallCheck(this, AltDateWidget);
	
	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AltDateWidget).call(this, props));
	
	    _this.onChange = function (property, value) {
	      _this.setState(_defineProperty({}, property, value), function () {
	        // Only propagate to parent state if we have a complete date{time}
	        if (readyForChange(_this.state)) {
	          _this.props.onChange((0, _utils.toDateString)(_this.state, _this.props.time));
	        }
	      });
	    };
	
	    _this.setNow = function (event) {
	      event.preventDefault();
	      var _this$props = _this.props;
	      var time = _this$props.time;
	      var disabled = _this$props.disabled;
	      var readonly = _this$props.readonly;
	      var onChange = _this$props.onChange;
	
	      if (disabled || readonly) {
	        return;
	      }
	      var nowDateObj = (0, _utils.parseDateString)(new Date().toJSON(), time);
	      _this.setState(nowDateObj, function () {
	        return onChange((0, _utils.toDateString)(_this.state, time));
	      });
	    };
	
	    _this.clear = function (event) {
	      event.preventDefault();
	      var _this$props2 = _this.props;
	      var time = _this$props2.time;
	      var disabled = _this$props2.disabled;
	      var readonly = _this$props2.readonly;
	      var onChange = _this$props2.onChange;
	
	      if (disabled || readonly) {
	        return;
	      }
	      _this.setState((0, _utils.parseDateString)("", time), function () {
	        return onChange(undefined);
	      });
	    };
	
	    _this.state = (0, _utils.parseDateString)(props.value, props.time);
	    return _this;
	  }
	
	  _createClass(AltDateWidget, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState((0, _utils.parseDateString)(nextProps.value, nextProps.time));
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _utils.shouldRender)(this, nextProps, nextState);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;
	
	      var _props = this.props;
	      var id = _props.id;
	      var disabled = _props.disabled;
	      var readonly = _props.readonly;
	
	      return _react2.default.createElement(
	        "ul",
	        { className: "list-inline" },
	        this.dateElementProps.map(function (elemProps, i) {
	          return _react2.default.createElement(
	            "li",
	            { key: i },
	            _react2.default.createElement(DateElement, _extends({
	              rootId: id,
	              select: _this2.onChange
	            }, elemProps, {
	              disabled: disabled,
	              readonly: readonly }))
	          );
	        }),
	        _react2.default.createElement(
	          "li",
	          null,
	          _react2.default.createElement(
	            "a",
	            { href: "#", className: "btn btn-info btn-now",
	              onClick: this.setNow },
	            "Now"
	          )
	        ),
	        _react2.default.createElement(
	          "li",
	          null,
	          _react2.default.createElement(
	            "a",
	            { href: "#", className: "btn btn-warning btn-clear",
	              onClick: this.clear },
	            "Clear"
	          )
	        )
	      );
	    }
	  }, {
	    key: "dateElementProps",
	    get: function get() {
	      var time = this.props.time;
	      var _state = this.state;
	      var year = _state.year;
	      var month = _state.month;
	      var day = _state.day;
	      var hour = _state.hour;
	      var minute = _state.minute;
	      var second = _state.second;
	
	      var data = [{ type: "year", range: [1900, 2020], value: year }, { type: "month", range: [1, 12], value: month }, { type: "day", range: [1, 31], value: day }];
	      if (time) {
	        data.push({ type: "hour", range: [0, 23], value: hour }, { type: "minute", range: [0, 59], value: minute }, { type: "second", range: [0, 59], value: second });
	      }
	      return data;
	    }
	  }]);
	
	  return AltDateWidget;
	}(_react.Component);
	
	AltDateWidget.defaultProps = {
	  time: false,
	  disabled: false,
	  readonly: false
	};
	
	
	if (process.env.NODE_ENV !== "production") {
	  AltDateWidget.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    id: _react.PropTypes.string.isRequired,
	    placeholder: _react.PropTypes.string,
	    value: _react2.default.PropTypes.string,
	    required: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    readonly: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func,
	    time: _react.PropTypes.bool
	  };
	}
	
	exports.default = AltDateWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 191 */
/*!*****************************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/AltDateTimeWidget.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _AltDateWidget = __webpack_require__(/*! ./AltDateWidget */ 190);
	
	var _AltDateWidget2 = _interopRequireDefault(_AltDateWidget);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function AltDateTimeWidget(props) {
	  return _react2.default.createElement(_AltDateWidget2.default, _extends({ time: true }, props));
	}
	
	if (process.env.NODE_ENV !== "production") {
	  AltDateTimeWidget.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    id: _react.PropTypes.string.isRequired,
	    placeholder: _react.PropTypes.string,
	    value: _react2.default.PropTypes.string,
	    required: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func
	  };
	}
	
	exports.default = AltDateTimeWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 192 */
/*!***********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/EmailWidget.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _BaseInput = __webpack_require__(/*! ./BaseInput */ 182);
	
	var _BaseInput2 = _interopRequireDefault(_BaseInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function EmailWidget(props) {
	  return _react2.default.createElement(_BaseInput2.default, _extends({ type: "email" }, props));
	}
	
	if (process.env.NODE_ENV !== "production") {
	  EmailWidget.propTypes = {
	    value: _react.PropTypes.string
	  };
	}
	
	exports.default = EmailWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 193 */
/*!*********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/URLWidget.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _BaseInput = __webpack_require__(/*! ./BaseInput */ 182);
	
	var _BaseInput2 = _interopRequireDefault(_BaseInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function URLWidget(props) {
	  return _react2.default.createElement(_BaseInput2.default, _extends({ type: "url" }, props));
	}
	
	if (process.env.NODE_ENV !== "production") {
	  URLWidget.propTypes = {
	    value: _react.PropTypes.string
	  };
	}
	
	exports.default = URLWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 194 */
/*!**************************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/TextareaWidget.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function TextWidget(_ref) {
	  var schema = _ref.schema;
	  var id = _ref.id;
	  var placeholder = _ref.placeholder;
	  var value = _ref.value;
	  var required = _ref.required;
	  var disabled = _ref.disabled;
	  var readonly = _ref.readonly;
	  var _onChange = _ref.onChange;
	
	  return _react2.default.createElement("textarea", {
	    id: id,
	    className: "form-control",
	    value: typeof value === "undefined" ? "" : value,
	    placeholder: placeholder,
	    required: required,
	    disabled: disabled,
	    readOnly: readonly,
	    onChange: function onChange(event) {
	      return _onChange(event.target.value);
	    } });
	}
	
	if (process.env.NODE_ENV !== "production") {
	  TextWidget.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    id: _react.PropTypes.string.isRequired,
	    placeholder: _react.PropTypes.string,
	    value: _react.PropTypes.string,
	    required: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func
	  };
	}
	
	exports.default = TextWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 195 */
/*!************************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/HiddenWidget.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function HiddenWidget(_ref) {
	  var id = _ref.id;
	  var value = _ref.value;
	
	  return _react2.default.createElement("input", { type: "hidden", id: id, value: value });
	}
	
	if (process.env.NODE_ENV !== "production") {
	  HiddenWidget.propTypes = {
	    id: _react.PropTypes.string.isRequired,
	    value: _react.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number, _react2.default.PropTypes.bool])
	  };
	}
	
	exports.default = HiddenWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 196 */
/*!***********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/ColorWidget.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _BaseInput = __webpack_require__(/*! ./BaseInput */ 182);
	
	var _BaseInput2 = _interopRequireDefault(_BaseInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function ColorWidget(props) {
	  return _react2.default.createElement(_BaseInput2.default, _extends({ type: "color" }, props));
	}
	
	if (process.env.NODE_ENV !== "production") {
	  ColorWidget.propTypes = {
	    value: _react.PropTypes.string
	  };
	}
	
	exports.default = ColorWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 197 */
/*!*********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/fields/ArrayField.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _utils = __webpack_require__(/*! ../../utils */ 172);
	
	var _SelectWidget = __webpack_require__(/*! ./../widgets/SelectWidget */ 186);
	
	var _SelectWidget2 = _interopRequireDefault(_SelectWidget);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function ArrayFieldTitle(_ref) {
	  var TitleField = _ref.TitleField;
	  var idSchema = _ref.idSchema;
	  var title = _ref.title;
	  var required = _ref.required;
	
	  if (!title) {
	    return null;
	  }
	  var id = idSchema.id + "__title";
	  return _react2.default.createElement(TitleField, { id: id, title: title, required: required });
	}
	
	var ArrayField = function (_Component) {
	  _inherits(ArrayField, _Component);
	
	  function ArrayField(props) {
	    _classCallCheck(this, ArrayField);
	
	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ArrayField).call(this, props));
	
	    _this.onAddClick = function (event) {
	      event.preventDefault();
	      var items = _this.state.items;
	      var _this$props = _this.props;
	      var schema = _this$props.schema;
	      var registry = _this$props.registry;
	      var definitions = registry.definitions;
	
	      var itemSchema = schema.items;
	      if ((0, _utils.isFixedItems)(schema) && (0, _utils.allowAdditionalItems)(schema)) {
	        itemSchema = schema.additionalItems;
	      }
	      _this.asyncSetState({
	        items: items.concat([(0, _utils.getDefaultFormState)(itemSchema, undefined, definitions)])
	      });
	    };
	
	    _this.onDropIndexClick = function (index) {
	      return function (event) {
	        event.preventDefault();
	        _this.asyncSetState({
	          items: _this.state.items.filter(function (_, i) {
	            return i !== index;
	          })
	        }, { validate: true }); // refs #195
	      };
	    };
	
	    _this.onChangeForIndex = function (index) {
	      return function (value) {
	        _this.asyncSetState({
	          items: _this.state.items.map(function (item, i) {
	            return index === i ? value : item;
	          })
	        });
	      };
	    };
	
	    _this.onSelectChange = function (value) {
	      _this.asyncSetState({ items: value });
	    };
	
	    _this.state = _this.getStateFromProps(props);
	    return _this;
	  }
	
	  _createClass(ArrayField, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState(this.getStateFromProps(nextProps));
	    }
	  }, {
	    key: "getStateFromProps",
	    value: function getStateFromProps(props) {
	      var formData = Array.isArray(props.formData) ? props.formData : null;
	      var definitions = this.props.registry.definitions;
	
	      return {
	        items: (0, _utils.getDefaultFormState)(props.schema, formData, definitions) || []
	      };
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _utils.shouldRender)(this, nextProps, nextState);
	    }
	  }, {
	    key: "isItemRequired",
	    value: function isItemRequired(itemsSchema) {
	      return itemsSchema.type === "string" && itemsSchema.minLength > 0;
	    }
	  }, {
	    key: "asyncSetState",
	    value: function asyncSetState(state) {
	      var _this2 = this;
	
	      var options = arguments.length <= 1 || arguments[1] === undefined ? { validate: false } : arguments[1];
	
	      (0, _utils.setState)(this, state, function () {
	        _this2.props.onChange(_this2.state.items, options);
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var schema = this.props.schema;
	
	      if ((0, _utils.isFixedItems)(schema)) {
	        return this.renderFixedArray();
	      }
	      if ((0, _utils.isMultiSelect)(schema)) {
	        return this.renderMultiSelect();
	      }
	      return this.renderNormalArray();
	    }
	  }, {
	    key: "renderNormalArray",
	    value: function renderNormalArray() {
	      var _this3 = this;
	
	      var _props = this.props;
	      var schema = _props.schema;
	      var uiSchema = _props.uiSchema;
	      var errorSchema = _props.errorSchema;
	      var idSchema = _props.idSchema;
	      var name = _props.name;
	      var required = _props.required;
	      var disabled = _props.disabled;
	      var readonly = _props.readonly;
	
	      var title = schema.title || name;
	      var items = this.state.items;
	      var _props$registry = this.props.registry;
	      var definitions = _props$registry.definitions;
	      var fields = _props$registry.fields;
	      var TitleField = fields.TitleField;
	
	      var itemsSchema = (0, _utils.retrieveSchema)(schema.items, definitions);
	
	      return _react2.default.createElement(
	        "fieldset",
	        {
	          className: "field field-array field-array-of-" + itemsSchema.type },
	        _react2.default.createElement(ArrayFieldTitle, {
	          TitleField: TitleField,
	          idSchema: idSchema,
	          title: title,
	          required: required }),
	        schema.description ? _react2.default.createElement(
	          "div",
	          { className: "field-description" },
	          schema.description
	        ) : null,
	        _react2.default.createElement(
	          "div",
	          { className: "row array-item-list" },
	          items.map(function (item, index) {
	            var itemErrorSchema = errorSchema ? errorSchema[index] : undefined;
	            var itemIdPrefix = idSchema.id + "_" + index;
	            var itemIdSchema = (0, _utils.toIdSchema)(itemsSchema, itemIdPrefix, definitions);
	            return _this3.renderArrayFieldItem({
	              index: index,
	              itemSchema: itemsSchema,
	              itemIdSchema: itemIdSchema,
	              itemErrorSchema: itemErrorSchema,
	              itemData: items[index],
	              itemUiSchema: uiSchema.items
	            });
	          })
	        ),
	        _react2.default.createElement(AddButton, {
	          onClick: this.onAddClick, disabled: disabled || readonly })
	      );
	    }
	  }, {
	    key: "renderMultiSelect",
	    value: function renderMultiSelect() {
	      var _props2 = this.props;
	      var schema = _props2.schema;
	      var idSchema = _props2.idSchema;
	      var name = _props2.name;
	      var disabled = _props2.disabled;
	      var readonly = _props2.readonly;
	
	      var title = schema.title || name;
	      var items = this.state.items;
	      var definitions = this.props.registry.definitions;
	
	      var itemsSchema = (0, _utils.retrieveSchema)(schema.items, definitions);
	      return _react2.default.createElement(_SelectWidget2.default, {
	        id: idSchema && idSchema.id,
	        multiple: true,
	        onChange: this.onSelectChange,
	        options: (0, _utils.optionsList)(itemsSchema),
	        schema: schema,
	        title: title,
	        value: items,
	        disabled: disabled,
	        readonly: readonly
	      });
	    }
	  }, {
	    key: "renderFixedArray",
	    value: function renderFixedArray() {
	      var _this4 = this;
	
	      var _props3 = this.props;
	      var schema = _props3.schema;
	      var uiSchema = _props3.uiSchema;
	      var errorSchema = _props3.errorSchema;
	      var idSchema = _props3.idSchema;
	      var name = _props3.name;
	      var required = _props3.required;
	      var disabled = _props3.disabled;
	      var readonly = _props3.readonly;
	
	      var title = schema.title || name;
	      var items = this.state.items;
	      var _props$registry2 = this.props.registry;
	      var definitions = _props$registry2.definitions;
	      var fields = _props$registry2.fields;
	      var TitleField = fields.TitleField;
	
	      var itemSchemas = schema.items.map(function (item) {
	        return (0, _utils.retrieveSchema)(item, definitions);
	      });
	      var additionalSchema = (0, _utils.allowAdditionalItems)(schema) ? (0, _utils.retrieveSchema)(schema.additionalItems, definitions) : null;
	
	      if (!items || items.length < itemSchemas.length) {
	        // to make sure at least all fixed items are generated
	        items = items || [];
	        items = items.concat(new Array(itemSchemas.length - items.length));
	      }
	
	      return _react2.default.createElement(
	        "fieldset",
	        { className: "field field-array field-array-fixed-items" },
	        _react2.default.createElement(ArrayFieldTitle, {
	          TitleField: TitleField,
	          idSchema: idSchema,
	          title: title,
	          required: required }),
	        schema.description ? _react2.default.createElement(
	          "div",
	          { className: "field-description" },
	          schema.description
	        ) : null,
	        _react2.default.createElement(
	          "div",
	          { className: "row array-item-list" },
	          items.map(function (item, index) {
	            var additional = index >= itemSchemas.length;
	            var itemSchema = additional ? additionalSchema : itemSchemas[index];
	            var itemIdPrefix = idSchema.id + "_" + index;
	            var itemIdSchema = (0, _utils.toIdSchema)(itemSchema, itemIdPrefix, definitions);
	            var itemUiSchema = additional ? uiSchema.additionalItems || {} : Array.isArray(uiSchema.items) ? uiSchema.items[index] : uiSchema.items || {};
	            var itemErrorSchema = errorSchema ? errorSchema[index] : undefined;
	
	            return _this4.renderArrayFieldItem({
	              index: index,
	              removable: additional,
	              itemSchema: itemSchema,
	              itemData: item,
	              itemUiSchema: itemUiSchema,
	              itemIdSchema: itemIdSchema,
	              itemErrorSchema: itemErrorSchema
	            });
	          })
	        ),
	        additionalSchema ? _react2.default.createElement(AddButton, {
	          onClick: this.onAddClick,
	          disabled: disabled || readonly }) : null
	      );
	    }
	  }, {
	    key: "renderArrayFieldItem",
	    value: function renderArrayFieldItem(_ref2) {
	      var index = _ref2.index;
	      var _ref2$removable = _ref2.removable;
	      var removable = _ref2$removable === undefined ? true : _ref2$removable;
	      var itemSchema = _ref2.itemSchema;
	      var itemData = _ref2.itemData;
	      var itemUiSchema = _ref2.itemUiSchema;
	      var itemIdSchema = _ref2.itemIdSchema;
	      var itemErrorSchema = _ref2.itemErrorSchema;
	      var SchemaField = this.props.registry.fields.SchemaField;
	      var _props4 = this.props;
	      var disabled = _props4.disabled;
	      var readonly = _props4.readonly;
	
	      return _react2.default.createElement(
	        "div",
	        { key: index },
	        _react2.default.createElement(
	          "div",
	          { className: removable ? "col-xs-10" : "col-xs-12" },
	          _react2.default.createElement(SchemaField, {
	            schema: itemSchema,
	            uiSchema: itemUiSchema,
	            formData: itemData,
	            errorSchema: itemErrorSchema,
	            idSchema: itemIdSchema,
	            required: this.isItemRequired(itemSchema),
	            onChange: this.onChangeForIndex(index),
	            registry: this.props.registry,
	            disabled: this.props.disabled,
	            readonly: this.props.readonly })
	        ),
	        removable ? _react2.default.createElement(
	          "div",
	          { className: "col-xs-2 array-item-remove text-right" },
	          _react2.default.createElement(
	            "button",
	            { type: "button", className: "btn btn-danger col-xs-12",
	              tabIndex: "-1",
	              disabled: disabled || readonly,
	              onClick: this.onDropIndexClick(index) },
	            "Delete"
	          )
	        ) : null
	      );
	    }
	  }, {
	    key: "itemTitle",
	    get: function get() {
	      var schema = this.props.schema;
	
	      return schema.items.title || schema.items.description || "Item";
	    }
	  }]);
	
	  return ArrayField;
	}(_react.Component);
	
	ArrayField.defaultProps = {
	  uiSchema: {},
	  idSchema: {},
	  registry: (0, _utils.getDefaultRegistry)(),
	  required: false,
	  disabled: false,
	  readonly: false
	};
	
	
	function AddButton(_ref3) {
	  var onClick = _ref3.onClick;
	  var disabled = _ref3.disabled;
	
	  return _react2.default.createElement(
	    "div",
	    { className: "row" },
	    _react2.default.createElement(
	      "p",
	      { className: "col-xs-2 col-xs-offset-10 array-item-add text-right" },
	      _react2.default.createElement(
	        "button",
	        { type: "button", className: "btn btn-info col-xs-12",
	          tabIndex: "-1", onClick: onClick,
	          disabled: disabled },
	        "Add"
	      )
	    )
	  );
	}
	
	if (process.env.NODE_ENV !== "production") {
	  ArrayField.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    uiSchema: _react.PropTypes.object,
	    idSchema: _react.PropTypes.object,
	    errorSchema: _react.PropTypes.object,
	    onChange: _react.PropTypes.func.isRequired,
	    formData: _react.PropTypes.array,
	    required: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    readonly: _react.PropTypes.bool,
	    registry: _react.PropTypes.shape({
	      widgets: _react.PropTypes.objectOf(_react.PropTypes.func).isRequired,
	      fields: _react.PropTypes.objectOf(_react.PropTypes.func).isRequired,
	      definitions: _react.PropTypes.object.isRequired
	    })
	  };
	}
	
	exports.default = ArrayField;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 198 */
/*!***********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/fields/BooleanField.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _utils = __webpack_require__(/*! ../../utils */ 172);
	
	var _CheckboxWidget = __webpack_require__(/*! ./../widgets/CheckboxWidget */ 199);
	
	var _CheckboxWidget2 = _interopRequireDefault(_CheckboxWidget);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function buildOptions(schema) {
	  return (0, _utils.optionsList)(Object.assign({
	    enumNames: ["true", "false"],
	    enum: [true, false]
	  }, { enumNames: schema.enumNames }));
	}
	
	function BooleanField(props) {
	  var schema = props.schema;
	  var name = props.name;
	  var uiSchema = props.uiSchema;
	  var idSchema = props.idSchema;
	  var formData = props.formData;
	  var registry = props.registry;
	  var required = props.required;
	  var disabled = props.disabled;
	  var readonly = props.readonly;
	  var onChange = props.onChange;
	  var title = schema.title;
	  var description = schema.description;
	  var widgets = registry.widgets;
	
	  var widget = uiSchema["ui:widget"];
	  var commonProps = {
	    schema: schema,
	    id: idSchema && idSchema.id,
	    onChange: onChange,
	    label: title || name,
	    placeholder: description,
	    value: (0, _utils.defaultFieldValue)(formData, schema),
	    required: required,
	    disabled: disabled,
	    readonly: readonly
	  };
	  if (widget) {
	    var Widget = (0, _utils.getAlternativeWidget)(schema, widget, widgets);
	    return _react2.default.createElement(Widget, _extends({ options: buildOptions(schema) }, commonProps));
	  }
	  return _react2.default.createElement(_CheckboxWidget2.default, commonProps);
	}
	
	if (process.env.NODE_ENV !== "production") {
	  BooleanField.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    uiSchema: _react.PropTypes.object,
	    idSchema: _react.PropTypes.object,
	    onChange: _react.PropTypes.func.isRequired,
	    formData: _react.PropTypes.bool,
	    required: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    readonly: _react.PropTypes.bool,
	    registry: _react.PropTypes.shape({
	      widgets: _react.PropTypes.objectOf(_react.PropTypes.func).isRequired,
	      fields: _react.PropTypes.objectOf(_react.PropTypes.func).isRequired,
	      definitions: _react.PropTypes.object.isRequired
	    })
	  };
	}
	
	BooleanField.defaultProps = {
	  uiSchema: {},
	  registry: (0, _utils.getDefaultRegistry)(),
	  disabled: false,
	  readonly: false
	};
	
	exports.default = BooleanField;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 199 */
/*!**************************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/widgets/CheckboxWidget.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function CheckboxWidget(_ref) {
	  var schema = _ref.schema;
	  var id = _ref.id;
	  var value = _ref.value;
	  var required = _ref.required;
	  var disabled = _ref.disabled;
	  var placeholder = _ref.placeholder;
	  var _onChange = _ref.onChange;
	  var label = _ref.label;
	
	  return _react2.default.createElement(
	    "div",
	    { className: "checkbox " + (disabled ? "disabled" : "") },
	    _react2.default.createElement(
	      "label",
	      null,
	      _react2.default.createElement("input", { type: "checkbox",
	        id: id,
	        title: placeholder,
	        checked: typeof value === "undefined" ? false : value,
	        required: required,
	        disabled: disabled,
	        onChange: function onChange(event) {
	          return _onChange(event.target.checked);
	        } }),
	      _react2.default.createElement(
	        "strong",
	        null,
	        label
	      )
	    )
	  );
	}
	if (process.env.NODE_ENV !== "production") {
	  CheckboxWidget.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    id: _react.PropTypes.string.isRequired,
	    onChange: _react.PropTypes.func,
	    value: _react.PropTypes.bool,
	    required: _react.PropTypes.bool,
	    placeholder: _react.PropTypes.string
	  };
	}
	
	exports.default = CheckboxWidget;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 200 */
/*!**********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/fields/NumberField.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _utils = __webpack_require__(/*! ../../utils */ 172);
	
	var _StringField = __webpack_require__(/*! ./StringField */ 201);
	
	var _StringField2 = _interopRequireDefault(_StringField);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function NumberField(props) {
	  return _react2.default.createElement(_StringField2.default, _extends({}, props, {
	    onChange: function onChange(value) {
	      return props.onChange((0, _utils.asNumber)(value));
	    } }));
	}
	
	if (process.env.NODE_ENV !== "production") {
	  NumberField.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    idSchema: _react.PropTypes.object,
	    onChange: _react.PropTypes.func.isRequired,
	    formData: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
	    required: _react.PropTypes.bool
	  };
	}
	
	NumberField.defaultProps = {
	  uiSchema: {}
	};
	
	exports.default = NumberField;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 201 */
/*!**********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/fields/StringField.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _utils = __webpack_require__(/*! ../../utils */ 172);
	
	var _TextWidget = __webpack_require__(/*! ../widgets/TextWidget */ 187);
	
	var _TextWidget2 = _interopRequireDefault(_TextWidget);
	
	var _SelectWidget = __webpack_require__(/*! ../widgets/SelectWidget */ 186);
	
	var _SelectWidget2 = _interopRequireDefault(_SelectWidget);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function StringField(props) {
	  var schema = props.schema;
	  var name = props.name;
	  var uiSchema = props.uiSchema;
	  var idSchema = props.idSchema;
	  var formData = props.formData;
	  var registry = props.registry;
	  var required = props.required;
	  var disabled = props.disabled;
	  var readonly = props.readonly;
	  var onChange = props.onChange;
	  var title = schema.title;
	  var description = schema.description;
	  var widgets = registry.widgets;
	
	  var widget = uiSchema["ui:widget"] || schema.format;
	  var commonProps = {
	    schema: schema,
	    id: idSchema && idSchema.id,
	    label: title || name,
	    placeholder: description,
	    onChange: onChange,
	    value: (0, _utils.defaultFieldValue)(formData, schema),
	    required: required,
	    disabled: disabled,
	    readonly: readonly
	  };
	  if (Array.isArray(schema.enum)) {
	    if (widget) {
	      var Widget = (0, _utils.getAlternativeWidget)(schema, widget, widgets);
	      return _react2.default.createElement(Widget, _extends({ options: (0, _utils.optionsList)(schema) }, commonProps));
	    }
	    return _react2.default.createElement(_SelectWidget2.default, _extends({ options: (0, _utils.optionsList)(schema) }, commonProps));
	  }
	  if (widget) {
	    var _Widget = (0, _utils.getAlternativeWidget)(schema, widget, widgets);
	    return _react2.default.createElement(_Widget, commonProps);
	  }
	  return _react2.default.createElement(_TextWidget2.default, commonProps);
	}
	
	if (process.env.NODE_ENV !== "production") {
	  StringField.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    idSchema: _react.PropTypes.object,
	    onChange: _react.PropTypes.func.isRequired,
	    formData: _react.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number]),
	    registry: _react.PropTypes.shape({
	      widgets: _react.PropTypes.objectOf(_react.PropTypes.func).isRequired,
	      fields: _react.PropTypes.objectOf(_react.PropTypes.func).isRequired,
	      definitions: _react.PropTypes.object.isRequired
	    }),
	    required: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    readonly: _react.PropTypes.bool
	  };
	}
	
	StringField.defaultProps = {
	  uiSchema: {},
	  registry: (0, _utils.getDefaultRegistry)(),
	  disabled: false,
	  readonly: false
	};
	
	exports.default = StringField;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 202 */
/*!**********************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/fields/ObjectField.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _utils = __webpack_require__(/*! ../../utils */ 172);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ObjectField = function (_Component) {
	  _inherits(ObjectField, _Component);
	
	  function ObjectField(props) {
	    _classCallCheck(this, ObjectField);
	
	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ObjectField).call(this, props));
	
	    _this.onPropertyChange = function (name) {
	      return function (value, options) {
	        _this.asyncSetState(_defineProperty({}, name, value), options);
	      };
	    };
	
	    _this.state = _this.getStateFromProps(props);
	    return _this;
	  }
	
	  _createClass(ObjectField, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState(this.getStateFromProps(nextProps));
	    }
	  }, {
	    key: "getStateFromProps",
	    value: function getStateFromProps(props) {
	      var schema = props.schema;
	      var formData = props.formData;
	      var registry = props.registry;
	
	      return (0, _utils.getDefaultFormState)(schema, formData, registry.definitions) || {};
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _utils.shouldRender)(this, nextProps, nextState);
	    }
	  }, {
	    key: "isRequired",
	    value: function isRequired(name) {
	      var schema = this.props.schema;
	      return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;
	    }
	  }, {
	    key: "asyncSetState",
	    value: function asyncSetState(state) {
	      var _this2 = this;
	
	      var options = arguments.length <= 1 || arguments[1] === undefined ? { validate: false } : arguments[1];
	
	      (0, _utils.setState)(this, state, function () {
	        _this2.props.onChange(_this2.state, options);
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this3 = this;
	
	      var _props = this.props;
	      var uiSchema = _props.uiSchema;
	      var errorSchema = _props.errorSchema;
	      var idSchema = _props.idSchema;
	      var name = _props.name;
	      var required = _props.required;
	      var disabled = _props.disabled;
	      var readonly = _props.readonly;
	      var _props$registry = this.props.registry;
	      var definitions = _props$registry.definitions;
	      var fields = _props$registry.fields;
	      var SchemaField = fields.SchemaField;
	      var TitleField = fields.TitleField;
	
	      var schema = (0, _utils.retrieveSchema)(this.props.schema, definitions);
	      var title = schema.title || name;
	      var orderedProperties = void 0;
	      try {
	        var properties = Object.keys(schema.properties);
	        orderedProperties = (0, _utils.orderProperties)(properties, uiSchema["ui:order"]);
	      } catch (err) {
	        return _react2.default.createElement(
	          "div",
	          null,
	          _react2.default.createElement(
	            "p",
	            { className: "config-error", style: { color: "red" } },
	            "Invalid ",
	            name || "root",
	            " object field configuration:",
	            _react2.default.createElement(
	              "em",
	              null,
	              err.message
	            ),
	            "."
	          ),
	          _react2.default.createElement(
	            "pre",
	            null,
	            JSON.stringify(schema)
	          )
	        );
	      }
	      return _react2.default.createElement(
	        "fieldset",
	        null,
	        title ? _react2.default.createElement(TitleField, {
	          id: idSchema.id + "__title",
	          title: title,
	          required: required }) : null,
	        schema.description ? _react2.default.createElement(
	          "p",
	          { className: "field-description" },
	          schema.description
	        ) : null,
	        orderedProperties.map(function (name, index) {
	          return _react2.default.createElement(SchemaField, { key: index,
	            name: name,
	            required: _this3.isRequired(name),
	            schema: schema.properties[name],
	            uiSchema: uiSchema[name],
	            errorSchema: errorSchema[name],
	            idSchema: idSchema[name],
	            formData: _this3.state[name],
	            onChange: _this3.onPropertyChange(name),
	            registry: _this3.props.registry,
	            disabled: disabled,
	            readonly: readonly });
	        })
	      );
	    }
	  }]);
	
	  return ObjectField;
	}(_react.Component);
	
	ObjectField.defaultProps = {
	  uiSchema: {},
	  errorSchema: {},
	  idSchema: {},
	  registry: (0, _utils.getDefaultRegistry)(),
	  required: false,
	  disabled: false,
	  readonly: false
	};
	
	
	if (process.env.NODE_ENV !== "production") {
	  ObjectField.propTypes = {
	    schema: _react.PropTypes.object.isRequired,
	    uiSchema: _react.PropTypes.object,
	    errorSchema: _react.PropTypes.object,
	    idSchema: _react.PropTypes.object,
	    onChange: _react.PropTypes.func.isRequired,
	    formData: _react.PropTypes.object,
	    required: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    readonly: _react.PropTypes.bool,
	    registry: _react.PropTypes.shape({
	      widgets: _react.PropTypes.objectOf(_react.PropTypes.func).isRequired,
	      fields: _react.PropTypes.objectOf(_react.PropTypes.func).isRequired,
	      definitions: _react.PropTypes.object.isRequired
	    })
	  };
	}
	
	exports.default = ObjectField;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/process/browser.js */ 4)))

/***/ },
/* 203 */
/*!***************************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/fields/UnsupportedField.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = UnsupportedField;
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function UnsupportedField(_ref) {
	  var schema = _ref.schema;
	
	  // XXX render json as string so dev can inspect faulty subschema
	  return _react2.default.createElement(
	    "div",
	    { className: "unsupported-field" },
	    "Unsupported field schema ",
	    JSON.stringify(schema, null, 2),
	    "."
	  );
	}

/***/ },
/* 204 */
/*!*************************************************************!*\
  !*** ./~/react-jsonschema-form/lib/components/ErrorList.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = ErrorList;
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function ErrorList(_ref) {
	  var errors = _ref.errors;
	
	  return _react2.default.createElement(
	    "div",
	    { className: "panel panel-danger errors" },
	    _react2.default.createElement(
	      "div",
	      { className: "panel-heading" },
	      _react2.default.createElement(
	        "h3",
	        { className: "panel-title" },
	        "Errors"
	      )
	    ),
	    _react2.default.createElement(
	      "ul",
	      { className: "list-group" },
	      errors.map(function (error, i) {
	        return _react2.default.createElement(
	          "li",
	          { key: i, className: "list-group-item text-danger" },
	          error.stack
	        );
	      })
	    )
	  );
	}

/***/ },
/* 205 */
/*!*************************************************!*\
  !*** ./~/react-jsonschema-form/lib/validate.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports.toErrorList = toErrorList;
	exports.default = validateFormData;
	
	var _jsonschema = __webpack_require__(/*! jsonschema */ 206);
	
	var _utils = __webpack_require__(/*! ./utils */ 172);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var RE_ERROR_ARRAY_PATH = /\[\d+]/g;
	
	function errorPropertyToPath(property) {
	  // Parse array indices, eg. "instance.level1.level2[2].level3"
	  // => ["instance", "level1", "level2", 2, "level3"]
	  return property.split(".").reduce(function (path, node) {
	    var match = node.match(RE_ERROR_ARRAY_PATH);
	    if (match) {
	      var nodeName = node.slice(0, node.indexOf("["));
	      var indices = match.map(function (str) {
	        return parseInt(str.slice(1, -1), 10);
	      });
	      path = path.concat(nodeName, indices);
	    } else {
	      path.push(node);
	    }
	    return path;
	  }, []);
	}
	
	function toErrorSchema(errors) {
	  // Transforms a jsonschema validation errors list:
	  // [
	  //   {property: "instance.level1.level2[2].level3", message: "err a"},
	  //   {property: "instance.level1.level2[2].level3", message: "err b"},
	  //   {property: "instance.level1.level2[4].level3", message: "err b"},
	  // ]
	  // Into an error tree:
	  // {
	  //   level1: {
	  //     level2: {
	  //       2: {level3: {errors: ["err a", "err b"]}},
	  //       4: {level3: {errors: ["err b"]}},
	  //     }
	  //   }
	  // };
	  if (!errors.length) {
	    return {};
	  }
	  return errors.reduce(function (errorSchema, error) {
	    var property = error.property;
	    var message = error.message;
	
	    var path = errorPropertyToPath(property);
	    var parent = errorSchema;
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;
	
	    try {
	      for (var _iterator = path.slice(1)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	        var segment = _step.value;
	
	        if (!(segment in parent)) {
	          parent[segment] = {};
	        }
	        parent = parent[segment];
	      }
	    } catch (err) {
	      _didIteratorError = true;
	      _iteratorError = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion && _iterator.return) {
	          _iterator.return();
	        }
	      } finally {
	        if (_didIteratorError) {
	          throw _iteratorError;
	        }
	      }
	    }
	
	    if (Array.isArray(parent.__errors)) {
	      // We store the list of errors for this node in a property named __errors
	      // to avoid name collision with a possible sub schema field named
	      // "errors" (see `validate.createErrorHandler`).
	      parent.__errors = parent.__errors.concat(message);
	    } else {
	      parent.__errors = [message];
	    }
	    return errorSchema;
	  }, {});
	}
	
	function toErrorList(errorSchema) {
	  var fieldName = arguments.length <= 1 || arguments[1] === undefined ? "root" : arguments[1];
	
	  // XXX: We should transform fieldName as a full field path string.
	  var errorList = [];
	  if ("__errors" in errorSchema) {
	    errorList = errorList.concat(errorSchema.__errors.map(function (stack) {
	      return {
	        stack: fieldName + ": " + stack
	      };
	    }));
	  }
	  return Object.keys(errorSchema).reduce(function (acc, key) {
	    if (key !== "__errors") {
	      acc = acc.concat(toErrorList(errorSchema[key], key));
	    }
	    return acc;
	  }, errorList);
	}
	
	function createErrorHandler(formData) {
	  var handler = {
	    // We store the list of errors for this node in a property named __errors
	    // to avoid name collision with a possible sub schema field named
	    // "errors" (see `utils.toErrorSchema`).
	    __errors: [],
	    addError: function addError(message) {
	      this.__errors.push(message);
	    }
	  };
	  if ((0, _utils.isObject)(formData)) {
	    return Object.keys(formData).reduce(function (acc, key) {
	      return _extends({}, acc, _defineProperty({}, key, createErrorHandler(formData[key])));
	    }, handler);
	  }
	  return handler;
	}
	
	function unwrapErrorHandler(errorHandler) {
	  return Object.keys(errorHandler).reduce(function (acc, key) {
	    if (key === "addError") {
	      return acc;
	    } else if (key === "__errors") {
	      return _extends({}, acc, _defineProperty({}, key, errorHandler[key]));
	    }
	    return _extends({}, acc, _defineProperty({}, key, unwrapErrorHandler(errorHandler[key])));
	  }, {});
	}
	
	/**
	 * This function processes the formData with a user `validate` contributed
	 * function, which receives the form data and an `errorHandler` object that
	 * will be used to add custom validation errors for each field.
	 */
	function validateFormData(formData, schema, customValidate) {
	  var _jsonValidate = (0, _jsonschema.validate)(formData, schema);
	
	  var errors = _jsonValidate.errors;
	
	  var errorSchema = toErrorSchema(errors);
	
	  if (typeof customValidate !== "function") {
	    return { errors: errors, errorSchema: errorSchema };
	  }
	
	  var errorHandler = customValidate(formData, createErrorHandler(formData));
	  var userErrorSchema = unwrapErrorHandler(errorHandler);
	  var newErrorSchema = (0, _utils.mergeObjects)(errorSchema, userErrorSchema, true);
	  // XXX: The errors list produced is not fully compliant with the format
	  // exposed by the jsonschema lib, which contains full field paths and other
	  // properties.
	  var newErrors = toErrorList(newErrorSchema);
	
	  return { errors: newErrors, errorSchema: newErrorSchema };
	}

/***/ },
/* 206 */
/*!***********************************!*\
  !*** ./~/jsonschema/lib/index.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Validator = module.exports.Validator = __webpack_require__(/*! ./validator */ 207);
	
	module.exports.ValidatorResult = __webpack_require__(/*! ./helpers */ 215).ValidatorResult;
	module.exports.ValidationError = __webpack_require__(/*! ./helpers */ 215).ValidationError;
	module.exports.SchemaError = __webpack_require__(/*! ./helpers */ 215).SchemaError;
	
	module.exports.validate = function (instance, schema, options) {
	  var v = new Validator();
	  return v.validate(instance, schema, options);
	};


/***/ },
/* 207 */
/*!***************************************!*\
  !*** ./~/jsonschema/lib/validator.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var urilib = __webpack_require__(/*! url */ 208);
	
	var attribute = __webpack_require__(/*! ./attribute */ 214);
	var helpers = __webpack_require__(/*! ./helpers */ 215);
	var ValidatorResult = helpers.ValidatorResult;
	var SchemaError = helpers.SchemaError;
	var SchemaContext = helpers.SchemaContext;
	
	/**
	 * Creates a new Validator object
	 * @name Validator
	 * @constructor
	 */
	var Validator = function Validator () {
	  // Allow a validator instance to override global custom formats or to have their
	  // own custom formats.
	  this.customFormats = Object.create(Validator.prototype.customFormats);
	  this.schemas = {};
	  this.unresolvedRefs = [];
	
	  // Use Object.create to make this extensible without Validator instances stepping on each other's toes.
	  this.types = Object.create(types);
	  this.attributes = Object.create(attribute.validators);
	};
	
	// Allow formats to be registered globally.
	Validator.prototype.customFormats = {};
	
	// Hint at the presence of a property
	Validator.prototype.schemas = null;
	Validator.prototype.types = null;
	Validator.prototype.attributes = null;
	Validator.prototype.unresolvedRefs = null;
	
	/**
	 * Adds a schema with a certain urn to the Validator instance.
	 * @param schema
	 * @param urn
	 * @return {Object}
	 */
	Validator.prototype.addSchema = function addSchema (schema, uri) {
	  if (!schema) {
	    return null;
	  }
	  var ourUri = uri || schema.id;
	  this.addSubSchema(ourUri, schema);
	  if (ourUri) {
	    this.schemas[ourUri] = schema;
	  }
	  return this.schemas[ourUri];
	};
	
	Validator.prototype.addSubSchema = function addSubSchema(baseuri, schema) {
	  if(!schema || typeof schema!='object') return;
	  // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined
	  if(schema.$ref){
	    var resolvedUri = urilib.resolve(baseuri, schema.$ref);
	    // Only mark unknown schemas as unresolved
	    if (this.schemas[resolvedUri] === undefined) {
	      this.schemas[resolvedUri] = null;
	      this.unresolvedRefs.push(resolvedUri);
	    }
	    return;
	  }
	  var ourUri = schema.id && urilib.resolve(baseuri, schema.id);
	  var ourBase = ourUri || baseuri;
	  if (ourUri) {
	    if(this.schemas[ourUri]){
	      if(!helpers.deepCompareStrict(this.schemas[ourUri], schema)){
	        throw new Error('Schema <'+schema+'> already exists with different definition');
	      }
	      return this.schemas[ourUri];
	    }
	    this.schemas[ourUri] = schema;
	    var documentUri = ourUri.replace(/^([^#]*)#$/, '$1');
	    this.schemas[documentUri] = schema;
	  }
	  this.addSubSchemaArray(ourBase, ((schema.items instanceof Array)?schema.items:[schema.items]));
	  this.addSubSchemaArray(ourBase, ((schema.extends instanceof Array)?schema.extends:[schema.extends]));
	  this.addSubSchema(ourBase, schema.additionalItems);
	  this.addSubSchemaObject(ourBase, schema.properties);
	  this.addSubSchema(ourBase, schema.additionalProperties);
	  this.addSubSchemaObject(ourBase, schema.definitions);
	  this.addSubSchemaObject(ourBase, schema.patternProperties);
	  this.addSubSchemaObject(ourBase, schema.dependencies);
	  this.addSubSchemaArray(ourBase, schema.disallow);
	  this.addSubSchemaArray(ourBase, schema.allOf);
	  this.addSubSchemaArray(ourBase, schema.anyOf);
	  this.addSubSchemaArray(ourBase, schema.oneOf);
	  this.addSubSchema(ourBase, schema.not);
	  return this.schemas[ourUri];
	};
	
	Validator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {
	  if(!(schemas instanceof Array)) return;
	  for(var i=0; i<schemas.length; i++){
	    this.addSubSchema(baseuri, schemas[i]);
	  }
	};
	
	Validator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {
	  if(!schemas || typeof schemas!='object') return;
	  for(var p in schemas){
	    this.addSubSchema(baseuri, schemas[p]);
	  }
	};
	
	
	
	/**
	 * Sets all the schemas of the Validator instance.
	 * @param schemas
	 */
	Validator.prototype.setSchemas = function setSchemas (schemas) {
	  this.schemas = schemas;
	};
	
	/**
	 * Returns the schema of a certain urn
	 * @param urn
	 */
	Validator.prototype.getSchema = function getSchema (urn) {
	  return this.schemas[urn];
	};
	
	/**
	 * Validates instance against the provided schema
	 * @param instance
	 * @param schema
	 * @param [options]
	 * @param [ctx]
	 * @return {Array}
	 */
	Validator.prototype.validate = function validate (instance, schema, options, ctx) {
	  if (!options) {
	    options = {};
	  }
	  var propertyName = options.propertyName || 'instance';
	  // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI
	  var base = urilib.resolve(options.base||'/', schema.id||'');
	  if(!ctx){
	    ctx = new SchemaContext(schema, options, propertyName, base, Object.create(this.schemas));
	    if (!ctx.schemas[base]) {
	      ctx.schemas[base] = schema;
	    }
	  }
	  if (schema) {
	    var result = this.validateSchema(instance, schema, options, ctx);
	    if (!result) {
	      throw new Error('Result undefined');
	    }
	    return result;
	  }
	  throw new SchemaError('no schema specified', schema);
	};
	
	/**
	 * Validates an instance against the schema (the actual work horse)
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @private
	 * @return {ValidatorResult}
	 */
	Validator.prototype.validateSchema = function validateSchema (instance, schema, options, ctx) {
	  var self = this;
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!schema) {
	    throw new Error("schema is undefined");
	  }
	
	  /**
	  * @param Object schema
	  * @return mixed schema uri or false
	  */
	  function shouldResolve(schema) {
	    var ref = (typeof schema === 'string') ? schema : schema.$ref;
	    if (typeof ref=='string') return ref;
	    return false;
	  }
	  /**
	  * @param Object schema
	  * @param SchemaContext ctx
	  * @returns Object schema or resolved schema
	  */
	  function resolve(schema, ctx) {
	    var ref;
	    if(ref = shouldResolve(schema)) {
	      return self.resolve(schema, ref, ctx).subschema;
	    }
	    return schema;
	  }
	
	  if (schema['extends']) {
	    if (schema['extends'] instanceof Array) {
	      schema['extends'].forEach(function (s) {
	        schema = helpers.deepMerge(schema, resolve(s, ctx));
	      });
	    } else {
	      schema = helpers.deepMerge(schema, resolve(schema['extends'], ctx));
	    }
	  }
	
	  var switchSchema;
	  if (switchSchema = shouldResolve(schema)) {
	    var resolved = this.resolve(schema, switchSchema, ctx);
	    var subctx = new SchemaContext(resolved.subschema, options, ctx.propertyPath, resolved.switchSchema, ctx.schemas);
	    return this.validateSchema(instance, resolved.subschema, options, subctx);
	  }
	
	  var skipAttributes = options && options.skipAttributes || [];
	  // Validate each schema attribute against the instance
	  for (var key in schema) {
	    if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {
	      var validatorErr = null;
	      var validator = self.attributes[key];
	      if (validator) {
	        validatorErr = validator.call(self, instance, schema, options, ctx);
	      } else if (options.allowUnknownAttributes === false) {
	        // This represents an error with the schema itself, not an invalid instance
	        throw new SchemaError("Unsupported attribute: " + key, schema);
	      }
	      if (validatorErr) {
	        result.importErrors(validatorErr);
	      }
	    }
	  }
	
	  if (typeof options.rewrite == 'function') {
	    var value = options.rewrite.call(this, instance, schema, options, ctx);
	    result.instance = value;
	  }
	  return result;
	};
	
	/**
	* @private
	* @param Object schema
	* @param Object switchSchema
	* @param SchemaContext ctx
	* @return Object resolved schemas {subschema:String, switchSchema: String}
	* @thorws SchemaError
	*/
	Validator.prototype.resolve = function resolve (schema, switchSchema, ctx) {
	  switchSchema = ctx.resolve(switchSchema);
	  // First see if the schema exists under the provided URI
	  if (ctx.schemas[switchSchema]) {
	    return {subschema: ctx.schemas[switchSchema], switchSchema: switchSchema};
	  }
	  // Else try walking the property pointer
	  var parsed = urilib.parse(switchSchema);
	  var fragment = parsed && parsed.hash;
	  var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);
	  if (!document || !ctx.schemas[document]) {
	    throw new SchemaError("no such schema <" + switchSchema + ">", schema);
	  }
	  var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));
	  if(subschema===undefined){
	    throw new SchemaError("no such schema " + fragment + " located in <" + document + ">", schema);
	  }
	  return {subschema: subschema, switchSchema: switchSchema};
	};
	
	/**
	 * Tests whether the instance if of a certain type.
	 * @private
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @param type
	 * @return {boolean}
	 */
	Validator.prototype.testType = function validateType (instance, schema, options, ctx, type) {
	  if (typeof this.types[type] == 'function') {
	    return this.types[type].call(this, instance);
	  }
	  if (type && typeof type == 'object') {
	    var res = this.validateSchema(instance, type, options, ctx);
	    return res === undefined || !(res && res.errors.length);
	  }
	  // Undefined or properties not on the list are acceptable, same as not being defined
	  return true;
	};
	
	var types = Validator.prototype.types = {};
	types.string = function testString (instance) {
	  return typeof instance == 'string';
	};
	types.number = function testNumber (instance) {
	  // isFinite returns false for NaN, Infinity, and -Infinity
	  return typeof instance == 'number' && isFinite(instance);
	};
	types.integer = function testInteger (instance) {
	  return (typeof instance == 'number') && instance % 1 === 0;
	};
	types.boolean = function testBoolean (instance) {
	  return typeof instance == 'boolean';
	};
	types.array = function testArray (instance) {
	  return instance instanceof Array;
	};
	types['null'] = function testNull (instance) {
	  return instance === null;
	};
	types.date = function testDate (instance) {
	  return instance instanceof Date;
	};
	types.any = function testAny (instance) {
	  return true;
	};
	types.object = function testObject (instance) {
	  // TODO: fix this - see #15
	  return instance && (typeof instance) === 'object' && !(instance instanceof Array) && !(instance instanceof Date);
	};
	
	module.exports = Validator;


/***/ },
/* 208 */
/*!**********************!*\
  !*** ./~/url/url.js ***!
  \**********************/
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var punycode = __webpack_require__(/*! punycode */ 209);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(/*! querystring */ 211);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};
	
	function isString(arg) {
	  return typeof arg === "string";
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 209 */
/*!**************************************!*\
  !*** ./~/url/~/punycode/punycode.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ 210)(module), (function() { return this; }())))

/***/ },
/* 210 */
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 211 */
/*!********************************!*\
  !*** ./~/querystring/index.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(/*! ./decode */ 212);
	exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ 213);


/***/ },
/* 212 */
/*!*********************************!*\
  !*** ./~/querystring/decode.js ***!
  \*********************************/
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};


/***/ },
/* 213 */
/*!*********************************!*\
  !*** ./~/querystring/encode.js ***!
  \*********************************/
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 214 */
/*!***************************************!*\
  !*** ./~/jsonschema/lib/attribute.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var helpers = __webpack_require__(/*! ./helpers */ 215);
	
	/** @type ValidatorResult */
	var ValidatorResult = helpers.ValidatorResult;
	/** @type SchemaError */
	var SchemaError = helpers.SchemaError;
	
	var attribute = {};
	
	attribute.ignoreProperties = {
	  // informative properties
	  'id': true,
	  'default': true,
	  'description': true,
	  'title': true,
	  // arguments to other properties
	  'exclusiveMinimum': true,
	  'exclusiveMaximum': true,
	  'additionalItems': true,
	  // special-handled properties
	  '$schema': true,
	  '$ref': true,
	  'extends': true
	};
	
	/**
	 * @name validators
	 */
	var validators = attribute.validators = {};
	
	/**
	 * Validates whether the instance if of a certain type
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {ValidatorResult|null}
	 */
	validators.type = function validateType (instance, schema, options, ctx) {
	  // Ignore undefined instances
	  if (instance === undefined) {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  var types = (schema.type instanceof Array) ? schema.type : [schema.type];
	  if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {
	    var list = types.map(function (v) {
	      return v.id && ('<' + v.id + '>') || (v+'');
	    });
	    result.addError({
	      name: 'type',
	      argument: list,
	      message: "is not of a type(s) " + list,
	    });
	  }
	  return result;
	};
	
	function testSchema(instance, options, ctx, schema){
	  return this.validateSchema(instance, schema, options, ctx).valid;
	}
	
	/**
	 * Validates whether the instance matches some of the given schemas
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {ValidatorResult|null}
	 */
	validators.anyOf = function validateAnyOf (instance, schema, options, ctx) {
	  // Ignore undefined instances
	  if (instance === undefined) {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!(schema.anyOf instanceof Array)){
	    throw new SchemaError("anyOf must be an array");
	  }
	  if (!schema.anyOf.some(testSchema.bind(this, instance, options, ctx))) {
	    var list = schema.anyOf.map(function (v, i) {
	      return (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';
	    });
	    result.addError({
	      name: 'anyOf',
	      argument: list,
	      message: "is not any of " + list.join(','),
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates whether the instance matches every given schema
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {String|null}
	 */
	validators.allOf = function validateAllOf (instance, schema, options, ctx) {
	  // Ignore undefined instances
	  if (instance === undefined) {
	    return null;
	  }
	  if (!(schema.allOf instanceof Array)){
	    throw new SchemaError("allOf must be an array");
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  var self = this;
	  schema.allOf.forEach(function(v, i){
	    var valid = self.validateSchema(instance, v, options, ctx);
	    if(!valid.valid){
	      var msg = (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';
	      result.addError({
	        name: 'allOf',
	        argument: { id: msg, length: valid.errors.length, valid: valid },
	        message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:',
	      });
	      result.importErrors(valid);
	    }
	  });
	  return result;
	};
	
	/**
	 * Validates whether the instance matches exactly one of the given schemas
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {String|null}
	 */
	validators.oneOf = function validateOneOf (instance, schema, options, ctx) {
	  // Ignore undefined instances
	  if (instance === undefined) {
	    return null;
	  }
	  if (!(schema.oneOf instanceof Array)){
	    throw new SchemaError("oneOf must be an array");
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  var count = schema.oneOf.filter(testSchema.bind(this, instance, options, ctx)).length;
	  var list = schema.oneOf.map(function (v, i) {
	    return (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';
	  });
	  if (count!==1) {
	    result.addError({
	      name: 'oneOf',
	      argument: list,
	      message: "is not exactly one from " + list.join(','),
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates properties
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {String|null|ValidatorResult}
	 */
	validators.properties = function validateProperties (instance, schema, options, ctx) {
	  if(instance === undefined || !(instance instanceof Object)) return;
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  var properties = schema.properties || {};
	  for (var property in properties) {
	    var prop = (instance || undefined) && instance[property];
	    var res = this.validateSchema(prop, properties[property], options, ctx.makeChild(properties[property], property));
	    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;
	    result.importErrors(res);
	  }
	  return result;
	};
	
	/**
	 * Test a specific property within in instance against the additionalProperties schema attribute
	 * This ignores properties with definitions in the properties schema attribute, but no other attributes.
	 * If too many more types of property-existance tests pop up they may need their own class of tests (like `type` has)
	 * @private
	 * @return {boolean}
	 */
	function testAdditionalProperty (instance, schema, options, ctx, property, result) {
	  if (schema.properties && schema.properties[property] !== undefined) {
	    return;
	  }
	  if (schema.additionalProperties === false) {
	    result.addError({
	      name: 'additionalProperties',
	      argument: property,
	      message: "additionalProperty " + JSON.stringify(property) + " exists in instance when not allowed",
	    });
	  } else {
	    var additionalProperties = schema.additionalProperties || {};
	    var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));
	    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;
	    result.importErrors(res);
	  }
	}
	
	/**
	 * Validates patternProperties
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {String|null|ValidatorResult}
	 */
	validators.patternProperties = function validatePatternProperties (instance, schema, options, ctx) {
	  if(instance === undefined) return;
	  if(!this.types.object(instance)) return;
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  var patternProperties = schema.patternProperties || {};
	
	  for (var property in instance) {
	    var test = true;
	    for (var pattern in patternProperties) {
	      var expr = new RegExp(pattern);
	      if (!expr.test(property)) {
	        continue;
	      }
	      test = false;
	      var res = this.validateSchema(instance[property], patternProperties[pattern], options, ctx.makeChild(patternProperties[pattern], property));
	      if(res.instance !== result.instance[property]) result.instance[property] = res.instance;
	      result.importErrors(res);
	    }
	    if (test) {
	      testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
	    }
	  }
	
	  return result;
	};
	
	/**
	 * Validates additionalProperties
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {String|null|ValidatorResult}
	 */
	validators.additionalProperties = function validateAdditionalProperties (instance, schema, options, ctx) {
	  if(instance === undefined) return;
	  if(!this.types.object(instance)) return;
	  // if patternProperties is defined then we'll test when that one is called instead
	  if (schema.patternProperties) {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  for (var property in instance) {
	    testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
	  }
	  return result;
	};
	
	/**
	 * Validates whether the instance value is at least of a certain length, when the instance value is a string.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.minProperties = function validateMinProperties (instance, schema, options, ctx) {
	  if (!instance || typeof instance !== 'object') {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  var keys = Object.keys(instance);
	  if (!(keys.length >= schema.minProperties)) {
	    result.addError({
	      name: 'minProperties',
	      argument: schema.minProperties,
	      message: "does not meet minimum property length of " + schema.minProperties,
	    })
	  }
	  return result;
	};
	
	/**
	 * Validates whether the instance value is at most of a certain length, when the instance value is a string.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.maxProperties = function validateMaxProperties (instance, schema, options, ctx) {
	  if (!instance || typeof instance !== 'object') {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  var keys = Object.keys(instance);
	  if (!(keys.length <= schema.maxProperties)) {
	    result.addError({
	      name: 'maxProperties',
	      argument: schema.maxProperties,
	      message: "does not meet maximum property length of " + schema.maxProperties,
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates items when instance is an array
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {String|null|ValidatorResult}
	 */
	validators.items = function validateItems (instance, schema, options, ctx) {
	  if (!(instance instanceof Array)) {
	    return null;
	  }
	  var self = this;
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (instance === undefined || !schema.items) {
	    return result;
	  }
	  instance.every(function (value, i) {
	    var items = (schema.items instanceof Array) ? (schema.items[i] || schema.additionalItems) : schema.items;
	    if (items === undefined) {
	      return true;
	    }
	    if (items === false) {
	      result.addError({
	        name: 'items',
	        message: "additionalItems not permitted",
	      });
	      return false;
	    }
	    var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));
	    if(res.instance !== result.instance[i]) result.instance[i] = res.instance;
	    result.importErrors(res);
	    return true;
	  });
	  return result;
	};
	
	/**
	 * Validates minimum and exclusiveMinimum when the type of the instance value is a number.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.minimum = function validateMinimum (instance, schema, options, ctx) {
	  if (typeof instance !== 'number') {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  var valid = true;
	  if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {
	    valid = instance > schema.minimum;
	  } else {
	    valid = instance >= schema.minimum;
	  }
	  if (!valid) {
	    result.addError({
	      name: 'minimum',
	      argument: schema.minimum,
	      message: "must have a minimum value of " + schema.minimum,
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates maximum and exclusiveMaximum when the type of the instance value is a number.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.maximum = function validateMaximum (instance, schema, options, ctx) {
	  if (typeof instance !== 'number') {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  var valid;
	  if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {
	    valid = instance < schema.maximum;
	  } else {
	    valid = instance <= schema.maximum;
	  }
	  if (!valid) {
	    result.addError({
	      name: 'maximum',
	      argument: schema.maximum,
	      message: "must have a maximum value of " + schema.maximum,
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates divisibleBy when the type of the instance value is a number.
	 * Of course, this is susceptible to floating point error since it compares the floating points
	 * and not the JSON byte sequences to arbitrary precision.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.divisibleBy = function validateDivisibleBy (instance, schema, options, ctx) {
	  if (typeof instance !== 'number') {
	    return null;
	  }
	
	  if (schema.divisibleBy == 0) {
	    throw new SchemaError("divisibleBy cannot be zero");
	  }
	
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (instance / schema.divisibleBy % 1) {
	    result.addError({
	      name: 'divisibleBy',
	      argument: schema.divisibleBy,
	      message: "is not divisible by (multiple of) " + JSON.stringify(schema.divisibleBy),
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates divisibleBy when the type of the instance value is a number.
	 * Of course, this is susceptible to floating point error since it compares the floating points
	 * and not the JSON byte sequences to arbitrary precision.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.multipleOf = function validateMultipleOf (instance, schema, options, ctx) {
	  if (typeof instance !== 'number') {
	    return null;
	  }
	
	  if (schema.multipleOf == 0) {
	    throw new SchemaError("multipleOf cannot be zero");
	  }
	
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (instance / schema.multipleOf % 1) {
	    result.addError({
	      name: 'multipleOf',
	      argument:  schema.multipleOf,
	      message: "is not a multiple of (divisible by) " + JSON.stringify(schema.multipleOf),
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates whether the instance value is present.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.required = function validateRequired (instance, schema, options, ctx) {
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (instance === undefined && schema.required === true) {
	    result.addError({
	      name: 'required',
	      message: "is required"
	    });
	  } else if (instance && typeof instance==='object' && Array.isArray(schema.required)) {
	    schema.required.forEach(function(n){
	      if(instance[n]===undefined){
	        result.addError({
	          name: 'required',
	          argument: n,
	          message: "requires property " + JSON.stringify(n),
	        });
	      }
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates whether the instance value matches the regular expression, when the instance value is a string.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.pattern = function validatePattern (instance, schema, options, ctx) {
	  if (typeof instance !== 'string') {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!instance.match(schema.pattern)) {
	    result.addError({
	      name: 'pattern',
	      argument: schema.pattern,
	      message: "does not match pattern " + JSON.stringify(schema.pattern),
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates whether the instance value is of a certain defined format or a custom
	 * format.
	 * The following formats are supported for string types:
	 *   - date-time
	 *   - date
	 *   - time
	 *   - ip-address
	 *   - ipv6
	 *   - uri
	 *   - color
	 *   - host-name
	 *   - alpha
	 *   - alpha-numeric
	 *   - utc-millisec
	 * @param instance
	 * @param schema
	 * @param [options]
	 * @param [ctx]
	 * @return {String|null}
	 */
	validators.format = function validateFormat (instance, schema, options, ctx) {
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {
	    result.addError({
	      name: 'format',
	      argument: schema.format,
	      message: "does not conform to the " + JSON.stringify(schema.format) + " format",
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates whether the instance value is at least of a certain length, when the instance value is a string.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.minLength = function validateMinLength (instance, schema, options, ctx) {
	  if (!(typeof instance === 'string')) {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!(instance.length >= schema.minLength)) {
	    result.addError({
	      name: 'minLength',
	      argument: schema.minLength,
	      message: "does not meet minimum length of " + schema.minLength,
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates whether the instance value is at most of a certain length, when the instance value is a string.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.maxLength = function validateMaxLength (instance, schema, options, ctx) {
	  if (!(typeof instance === 'string')) {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!(instance.length <= schema.maxLength)) {
	    result.addError({
	      name: 'maxLength',
	      argument: schema.maxLength,
	      message: "does not meet maximum length of " + schema.maxLength,
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates whether instance contains at least a minimum number of items, when the instance is an Array.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.minItems = function validateMinItems (instance, schema, options, ctx) {
	  if (!(instance instanceof Array)) {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!(instance.length >= schema.minItems)) {
	    result.addError({
	      name: 'minItems',
	      argument: schema.minItems,
	      message: "does not meet minimum length of " + schema.minItems,
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.
	 * @param instance
	 * @param schema
	 * @return {String|null}
	 */
	validators.maxItems = function validateMaxItems (instance, schema, options, ctx) {
	  if (!(instance instanceof Array)) {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!(instance.length <= schema.maxItems)) {
	    result.addError({
	      name: 'maxItems',
	      argument: schema.maxItems,
	      message: "does not meet maximum length of " + schema.maxItems,
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates that every item in an instance array is unique, when instance is an array
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {String|null|ValidatorResult}
	 */
	validators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!(instance instanceof Array)) {
	    return result;
	  }
	  function testArrays (v, i, a) {
	    for (var j = i + 1; j < a.length; j++) if (helpers.deepCompareStrict(v, a[j])) {
	      return false;
	    }
	    return true;
	  }
	  if (!instance.every(testArrays)) {
	    result.addError({
	      name: 'uniqueItems',
	      message: "contains duplicate item",
	    });
	  }
	  return result;
	};
	
	/**
	 * Deep compares arrays for duplicates
	 * @param v
	 * @param i
	 * @param a
	 * @private
	 * @return {boolean}
	 */
	function testArrays (v, i, a) {
	  var j, len = a.length;
	  for (j = i + 1, len; j < len; j++) {
	    if (helpers.deepCompareStrict(v, a[j])) {
	      return false;
	    }
	  }
	  return true;
	}
	
	/**
	 * Validates whether there are no duplicates, when the instance is an Array.
	 * @param instance
	 * @return {String|null}
	 */
	validators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {
	  if (!(instance instanceof Array)) {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!instance.every(testArrays)) {
	    result.addError({
	      name: 'uniqueItems',
	      message: "contains duplicate item",
	    });
	  }
	  return result;
	};
	
	/**
	 * Validate for the presence of dependency properties, if the instance is an object.
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {null|ValidatorResult}
	 */
	validators.dependencies = function validateDependencies (instance, schema, options, ctx) {
	  if (!instance || typeof instance != 'object') {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  for (var property in schema.dependencies) {
	    if (instance[property] === undefined) {
	      continue;
	    }
	    var dep = schema.dependencies[property];
	    var childContext = ctx.makeChild(dep, property);
	    if (typeof dep == 'string') {
	      dep = [dep];
	    }
	    if (dep instanceof Array) {
	      dep.forEach(function (prop) {
	        if (instance[prop] === undefined) {
	          result.addError({
	            // FIXME there's two different "dependencies" errors here with slightly different outputs
	            // Can we make these the same? Or should we create different error types?
	            name: 'dependencies',
	            argument: childContext.propertyPath,
	            message: "property " + prop + " not found, required by " + childContext.propertyPath,
	          });
	        }
	      });
	    } else {
	      var res = this.validateSchema(instance, dep, options, childContext);
	      if(result.instance !== res.instance) result.instance = res.instance;
	      if (res && res.errors.length) {
	        result.addError({
	          name: 'dependencies',
	          argument: childContext.propertyPath,
	          message: "does not meet dependency required by " + childContext.propertyPath,
	        });
	        result.importErrors(res);
	      }
	    }
	  }
	  return result;
	};
	
	/**
	 * Validates whether the instance value is one of the enumerated values.
	 *
	 * @param instance
	 * @param schema
	 * @return {ValidatorResult|null}
	 */
	validators['enum'] = function validateEnum (instance, schema, options, ctx) {
	  if (!(schema['enum'] instanceof Array)) {
	    throw new SchemaError("enum expects an array", schema);
	  }
	  if (instance === undefined) {
	    return null;
	  }
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) {
	    result.addError({
	      name: 'enum',
	      argument: schema['enum'],
	      message: "is not one of enum values: " + schema['enum'].join(','),
	    });
	  }
	  return result;
	};
	
	/**
	 * Validates whether the instance if of a prohibited type.
	 * @param instance
	 * @param schema
	 * @param options
	 * @param ctx
	 * @return {null|ValidatorResult}
	 */
	validators.not = validators.disallow = function validateNot (instance, schema, options, ctx) {
	  var self = this;
	  if(instance===undefined) return null;
	  var result = new ValidatorResult(instance, schema, options, ctx);
	  var notTypes = schema.not || schema.disallow;
	  if(!notTypes) return null;
	  if(!(notTypes instanceof Array)) notTypes=[notTypes];
	  notTypes.forEach(function (type) {
	    if (self.testType(instance, schema, options, ctx, type)) {
	      var schemaId = type && type.id && ('<' + type.id + '>') || type;
	      result.addError({
	        name: 'not',
	        argument: schemaId,
	        message: "is of prohibited type " + schemaId,
	      });
	    }
	  });
	  return result;
	};
	
	module.exports = attribute;


/***/ },
/* 215 */
/*!*************************************!*\
  !*** ./~/jsonschema/lib/helpers.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var uri = __webpack_require__(/*! url */ 208);
	
	var ValidationError = exports.ValidationError = function ValidationError (message, instance, schema, propertyPath, name, argument) {
	  if (propertyPath) {
	    this.property = propertyPath;
	  }
	  if (message) {
	    this.message = message;
	  }
	  if (schema) {
	    if (schema.id) {
	      this.schema = schema.id;
	    } else {
	      this.schema = schema;
	    }
	  }
	  if (instance) {
	    this.instance = instance;
	  }
	  this.name = name;
	  this.argument = argument;
	  this.stack = this.toString();
	};
	
	ValidationError.prototype.toString = function toString() {
	  return this.property + ' ' + this.message;
	};
	
	var ValidatorResult = exports.ValidatorResult = function ValidatorResult(instance, schema, options, ctx) {
	  this.instance = instance;
	  this.schema = schema;
	  this.propertyPath = ctx.propertyPath;
	  this.errors = [];
	  this.throwError = options && options.throwError;
	  this.disableFormat = options && options.disableFormat === true;
	};
	
	ValidatorResult.prototype.addError = function addError(detail) {
	  var err;
	  if (typeof detail == 'string') {
	    err = new ValidationError(detail, this.instance, this.schema, this.propertyPath);
	  } else {
	    if (!detail) throw new Error('Missing error detail');
	    if (!detail.message) throw new Error('Missing error message');
	    if (!detail.name) throw new Error('Missing validator type');
	    err = new ValidationError(detail.message, this.instance, this.schema, this.propertyPath, detail.name, detail.argument);
	  }
	
	  if (this.throwError) {
	    throw err;
	  }
	  this.errors.push(err);
	  return err;
	};
	
	ValidatorResult.prototype.importErrors = function importErrors(res) {
	  if (typeof res == 'string' || (res && res.validatorType)) {
	    this.addError(res);
	  } else if (res && res.errors) {
	    var errs = this.errors;
	    res.errors.forEach(function (v) {
	      errs.push(v);
	    });
	  }
	};
	
	ValidatorResult.prototype.toString = function toString(res) {
	  return this.errors.map(function(v,i){ return i+': '+v.toString()+'\n'; }).join('');
	};
	
	Object.defineProperty(ValidatorResult.prototype, "valid", { get: function() {
	  return !this.errors.length;
	} });
	
	/**
	 * Describes a problem with a Schema which prevents validation of an instance
	 * @name SchemaError
	 * @constructor
	 */
	var SchemaError = exports.SchemaError = function SchemaError (msg, schema) {
	  this.message = msg;
	  this.schema = schema;
	  Error.call(this, msg);
	  Error.captureStackTrace(this, SchemaError);
	};
	SchemaError.prototype = Object.create(Error.prototype,
	  { constructor: {value: SchemaError, enumerable: false}
	  , name: {value: 'SchemaError', enumerable: false}
	  });
	
	var SchemaContext = exports.SchemaContext = function SchemaContext (schema, options, propertyPath, base, schemas) {
	  this.schema = schema;
	  this.options = options;
	  this.propertyPath = propertyPath;
	  this.base = base;
	  this.schemas = schemas;
	};
	
	SchemaContext.prototype.resolve = function resolve (target) {
	  return uri.resolve(this.base, target);
	};
	
	SchemaContext.prototype.makeChild = function makeChild(schema, propertyName){
	  var propertyPath = (propertyName===undefined) ? this.propertyPath : this.propertyPath+makeSuffix(propertyName);
	  var base = uri.resolve(this.base, schema.id||'');
	  var ctx = new SchemaContext(schema, this.options, propertyPath, base, Object.create(this.schemas));
	  if(schema.id && !ctx.schemas[base]){
	    ctx.schemas[base] = schema;
	  }
	  return ctx;
	}
	
	var FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {
	  'date-time': /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,
	  'date': /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,
	  'time': /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,
	
	  'email': /^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,
	  'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
	  'ipv6': /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
	  'uri': /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/,
	
	  'color': /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,
	
	  // hostname regex from: http://stackoverflow.com/a/1420225/5628
	  'hostname': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
	  'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
	
	  'alpha': /^[a-zA-Z]+$/,
	  'alphanumeric': /^[a-zA-Z0-9]+$/,
	  'utc-millisec': function (input) {
	    return (typeof input === 'string') && parseFloat(input) === parseInt(input, 10) && !isNaN(input);
	  },
	  'regex': function (input) {
	    var result = true;
	    try {
	      new RegExp(input);
	    } catch (e) {
	      result = false;
	    }
	    return result;
	  },
	  'style': /\s*(.+?):\s*([^;]+);?/g,
	  'phone': /^\+(?:[0-9] ?){6,14}[0-9]$/
	};
	
	FORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;
	FORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;
	FORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];
	
	exports.isFormat = function isFormat (input, format, validator) {
	  if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {
	    if (FORMAT_REGEXPS[format] instanceof RegExp) {
	      return FORMAT_REGEXPS[format].test(input);
	    }
	    if (typeof FORMAT_REGEXPS[format] === 'function') {
	      return FORMAT_REGEXPS[format](input);
	    }
	  } else if (validator && validator.customFormats &&
	      typeof validator.customFormats[format] === 'function') {
	    return validator.customFormats[format](input);
	  }
	  return true;
	};
	
	var makeSuffix = exports.makeSuffix = function makeSuffix (key) {
	  key = key.toString();
	  // This function could be capable of outputting valid a ECMAScript string, but the
	  // resulting code for testing which form to use would be tens of thousands of characters long
	  // That means this will use the name form for some illegal forms
	  if (!key.match(/[.\s\[\]]/) && !key.match(/^[\d]/)) {
	    return '.' + key;
	  }
	  if (key.match(/^\d+$/)) {
	    return '[' + key + ']';
	  }
	  return '[' + JSON.stringify(key) + ']';
	};
	
	exports.deepCompareStrict = function deepCompareStrict (a, b) {
	  if (typeof a !== typeof b) {
	    return false;
	  }
	  if (a instanceof Array) {
	    if (!(b instanceof Array)) {
	      return false;
	    }
	    if (a.length !== b.length) {
	      return false;
	    }
	    return a.every(function (v, i) {
	      return deepCompareStrict(a[i], b[i]);
	    });
	  }
	  if (typeof a === 'object') {
	    if (!a || !b) {
	      return a === b;
	    }
	    var aKeys = Object.keys(a);
	    var bKeys = Object.keys(b);
	    if (aKeys.length !== bKeys.length) {
	      return false;
	    }
	    return aKeys.every(function (v) {
	      return deepCompareStrict(a[v], b[v]);
	    });
	  }
	  return a === b;
	};
	
	module.exports.deepMerge = function deepMerge (target, src) {
	  var array = Array.isArray(src);
	  var dst = array && [] || {};
	
	  if (array) {
	    target = target || [];
	    dst = dst.concat(target);
	    src.forEach(function (e, i) {
	      if (typeof e === 'object') {
	        dst[i] = deepMerge(target[i], e)
	      } else {
	        if (target.indexOf(e) === -1) {
	          dst.push(e)
	        }
	      }
	    });
	  } else {
	    if (target && typeof target === 'object') {
	      Object.keys(target).forEach(function (key) {
	        dst[key] = target[key];
	      });
	    }
	    Object.keys(src).forEach(function (key) {
	      if (typeof src[key] !== 'object' || !src[key]) {
	        dst[key] = src[key];
	      }
	      else {
	        if (!target[key]) {
	          dst[key] = src[key];
	        } else {
	          dst[key] = deepMerge(target[key], src[key])
	        }
	      }
	    });
	  }
	
	  return dst;
	};
	
	/**
	 * Validates instance against the provided schema
	 * Implements URI+JSON Pointer encoding, e.g. "%7e"="~0"=>"~", "~1"="%2f"=>"/"
	 * @param o
	 * @param s The path to walk o along
	 * @return any
	 */
	exports.objectGetPath = function objectGetPath(o, s) {
	  var parts = s.split('/').slice(1);
	  var k;
	  while (typeof (k=parts.shift()) == 'string') {
	    var n = decodeURIComponent(k.replace(/~0/,'~').replace(/~1/g,'/'));
	    if (!(n in o)) return;
	    o = o[n];
	  }
	  return o;
	};
	
	/**
	 * Accept an Array of property names and return a JSON Pointer URI fragment
	 * @param Array a
	 * @return {String}
	 */
	exports.encodePath = function encodePointer(a){
		// ~ must be encoded explicitly because hacks
		// the slash is encoded by encodeURIComponent
		return a.map(function(v){ return '/'+encodeURIComponent(v).replace(/~/g,'%7E'); }).join('');
	};


/***/ },
/* 216 */
/*!*********************************!*\
  !*** ./~/jquery/dist/jquery.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.3
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-04-05T19:26Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];
	
	var document = window.document;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var support = {};
	
	
	
	var
		version = "2.2.3",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},
	
		isPlainObject: function( obj ) {
			var key;
	
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;
	
			code = jQuery.trim( code );
	
			if ( code ) {
	
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
	
					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval
	
					indirect( code );
				}
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {
	
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
	
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add( function() {
	
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}
	
			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	} );
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
	
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );
	
			} else {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		register: function( owner, initial ) {
			var value = initial || {};
	
			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;
	
			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {
	
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				stored = this.get( owner, key );
	
				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key === undefined ) {
				this.register( owner );
	
			} else {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
	
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
	
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}
	
				i = name.length;
	
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data, camelKey;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||
	
						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );
	
					if ( data !== undefined ) {
						return data;
					}
	
					camelKey = jQuery.camelCase( key );
	
					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {
	
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );
	
					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );
	
					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
	
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([\w:-]+)/ );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}
	
			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	
		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
	
		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,
	
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	
	
	var iframe,
		elemdisplay = {
	
			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			display = jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var documentElement = document.documentElement;
	
	
	
	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =
	
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
		}
	
		jQuery.extend( support, {
			pixelPosition: function() {
	
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
	
				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
	
				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {
	
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );
	
				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
	
					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );
	
				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );
	
				documentElement.removeChild( container );
				div.removeChild( marginDiv );
	
				return ret;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;
	
		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}
	
		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {
	
			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
	
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );
	
				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
	
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
	
			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
	
			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
	
			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}
	
			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
	
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
	
		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
	
						// Set corresponding property to false
						elem[ propName ] = false;
					}
	
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// Handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
	
					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the 1.x branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);
	
			jQuery.event.trigger( e, null, elem );
	
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// The jqXHR state
				state = 0,
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
	
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
	
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );
	
	
	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {
	
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
	
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	return jQuery;
	}));


/***/ },
/* 217 */
/*!******************************!*\
  !*** ./static/validation.js ***!
  \******************************/
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = validate;
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function validate(formData, errors) {
	    function runChecks(validator, paths, errorDisplayIndex) {
	        var subObj = arguments.length <= 3 || arguments[3] === undefined ? function (x) {
	            return x;
	        } : arguments[3];
	
	        var field = function field(f) {
	            return typeof f === 'string' ? function (o) {
	                return o[f];
	            } : f;
	        };
	        paths = paths.map(field);
	        subObj = field(subObj);
	        var data = paths.map(function (path) {
	            return path(subObj(formData));
	        });
	        var formErrors = paths[errorDisplayIndex](subObj(errors));
	        validator.apply(undefined, _toConsumableArray(data)).forEach(function (e) {
	            return formErrors.addError(e);
	        });
	    }
	
	    runChecks(validateOrganismPart, ['Organism', 'Organism_Part'], 1, 'Sample_Information');
	
	    runChecks(validateGrowthConditions, ['Sample_Growth_Conditions', 'Organism'], 0, 'Sample_Information');
	
	    runChecks(validateMaldiMatrix, [function (x) {
	        return x.Sample_Preparation.MALDI_Matrix;
	    }, function (x) {
	        return x.MS_Analysis.Ionisation_Source;
	    }], 0);
	
	    runChecks(validateMaldiMatrixApplication, [function (x) {
	        return x.Sample_Preparation.MALDI_Matrix_Application;
	    }, function (x) {
	        return x.MS_Analysis.Ionisation_Source;
	    }], 0);
	
	    return errors;
	}
	
	function validateOrganismPart(organism, organismPart) {
	    var errors = [];
	    var plants = new Set(["Arabidopsis_thaliana_(thale_cress)"]);
	    var notPlants = new Set(["Homo_sapiens_(Human)", "Mus_musculus_(Mouse)", "Rattus_norvegicus_(Rat)", "Danio_rerio_(Zebrafish)"]);
	    var plantParts = new Set(["Leaf", "Stem", "Root"]);
	    var notPlantParts = new Set(["Brain", "Kidney", "Eye", "Liver", "Ovary", "Pancreas", "Lung", "Lymph_Node", "Testis"]);
	    if (plants.has(organism) && notPlantParts.has(organismPart) || notPlants.has(organism) && plantParts.has(organismPart)) {
	        errors = ["is not part of " + organism];
	    }
	    return errors;
	}
	
	function validateGrowthConditions(growthCondition, organism) {
	    var errors = [];
	    var notHumanConditions = new Set(["Cultured_2D", "Cultured_3D", "Caged"]);
	    var notCulturable = new Set(["Homo_sapiens_(Human)", "Mus_musculus_(Mouse)", "Rattus_norvegicus_(Rat)", "Danio_rerio_(Zebrafish)", "Arabidopsis_thaliana_(thale_cress)"]);
	    var notCageable = new Set(["Homo_sapiens_(Human)", "Danio_rerio_(Zebrafish)", "Arabidopsis_thaliana_(thale_cress)"]);
	
	    if (organism == "Homo_sapiens_(Human)" && notHumanConditions.has(growthCondition) || growthCondition.startsWith("Cultured") && notCulturable.has(organism) || growthCondition == "Caged" && notCageable.has(organism)) {
	        errors.push("not applicable for " + organism);
	    }
	    return errors;
	}
	
	function validateMaldiMatrix(matrix, source) {
	    if (source !== "MALDI" && matrix !== "none") {
	        return ["Cannot have matrix without MALDI as the ionization source"];
	    } else {
	        return [];
	    }
	}
	
	function validateMaldiMatrixApplication(application, source) {
	    if (source !== "MALDI" && application !== "none") {
	        return ["Cannot have matrix application without MALDI as the ionization source"];
	    } else {
	        return [];
	    }
	}

/***/ },
/* 218 */
/*!**************************!*\
  !*** ./static/upload.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(/*! react */ 2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _s = __webpack_require__(/*! fine-uploader/lib/s3 */ 219);
	
	var _s2 = _interopRequireDefault(_s);
	
	var _jquery = __webpack_require__(/*! jquery */ 216);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	__webpack_require__(/*! fine-uploader/lib/rows.css */ 221);
	
	var _jsCookie = __webpack_require__(/*! js-cookie */ 228);
	
	var _jsCookie2 = _interopRequireDefault(_jsCookie);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var S3FineUploader = function (_React$Component) {
	    _inherits(S3FineUploader, _React$Component);
	
	    function S3FineUploader(props) {
	        _classCallCheck(this, S3FineUploader);
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(S3FineUploader).call(this, props));
	
	        _this._uploader = null;
	        return _this;
	    }
	
	    _createClass(S3FineUploader, [{
	        key: 'uploadValidate',
	        value: function uploadValidate() {
	            var fnames = this._uploader.getUploads().map(function (x) {
	                return x.name;
	            });
	
	            if (fnames.length < 2) {
	                alert(_s2.default.format("Please choose 2 files for upload"));
	                return false;
	            }
	
	            if (fnames[0].split('.').slice(0, -1)[0] != fnames[1].split('.').slice(0, -1)[0]) {
	                alert(_s2.default.format("Please choose 2 files with the same base name but different extensions"));
	                return false;
	            }
	
	            return true;
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this2 = this;
	
	            this._uploader = new _s2.default.s3.FineUploader({
	                element: this.refs.s3fu,
	                template: 'qq-template-manual-trigger',
	                request: {
	                    endpoint: 'sm-engine-upload.s3.amazonaws.com',
	                    accessKey: 'AKIAJN65WGJHXJQXMIEA'
	                },
	                autoUpload: false,
	                objectProperties: {
	                    key: function key(id) {
	                        return _jsCookie2.default.get("session_id") + '/' + _this2._uploader.getFile(id).name;
	                    }
	                },
	                signature: {
	                    endpoint: '/s3/sign'
	                },
	                iframeSupport: {
	                    localBlankPagePath: "/server/success.html"
	                },
	                multiple: true,
	                cors: {
	                    expected: true
	                },
	                chunking: {
	                    enabled: true,
	                    concurrent: {
	                        enabled: true
	                    }
	                },
	                resume: {
	                    enabled: true
	                },
	                validation: {
	                    itemLimit: 2,
	                    allowedExtensions: ["imzML", "ibd"]
	                },
	                callbacks: {
	                    onComplete: function onComplete(id, name, response) {
	                        if (response.success) {
	                            console.log('Uploaded: ' + name);
	                        } else console.log('Failed: ' + name);
	                    }
	                }
	            });
	
	            (0, _jquery2.default)('#trigger-upload').click(function () {
	                if (_this2.uploadValidate()) _this2._uploader.uploadStoredFiles();
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { ref: 's3fu' },
	                'Upload!'
	            );
	        }
	    }]);
	
	    return S3FineUploader;
	}(_react2.default.Component);
	
	exports.default = S3FineUploader;

/***/ },
/* 219 */
/*!***********************************!*\
  !*** ./~/fine-uploader/lib/s3.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = __webpack_require__(/*! ../s3.fine-uploader/s3.fine-uploader */ 220);


/***/ },
/* 220 */
/*!**************************************************************!*\
  !*** ./~/fine-uploader/s3.fine-uploader/s3.fine-uploader.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	* Fine Uploader
	*
	* Copyright 2013-present, Widen Enterprises, Inc.
	*
	* Version: 5.9.0
	*
	* Homepage: http://fineuploader.com
	*
	* Repository: git://github.com/FineUploader/fine-uploader.git
	*
	* Licensed only under the MIT license (http://fineuploader.com/licensing).
	*/ 
	
	
	(function(global) {
	/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */
	/* jshint -W079 */
	var qq = function(element) {
	    "use strict";
	
	    return {
	        hide: function() {
	            element.style.display = "none";
	            return this;
	        },
	
	        /** Returns the function which detaches attached event */
	        attach: function(type, fn) {
	            if (element.addEventListener) {
	                element.addEventListener(type, fn, false);
	            } else if (element.attachEvent) {
	                element.attachEvent("on" + type, fn);
	            }
	            return function() {
	                qq(element).detach(type, fn);
	            };
	        },
	
	        detach: function(type, fn) {
	            if (element.removeEventListener) {
	                element.removeEventListener(type, fn, false);
	            } else if (element.attachEvent) {
	                element.detachEvent("on" + type, fn);
	            }
	            return this;
	        },
	
	        contains: function(descendant) {
	            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)
	            // says a `null` (or ostensibly `undefined`) parameter
	            // passed into `Node.contains` should result in a false return value.
	            // IE7 throws an exception if the parameter is `undefined` though.
	            if (!descendant) {
	                return false;
	            }
	
	            // compareposition returns false in this case
	            if (element === descendant) {
	                return true;
	            }
	
	            if (element.contains) {
	                return element.contains(descendant);
	            } else {
	                /*jslint bitwise: true*/
	                return !!(descendant.compareDocumentPosition(element) & 8);
	            }
	        },
	
	        /**
	         * Insert this element before elementB.
	         */
	        insertBefore: function(elementB) {
	            elementB.parentNode.insertBefore(element, elementB);
	            return this;
	        },
	
	        remove: function() {
	            element.parentNode.removeChild(element);
	            return this;
	        },
	
	        /**
	         * Sets styles for an element.
	         * Fixes opacity in IE6-8.
	         */
	        css: function(styles) {
	            /*jshint eqnull: true*/
	            if (element.style == null) {
	                throw new qq.Error("Can't apply style to node as it is not on the HTMLElement prototype chain!");
	            }
	
	            /*jshint -W116*/
	            if (styles.opacity != null) {
	                if (typeof element.style.opacity !== "string" && typeof (element.filters) !== "undefined") {
	                    styles.filter = "alpha(opacity=" + Math.round(100 * styles.opacity) + ")";
	                }
	            }
	            qq.extend(element.style, styles);
	
	            return this;
	        },
	
	        hasClass: function(name, considerParent) {
	            var re = new RegExp("(^| )" + name + "( |$)");
	            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));
	        },
	
	        addClass: function(name) {
	            if (!qq(element).hasClass(name)) {
	                element.className += " " + name;
	            }
	            return this;
	        },
	
	        removeClass: function(name) {
	            var re = new RegExp("(^| )" + name + "( |$)");
	            element.className = element.className.replace(re, " ").replace(/^\s+|\s+$/g, "");
	            return this;
	        },
	
	        getByClass: function(className, first) {
	            var candidates,
	                result = [];
	
	            if (first && element.querySelector) {
	                return element.querySelector("." + className);
	            }
	            else if (element.querySelectorAll) {
	                return element.querySelectorAll("." + className);
	            }
	
	            candidates = element.getElementsByTagName("*");
	
	            qq.each(candidates, function(idx, val) {
	                if (qq(val).hasClass(className)) {
	                    result.push(val);
	                }
	            });
	            return first ? result[0] : result;
	        },
	
	        getFirstByClass: function(className) {
	            return qq(element).getByClass(className, true);
	        },
	
	        children: function() {
	            var children = [],
	                child = element.firstChild;
	
	            while (child) {
	                if (child.nodeType === 1) {
	                    children.push(child);
	                }
	                child = child.nextSibling;
	            }
	
	            return children;
	        },
	
	        setText: function(text) {
	            element.innerText = text;
	            element.textContent = text;
	            return this;
	        },
	
	        clearText: function() {
	            return qq(element).setText("");
	        },
	
	        // Returns true if the attribute exists on the element
	        // AND the value of the attribute is NOT "false" (case-insensitive)
	        hasAttribute: function(attrName) {
	            var attrVal;
	
	            if (element.hasAttribute) {
	
	                if (!element.hasAttribute(attrName)) {
	                    return false;
	                }
	
	                /*jshint -W116*/
	                return (/^false$/i).exec(element.getAttribute(attrName)) == null;
	            }
	            else {
	                attrVal = element[attrName];
	
	                if (attrVal === undefined) {
	                    return false;
	                }
	
	                /*jshint -W116*/
	                return (/^false$/i).exec(attrVal) == null;
	            }
	        }
	    };
	};
	
	(function() {
	    "use strict";
	
	    qq.canvasToBlob = function(canvas, mime, quality) {
	        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));
	    };
	
	    qq.dataUriToBlob = function(dataUri) {
	        var arrayBuffer, byteString,
	            createBlob = function(data, mime) {
	                var BlobBuilder = window.BlobBuilder ||
	                        window.WebKitBlobBuilder ||
	                        window.MozBlobBuilder ||
	                        window.MSBlobBuilder,
	                    blobBuilder = BlobBuilder && new BlobBuilder();
	
	                if (blobBuilder) {
	                    blobBuilder.append(data);
	                    return blobBuilder.getBlob(mime);
	                }
	                else {
	                    return new Blob([data], {type: mime});
	                }
	            },
	            intArray, mimeString;
	
	        // convert base64 to raw binary data held in a string
	        if (dataUri.split(",")[0].indexOf("base64") >= 0) {
	            byteString = atob(dataUri.split(",")[1]);
	        }
	        else {
	            byteString = decodeURI(dataUri.split(",")[1]);
	        }
	
	        // extract the MIME
	        mimeString = dataUri.split(",")[0]
	            .split(":")[1]
	            .split(";")[0];
	
	        // write the bytes of the binary string to an ArrayBuffer
	        arrayBuffer = new ArrayBuffer(byteString.length);
	        intArray = new Uint8Array(arrayBuffer);
	        qq.each(byteString, function(idx, character) {
	            intArray[idx] = character.charCodeAt(0);
	        });
	
	        return createBlob(arrayBuffer, mimeString);
	    };
	
	    qq.log = function(message, level) {
	        if (window.console) {
	            if (!level || level === "info") {
	                window.console.log(message);
	            }
	            else
	            {
	                if (window.console[level]) {
	                    window.console[level](message);
	                }
	                else {
	                    window.console.log("<" + level + "> " + message);
	                }
	            }
	        }
	    };
	
	    qq.isObject = function(variable) {
	        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === "[object Object]";
	    };
	
	    qq.isFunction = function(variable) {
	        return typeof (variable) === "function";
	    };
	
	    /**
	     * Check the type of a value.  Is it an "array"?
	     *
	     * @param value value to test.
	     * @returns true if the value is an array or associated with an `ArrayBuffer`
	     */
	    qq.isArray = function(value) {
	        return Object.prototype.toString.call(value) === "[object Array]" ||
	            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);
	    };
	
	    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.
	    qq.isItemList = function(maybeItemList) {
	        return Object.prototype.toString.call(maybeItemList) === "[object DataTransferItemList]";
	    };
	
	    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`
	    // object that is associated with collections of Nodes.
	    qq.isNodeList = function(maybeNodeList) {
	        return Object.prototype.toString.call(maybeNodeList) === "[object NodeList]" ||
	            // If `HTMLCollection` is the actual type of the object, we must determine this
	            // by checking for expected properties/methods on the object
	            (maybeNodeList.item && maybeNodeList.namedItem);
	    };
	
	    qq.isString = function(maybeString) {
	        return Object.prototype.toString.call(maybeString) === "[object String]";
	    };
	
	    qq.trimStr = function(string) {
	        if (String.prototype.trim) {
	            return string.trim();
	        }
	
	        return string.replace(/^\s+|\s+$/g, "");
	    };
	
	    /**
	     * @param str String to format.
	     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.
	     */
	    qq.format = function(str) {
	
	        var args =  Array.prototype.slice.call(arguments, 1),
	            newStr = str,
	            nextIdxToReplace = newStr.indexOf("{}");
	
	        qq.each(args, function(idx, val) {
	            var strBefore = newStr.substring(0, nextIdxToReplace),
	                strAfter = newStr.substring(nextIdxToReplace + 2);
	
	            newStr = strBefore + val + strAfter;
	            nextIdxToReplace = newStr.indexOf("{}", nextIdxToReplace + val.length);
	
	            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)
	            if (nextIdxToReplace < 0) {
	                return false;
	            }
	        });
	
	        return newStr;
	    };
	
	    qq.isFile = function(maybeFile) {
	        return window.File && Object.prototype.toString.call(maybeFile) === "[object File]";
	    };
	
	    qq.isFileList = function(maybeFileList) {
	        return window.FileList && Object.prototype.toString.call(maybeFileList) === "[object FileList]";
	    };
	
	    qq.isFileOrInput = function(maybeFileOrInput) {
	        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);
	    };
	
	    qq.isInput = function(maybeInput, notFile) {
	        var evaluateType = function(type) {
	            var normalizedType = type.toLowerCase();
	
	            if (notFile) {
	                return normalizedType !== "file";
	            }
	
	            return normalizedType === "file";
	        };
	
	        if (window.HTMLInputElement) {
	            if (Object.prototype.toString.call(maybeInput) === "[object HTMLInputElement]") {
	                if (maybeInput.type && evaluateType(maybeInput.type)) {
	                    return true;
	                }
	            }
	        }
	        if (maybeInput.tagName) {
	            if (maybeInput.tagName.toLowerCase() === "input") {
	                if (maybeInput.type && evaluateType(maybeInput.type)) {
	                    return true;
	                }
	            }
	        }
	
	        return false;
	    };
	
	    qq.isBlob = function(maybeBlob) {
	        if (window.Blob && Object.prototype.toString.call(maybeBlob) === "[object Blob]") {
	            return true;
	        }
	    };
	
	    qq.isXhrUploadSupported = function() {
	        var input = document.createElement("input");
	        input.type = "file";
	
	        return (
	            input.multiple !== undefined &&
	                typeof File !== "undefined" &&
	                typeof FormData !== "undefined" &&
	                typeof (qq.createXhrInstance()).upload !== "undefined");
	    };
	
	    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).
	    qq.createXhrInstance = function() {
	        if (window.XMLHttpRequest) {
	            return new XMLHttpRequest();
	        }
	
	        try {
	            return new ActiveXObject("MSXML2.XMLHTTP.3.0");
	        }
	        catch (error) {
	            qq.log("Neither XHR or ActiveX are supported!", "error");
	            return null;
	        }
	    };
	
	    qq.isFolderDropSupported = function(dataTransfer) {
	        return dataTransfer.items &&
	            dataTransfer.items.length > 0 &&
	            dataTransfer.items[0].webkitGetAsEntry;
	    };
	
	    qq.isFileChunkingSupported = function() {
	        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly
	            qq.isXhrUploadSupported() &&
	            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);
	    };
	
	    qq.sliceBlob = function(fileOrBlob, start, end) {
	        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;
	
	        return slicer.call(fileOrBlob, start, end);
	    };
	
	    qq.arrayBufferToHex = function(buffer) {
	        var bytesAsHex = "",
	            bytes = new Uint8Array(buffer);
	
	        qq.each(bytes, function(idx, byt) {
	            var byteAsHexStr = byt.toString(16);
	
	            if (byteAsHexStr.length < 2) {
	                byteAsHexStr = "0" + byteAsHexStr;
	            }
	
	            bytesAsHex += byteAsHexStr;
	        });
	
	        return bytesAsHex;
	    };
	
	    qq.readBlobToHex = function(blob, startOffset, length) {
	        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),
	            fileReader = new FileReader(),
	            promise = new qq.Promise();
	
	        fileReader.onload = function() {
	            promise.success(qq.arrayBufferToHex(fileReader.result));
	        };
	
	        fileReader.onerror = promise.failure;
	
	        fileReader.readAsArrayBuffer(initialBlob);
	
	        return promise;
	    };
	
	    qq.extend = function(first, second, extendNested) {
	        qq.each(second, function(prop, val) {
	            if (extendNested && qq.isObject(val)) {
	                if (first[prop] === undefined) {
	                    first[prop] = {};
	                }
	                qq.extend(first[prop], val, true);
	            }
	            else {
	                first[prop] = val;
	            }
	        });
	
	        return first;
	    };
	
	    /**
	     * Allow properties in one object to override properties in another,
	     * keeping track of the original values from the target object.
	     *
	     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.
	     *
	     * @param target Update properties in this object from some source
	     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.
	     * @returns {object} The target object
	     */
	    qq.override = function(target, sourceFn) {
	        var super_ = {},
	            source = sourceFn(super_);
	
	        qq.each(source, function(srcPropName, srcPropVal) {
	            if (target[srcPropName] !== undefined) {
	                super_[srcPropName] = target[srcPropName];
	            }
	
	            target[srcPropName] = srcPropVal;
	        });
	
	        return target;
	    };
	
	    /**
	     * Searches for a given element (elt) in the array, returns -1 if it is not present.
	     */
	    qq.indexOf = function(arr, elt, from) {
	        if (arr.indexOf) {
	            return arr.indexOf(elt, from);
	        }
	
	        from = from || 0;
	        var len = arr.length;
	
	        if (from < 0) {
	            from += len;
	        }
	
	        for (; from < len; from += 1) {
	            if (arr.hasOwnProperty(from) && arr[from] === elt) {
	                return from;
	            }
	        }
	        return -1;
	    };
	
	    //this is a version 4 UUID
	    qq.getUniqueId = function() {
	        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
	            /*jslint eqeq: true, bitwise: true*/
	            var r = Math.random() * 16 | 0, v = c == "x" ? r : (r & 0x3 | 0x8);
	            return v.toString(16);
	        });
	    };
	
	    //
	    // Browsers and platforms detection
	    qq.ie = function() {
	        return navigator.userAgent.indexOf("MSIE") !== -1 ||
	            navigator.userAgent.indexOf("Trident") !== -1;
	    };
	
	    qq.ie7 = function() {
	        return navigator.userAgent.indexOf("MSIE 7") !== -1;
	    };
	
	    qq.ie8 = function() {
	        return navigator.userAgent.indexOf("MSIE 8") !== -1;
	    };
	
	    qq.ie10 = function() {
	        return navigator.userAgent.indexOf("MSIE 10") !== -1;
	    };
	
	    qq.ie11 = function() {
	        return qq.ie() && navigator.userAgent.indexOf("rv:11") !== -1;
	    };
	
	    qq.edge = function() {
	        return navigator.userAgent.indexOf("Edge") >= 0;
	    };
	
	    qq.safari = function() {
	        return navigator.vendor !== undefined && navigator.vendor.indexOf("Apple") !== -1;
	    };
	
	    qq.chrome = function() {
	        return navigator.vendor !== undefined && navigator.vendor.indexOf("Google") !== -1;
	    };
	
	    qq.opera = function() {
	        return navigator.vendor !== undefined && navigator.vendor.indexOf("Opera") !== -1;
	    };
	
	    qq.firefox = function() {
	        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf("Mozilla") !== -1 && navigator.vendor !== undefined && navigator.vendor === "");
	    };
	
	    qq.windows = function() {
	        return navigator.platform === "Win32";
	    };
	
	    qq.android = function() {
	        return navigator.userAgent.toLowerCase().indexOf("android") !== -1;
	    };
	
	    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,
	    // such as the one that prevents a `Blob` from being uploaded.
	    qq.androidStock = function() {
	        return qq.android() && navigator.userAgent.toLowerCase().indexOf("chrome") < 0;
	    };
	
	    qq.ios6 = function() {
	        return qq.ios() && navigator.userAgent.indexOf(" OS 6_") !== -1;
	    };
	
	    qq.ios7 = function() {
	        return qq.ios() && navigator.userAgent.indexOf(" OS 7_") !== -1;
	    };
	
	    qq.ios8 = function() {
	        return qq.ios() && navigator.userAgent.indexOf(" OS 8_") !== -1;
	    };
	
	    // iOS 8.0.0
	    qq.ios800 = function() {
	        return qq.ios() && navigator.userAgent.indexOf(" OS 8_0 ") !== -1;
	    };
	
	    qq.ios = function() {
	        /*jshint -W014 */
	        return navigator.userAgent.indexOf("iPad") !== -1
	            || navigator.userAgent.indexOf("iPod") !== -1
	            || navigator.userAgent.indexOf("iPhone") !== -1;
	    };
	
	    qq.iosChrome = function() {
	        return qq.ios() && navigator.userAgent.indexOf("CriOS") !== -1;
	    };
	
	    qq.iosSafari = function() {
	        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf("Safari") !== -1;
	    };
	
	    qq.iosSafariWebView = function() {
	        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();
	    };
	
	    //
	    // Events
	
	    qq.preventDefault = function(e) {
	        if (e.preventDefault) {
	            e.preventDefault();
	        } else {
	            e.returnValue = false;
	        }
	    };
	
	    /**
	     * Creates and returns element from html string
	     * Uses innerHTML to create an element
	     */
	    qq.toElement = (function() {
	        var div = document.createElement("div");
	        return function(html) {
	            div.innerHTML = html;
	            var element = div.firstChild;
	            div.removeChild(element);
	            return element;
	        };
	    }());
	
	    //key and value are passed to callback for each entry in the iterable item
	    qq.each = function(iterableItem, callback) {
	        var keyOrIndex, retVal;
	
	        if (iterableItem) {
	            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items
	            if (window.Storage && iterableItem.constructor === window.Storage) {
	                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {
	                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));
	                    if (retVal === false) {
	                        break;
	                    }
	                }
	            }
	            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays
	            // when iterating over items inside the object.
	            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {
	                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {
	                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);
	                    if (retVal === false) {
	                        break;
	                    }
	                }
	            }
	            else if (qq.isString(iterableItem)) {
	                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {
	                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));
	                    if (retVal === false) {
	                        break;
	                    }
	                }
	            }
	            else {
	                for (keyOrIndex in iterableItem) {
	                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {
	                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);
	                        if (retVal === false) {
	                            break;
	                        }
	                    }
	                }
	            }
	        }
	    };
	
	    //include any args that should be passed to the new function after the context arg
	    qq.bind = function(oldFunc, context) {
	        if (qq.isFunction(oldFunc)) {
	            var args =  Array.prototype.slice.call(arguments, 2);
	
	            return function() {
	                var newArgs = qq.extend([], args);
	                if (arguments.length) {
	                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));
	                }
	                return oldFunc.apply(context, newArgs);
	            };
	        }
	
	        throw new Error("first parameter must be a function!");
	    };
	
	    /**
	     * obj2url() takes a json-object as argument and generates
	     * a querystring. pretty much like jQuery.param()
	     *
	     * how to use:
	     *
	     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`
	     *
	     * will result in:
	     *
	     *    `http://any.url/upload?otherParam=value&a=b&c=d`
	     *
	     * @param  Object JSON-Object
	     * @param  String current querystring-part
	     * @return String encoded querystring
	     */
	    qq.obj2url = function(obj, temp, prefixDone) {
	        /*jshint laxbreak: true*/
	        var uristrings = [],
	            prefix = "&",
	            add = function(nextObj, i) {
	                var nextTemp = temp
	                    ? (/\[\]$/.test(temp)) // prevent double-encoding
	                    ? temp
	                    : temp + "[" + i + "]"
	                    : i;
	                if ((nextTemp !== "undefined") && (i !== "undefined")) {
	                    uristrings.push(
	                        (typeof nextObj === "object")
	                            ? qq.obj2url(nextObj, nextTemp, true)
	                            : (Object.prototype.toString.call(nextObj) === "[object Function]")
	                            ? encodeURIComponent(nextTemp) + "=" + encodeURIComponent(nextObj())
	                            : encodeURIComponent(nextTemp) + "=" + encodeURIComponent(nextObj)
	                    );
	                }
	            };
	
	        if (!prefixDone && temp) {
	            prefix = (/\?/.test(temp)) ? (/\?$/.test(temp)) ? "" : "&" : "?";
	            uristrings.push(temp);
	            uristrings.push(qq.obj2url(obj));
	        } else if ((Object.prototype.toString.call(obj) === "[object Array]") && (typeof obj !== "undefined")) {
	            qq.each(obj, function(idx, val) {
	                add(val, idx);
	            });
	        } else if ((typeof obj !== "undefined") && (obj !== null) && (typeof obj === "object")) {
	            qq.each(obj, function(prop, val) {
	                add(val, prop);
	            });
	        } else {
	            uristrings.push(encodeURIComponent(temp) + "=" + encodeURIComponent(obj));
	        }
	
	        if (temp) {
	            return uristrings.join(prefix);
	        } else {
	            return uristrings.join(prefix)
	                .replace(/^&/, "")
	                .replace(/%20/g, "+");
	        }
	    };
	
	    qq.obj2FormData = function(obj, formData, arrayKeyName) {
	        if (!formData) {
	            formData = new FormData();
	        }
	
	        qq.each(obj, function(key, val) {
	            key = arrayKeyName ? arrayKeyName + "[" + key + "]" : key;
	
	            if (qq.isObject(val)) {
	                qq.obj2FormData(val, formData, key);
	            }
	            else if (qq.isFunction(val)) {
	                formData.append(key, val());
	            }
	            else {
	                formData.append(key, val);
	            }
	        });
	
	        return formData;
	    };
	
	    qq.obj2Inputs = function(obj, form) {
	        var input;
	
	        if (!form) {
	            form = document.createElement("form");
	        }
	
	        qq.obj2FormData(obj, {
	            append: function(key, val) {
	                input = document.createElement("input");
	                input.setAttribute("name", key);
	                input.setAttribute("value", val);
	                form.appendChild(input);
	            }
	        });
	
	        return form;
	    };
	
	    /**
	     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not
	     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.
	     */
	    qq.parseJson = function(json) {
	        /*jshint evil: true*/
	        if (window.JSON && qq.isFunction(JSON.parse)) {
	            return JSON.parse(json);
	        } else {
	            return eval("(" + json + ")");
	        }
	    };
	
	    /**
	     * Retrieve the extension of a file, if it exists.
	     *
	     * @param filename
	     * @returns {string || undefined}
	     */
	    qq.getExtension = function(filename) {
	        var extIdx = filename.lastIndexOf(".") + 1;
	
	        if (extIdx > 0) {
	            return filename.substr(extIdx, filename.length - extIdx);
	        }
	    };
	
	    qq.getFilename = function(blobOrFileInput) {
	        /*jslint regexp: true*/
	
	        if (qq.isInput(blobOrFileInput)) {
	            // get input value and remove path to normalize
	            return blobOrFileInput.value.replace(/.*(\/|\\)/, "");
	        }
	        else if (qq.isFile(blobOrFileInput)) {
	            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {
	                return blobOrFileInput.fileName;
	            }
	        }
	
	        return blobOrFileInput.name;
	    };
	
	    /**
	     * A generic module which supports object disposing in dispose() method.
	     * */
	    qq.DisposeSupport = function() {
	        var disposers = [];
	
	        return {
	            /** Run all registered disposers */
	            dispose: function() {
	                var disposer;
	                do {
	                    disposer = disposers.shift();
	                    if (disposer) {
	                        disposer();
	                    }
	                }
	                while (disposer);
	            },
	
	            /** Attach event handler and register de-attacher as a disposer */
	            attach: function() {
	                var args = arguments;
	                /*jslint undef:true*/
	                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));
	            },
	
	            /** Add disposer to the collection */
	            addDisposer: function(disposeFunction) {
	                disposers.push(disposeFunction);
	            }
	        };
	    };
	}());
	
	/* globals qq */
	/**
	 * Fine Uploader top-level Error container.  Inherits from `Error`.
	 */
	(function() {
	    "use strict";
	
	    qq.Error = function(message) {
	        this.message = "[Fine Uploader " + qq.version + "] " + message;
	    };
	
	    qq.Error.prototype = new Error();
	}());
	
	/*global qq */
	qq.version = "5.9.0";
	
	/* globals qq */
	qq.supportedFeatures = (function() {
	    "use strict";
	
	    var supportsUploading,
	        supportsUploadingBlobs,
	        supportsFileDrop,
	        supportsAjaxFileUploading,
	        supportsFolderDrop,
	        supportsChunking,
	        supportsResume,
	        supportsUploadViaPaste,
	        supportsUploadCors,
	        supportsDeleteFileXdr,
	        supportsDeleteFileCorsXhr,
	        supportsDeleteFileCors,
	        supportsFolderSelection,
	        supportsImagePreviews,
	        supportsUploadProgress;
	
	    function testSupportsFileInputElement() {
	        var supported = true,
	            tempInput;
	
	        try {
	            tempInput = document.createElement("input");
	            tempInput.type = "file";
	            qq(tempInput).hide();
	
	            if (tempInput.disabled) {
	                supported = false;
	            }
	        }
	        catch (ex) {
	            supported = false;
	        }
	
	        return supported;
	    }
	
	    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface
	    function isChrome21OrHigher() {
	        return (qq.chrome() || qq.opera()) &&
	            navigator.userAgent.match(/Chrome\/[2][1-9]|Chrome\/[3-9][0-9]/) !== undefined;
	    }
	
	    //only way to test for complete Clipboard API support at this time
	    function isChrome14OrHigher() {
	        return (qq.chrome() || qq.opera()) &&
	            navigator.userAgent.match(/Chrome\/[1][4-9]|Chrome\/[2-9][0-9]/) !== undefined;
	    }
	
	    //Ensure we can send cross-origin `XMLHttpRequest`s
	    function isCrossOriginXhrSupported() {
	        if (window.XMLHttpRequest) {
	            var xhr = qq.createXhrInstance();
	
	            //Commonly accepted test for XHR CORS support.
	            return xhr.withCredentials !== undefined;
	        }
	
	        return false;
	    }
	
	    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8
	    function isXdrSupported() {
	        return window.XDomainRequest !== undefined;
	    }
	
	    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,
	    // or if `XDomainRequest` is an available alternative.
	    function isCrossOriginAjaxSupported() {
	        if (isCrossOriginXhrSupported()) {
	            return true;
	        }
	
	        return isXdrSupported();
	    }
	
	    function isFolderSelectionSupported() {
	        // We know that folder selection is only supported in Chrome via this proprietary attribute for now
	        return document.createElement("input").webkitdirectory !== undefined;
	    }
	
	    function isLocalStorageSupported() {
	        try {
	            return !!window.localStorage &&
	                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string
	                qq.isFunction(window.localStorage.setItem);
	        }
	        catch (error) {
	            // probably caught a security exception, so no localStorage for you
	            return false;
	        }
	    }
	
	    function isDragAndDropSupported() {
	        var span = document.createElement("span");
	
	        return ("draggable" in span || ("ondragstart" in span && "ondrop" in span)) &&
	            !qq.android() && !qq.ios();
	    }
	
	    supportsUploading = testSupportsFileInputElement();
	
	    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();
	
	    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();
	
	    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();
	
	    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();
	
	    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();
	
	    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();
	
	    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();
	
	    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);
	
	    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();
	
	    supportsDeleteFileXdr = isXdrSupported();
	
	    supportsDeleteFileCors = isCrossOriginAjaxSupported();
	
	    supportsFolderSelection = isFolderSelectionSupported();
	
	    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;
	
	    supportsUploadProgress = (function() {
	        if (supportsAjaxFileUploading) {
	            return !qq.androidStock() && !qq.iosChrome();
	        }
	        return false;
	    }());
	
	    return {
	        ajaxUploading: supportsAjaxFileUploading,
	        blobUploading: supportsUploadingBlobs,
	        canDetermineSize: supportsAjaxFileUploading,
	        chunking: supportsChunking,
	        deleteFileCors: supportsDeleteFileCors,
	        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported
	        deleteFileCorsXhr: supportsDeleteFileCorsXhr,
	        dialogElement: !!window.HTMLDialogElement,
	        fileDrop: supportsFileDrop,
	        folderDrop: supportsFolderDrop,
	        folderSelection: supportsFolderSelection,
	        imagePreviews: supportsImagePreviews,
	        imageValidation: supportsImagePreviews,
	        itemSizeValidation: supportsAjaxFileUploading,
	        pause: supportsChunking,
	        progressBar: supportsUploadProgress,
	        resume: supportsResume,
	        scaling: supportsImagePreviews && supportsUploadingBlobs,
	        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)
	        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit
	        uploading: supportsUploading,
	        uploadCors: supportsUploadCors,
	        uploadCustomHeaders: supportsAjaxFileUploading,
	        uploadNonMultipart: supportsAjaxFileUploading,
	        uploadViaPaste: supportsUploadViaPaste
	    };
	
	}());
	
	/*globals qq*/
	
	// Is the passed object a promise instance?
	qq.isGenericPromise = function(maybePromise) {
	    "use strict";
	    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));
	};
	
	qq.Promise = function() {
	    "use strict";
	
	    var successArgs, failureArgs,
	        successCallbacks = [],
	        failureCallbacks = [],
	        doneCallbacks = [],
	        state = 0;
	
	    qq.extend(this, {
	        then: function(onSuccess, onFailure) {
	            if (state === 0) {
	                if (onSuccess) {
	                    successCallbacks.push(onSuccess);
	                }
	                if (onFailure) {
	                    failureCallbacks.push(onFailure);
	                }
	            }
	            else if (state === -1) {
	                onFailure && onFailure.apply(null, failureArgs);
	            }
	            else if (onSuccess) {
	                onSuccess.apply(null, successArgs);
	            }
	
	            return this;
	        },
	
	        done: function(callback) {
	            if (state === 0) {
	                doneCallbacks.push(callback);
	            }
	            else {
	                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);
	            }
	
	            return this;
	        },
	
	        success: function() {
	            state = 1;
	            successArgs = arguments;
	
	            if (successCallbacks.length) {
	                qq.each(successCallbacks, function(idx, callback) {
	                    callback.apply(null, successArgs);
	                });
	            }
	
	            if (doneCallbacks.length) {
	                qq.each(doneCallbacks, function(idx, callback) {
	                    callback.apply(null, successArgs);
	                });
	            }
	
	            return this;
	        },
	
	        failure: function() {
	            state = -1;
	            failureArgs = arguments;
	
	            if (failureCallbacks.length) {
	                qq.each(failureCallbacks, function(idx, callback) {
	                    callback.apply(null, failureArgs);
	                });
	            }
	
	            if (doneCallbacks.length) {
	                qq.each(doneCallbacks, function(idx, callback) {
	                    callback.apply(null, failureArgs);
	                });
	            }
	
	            return this;
	        }
	    });
	};
	
	/* globals qq */
	/**
	 * Placeholder for a Blob that will be generated on-demand.
	 *
	 * @param referenceBlob Parent of the generated blob
	 * @param onCreate Function to invoke when the blob must be created.  Must be promissory.
	 * @constructor
	 */
	qq.BlobProxy = function(referenceBlob, onCreate) {
	    "use strict";
	
	    qq.extend(this, {
	        referenceBlob: referenceBlob,
	
	        create: function() {
	            return onCreate(referenceBlob);
	        }
	    });
	};
	
	/*globals qq*/
	
	/**
	 * This module represents an upload or "Select File(s)" button.  It's job is to embed an opaque `<input type="file">`
	 * element as a child of a provided "container" element.  This "container" element (`options.element`) is used to provide
	 * a custom style for the `<input type="file">` element.  The ability to change the style of the container element is also
	 * provided here by adding CSS classes to the container on hover/focus.
	 *
	 * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be
	 * available on all supported browsers.
	 *
	 * @param o Options to override the default values
	 */
	qq.UploadButton = function(o) {
	    "use strict";
	
	    var self = this,
	
	        disposeSupport = new qq.DisposeSupport(),
	
	        options = {
	            // Corresponds to the `accept` attribute on the associated `<input type="file">`
	            acceptFiles: null,
	
	            // "Container" element
	            element: null,
	
	            focusClass: "qq-upload-button-focus",
	
	            // A true value allows folders to be selected, if supported by the UA
	            folders: false,
	
	            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers
	            hoverClass: "qq-upload-button-hover",
	
	            ios8BrowserCrashWorkaround: false,
	
	            // If true adds `multiple` attribute to `<input type="file">`
	            multiple: false,
	
	            // `name` attribute of `<input type="file">`
	            name: "qqfile",
	
	            // Called when the browser invokes the onchange handler on the `<input type="file">`
	            onChange: function(input) {},
	
	            title: null
	        },
	        input, buttonId;
	
	    // Overrides any of the default option values with any option values passed in during construction.
	    qq.extend(options, o);
	
	    buttonId = qq.getUniqueId();
	
	    // Embed an opaque `<input type="file">` element as a child of `options.element`.
	    function createInput() {
	        var input = document.createElement("input");
	
	        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);
	        input.setAttribute("title", options.title);
	
	        self.setMultiple(options.multiple, input);
	
	        if (options.folders && qq.supportedFeatures.folderSelection) {
	            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute
	            input.setAttribute("webkitdirectory", "");
	        }
	
	        if (options.acceptFiles) {
	            input.setAttribute("accept", options.acceptFiles);
	        }
	
	        input.setAttribute("type", "file");
	        input.setAttribute("name", options.name);
	
	        qq(input).css({
	            position: "absolute",
	            // in Opera only 'browse' button
	            // is clickable and it is located at
	            // the right side of the input
	            right: 0,
	            top: 0,
	            fontFamily: "Arial",
	            // It's especially important to make this an arbitrarily large value
	            // to ensure the rendered input button in IE takes up the entire
	            // space of the container element.  Otherwise, the left side of the
	            // button will require a double-click to invoke the file chooser.
	            // In other browsers, this might cause other issues, so a large font-size
	            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored
	            // in some cases when the font-size is large.  So, this workaround is not applied
	            // to IE8.
	            fontSize: qq.ie() && !qq.ie8() ? "3500px" : "118px",
	            margin: 0,
	            padding: 0,
	            cursor: "pointer",
	            opacity: 0
	        });
	
	        // Setting the file input's height to 100% in IE7 causes
	        // most of the visible button to be unclickable.
	        !qq.ie7() && qq(input).css({height: "100%"});
	
	        options.element.appendChild(input);
	
	        disposeSupport.attach(input, "change", function() {
	            options.onChange(input);
	        });
	
	        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers
	        disposeSupport.attach(input, "mouseover", function() {
	            qq(options.element).addClass(options.hoverClass);
	        });
	        disposeSupport.attach(input, "mouseout", function() {
	            qq(options.element).removeClass(options.hoverClass);
	        });
	
	        disposeSupport.attach(input, "focus", function() {
	            qq(options.element).addClass(options.focusClass);
	        });
	        disposeSupport.attach(input, "blur", function() {
	            qq(options.element).removeClass(options.focusClass);
	        });
	
	        return input;
	    }
	
	    // Make button suitable container for input
	    qq(options.element).css({
	        position: "relative",
	        overflow: "hidden",
	        // Make sure browse button is in the right side in Internet Explorer
	        direction: "ltr"
	    });
	
	    // Exposed API
	    qq.extend(this, {
	        getInput: function() {
	            return input;
	        },
	
	        getButtonId: function() {
	            return buttonId;
	        },
	
	        setMultiple: function(isMultiple, optInput) {
	            var input = optInput || this.getInput();
	
	            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash
	            // before the file chooser appears if the file input doesn't contain a multiple attribute.
	            // See #1283.
	            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {
	                input.setAttribute("multiple", "");
	            }
	
	            else {
	                if (isMultiple) {
	                    input.setAttribute("multiple", "");
	                }
	                else {
	                    input.removeAttribute("multiple");
	                }
	            }
	        },
	
	        setAcceptFiles: function(acceptFiles) {
	            if (acceptFiles !== options.acceptFiles) {
	                input.setAttribute("accept", acceptFiles);
	            }
	        },
	
	        reset: function() {
	            if (input.parentNode) {
	                qq(input).remove();
	            }
	
	            qq(options.element).removeClass(options.focusClass);
	            input = null;
	            input = createInput();
	        }
	    });
	
	    input = createInput();
	};
	
	qq.UploadButton.BUTTON_ID_ATTR_NAME = "qq-button-id";
	
	/*globals qq */
	qq.UploadData = function(uploaderProxy) {
	    "use strict";
	
	    var data = [],
	        byUuid = {},
	        byStatus = {},
	        byProxyGroupId = {},
	        byBatchId = {};
	
	    function getDataByIds(idOrIds) {
	        if (qq.isArray(idOrIds)) {
	            var entries = [];
	
	            qq.each(idOrIds, function(idx, id) {
	                entries.push(data[id]);
	            });
	
	            return entries;
	        }
	
	        return data[idOrIds];
	    }
	
	    function getDataByUuids(uuids) {
	        if (qq.isArray(uuids)) {
	            var entries = [];
	
	            qq.each(uuids, function(idx, uuid) {
	                entries.push(data[byUuid[uuid]]);
	            });
	
	            return entries;
	        }
	
	        return data[byUuid[uuids]];
	    }
	
	    function getDataByStatus(status) {
	        var statusResults = [],
	            statuses = [].concat(status);
	
	        qq.each(statuses, function(index, statusEnum) {
	            var statusResultIndexes = byStatus[statusEnum];
	
	            if (statusResultIndexes !== undefined) {
	                qq.each(statusResultIndexes, function(i, dataIndex) {
	                    statusResults.push(data[dataIndex]);
	                });
	            }
	        });
	
	        return statusResults;
	    }
	
	    qq.extend(this, {
	        /**
	         * Adds a new file to the data cache for tracking purposes.
	         *
	         * @param spec Data that describes this file.  Possible properties are:
	         *
	         * - uuid: Initial UUID for this file.
	         * - name: Initial name of this file.
	         * - size: Size of this file, omit if this cannot be determined
	         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.
	         * - batchId: ID of the batch this file belongs to
	         * - proxyGroupId: ID of the proxy group associated with this file
	         *
	         * @returns {number} Internal ID for this file.
	         */
	        addFile: function(spec) {
	            var status = spec.status || qq.status.SUBMITTING,
	                id = data.push({
	                    name: spec.name,
	                    originalName: spec.name,
	                    uuid: spec.uuid,
	                    size: spec.size == null ? -1 : spec.size,
	                    status: status
	                }) - 1;
	
	            if (spec.batchId) {
	                data[id].batchId = spec.batchId;
	
	                if (byBatchId[spec.batchId] === undefined) {
	                    byBatchId[spec.batchId] = [];
	                }
	                byBatchId[spec.batchId].push(id);
	            }
	
	            if (spec.proxyGroupId) {
	                data[id].proxyGroupId = spec.proxyGroupId;
	
	                if (byProxyGroupId[spec.proxyGroupId] === undefined) {
	                    byProxyGroupId[spec.proxyGroupId] = [];
	                }
	                byProxyGroupId[spec.proxyGroupId].push(id);
	            }
	
	            data[id].id = id;
	            byUuid[spec.uuid] = id;
	
	            if (byStatus[status] === undefined) {
	                byStatus[status] = [];
	            }
	            byStatus[status].push(id);
	
	            uploaderProxy.onStatusChange(id, null, status);
	
	            return id;
	        },
	
	        retrieve: function(optionalFilter) {
	            if (qq.isObject(optionalFilter) && data.length)  {
	                if (optionalFilter.id !== undefined) {
	                    return getDataByIds(optionalFilter.id);
	                }
	
	                else if (optionalFilter.uuid !== undefined) {
	                    return getDataByUuids(optionalFilter.uuid);
	                }
	
	                else if (optionalFilter.status) {
	                    return getDataByStatus(optionalFilter.status);
	                }
	            }
	            else {
	                return qq.extend([], data, true);
	            }
	        },
	
	        reset: function() {
	            data = [];
	            byUuid = {};
	            byStatus = {};
	            byBatchId = {};
	        },
	
	        setStatus: function(id, newStatus) {
	            var oldStatus = data[id].status,
	                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);
	
	            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);
	
	            data[id].status = newStatus;
	
	            if (byStatus[newStatus] === undefined) {
	                byStatus[newStatus] = [];
	            }
	            byStatus[newStatus].push(id);
	
	            uploaderProxy.onStatusChange(id, oldStatus, newStatus);
	        },
	
	        uuidChanged: function(id, newUuid) {
	            var oldUuid = data[id].uuid;
	
	            data[id].uuid = newUuid;
	            byUuid[newUuid] = id;
	            delete byUuid[oldUuid];
	        },
	
	        updateName: function(id, newName) {
	            data[id].name = newName;
	        },
	
	        updateSize: function(id, newSize) {
	            data[id].size = newSize;
	        },
	
	        // Only applicable if this file has a parent that we may want to reference later.
	        setParentId: function(targetId, parentId) {
	            data[targetId].parentId = parentId;
	        },
	
	        getIdsInProxyGroup: function(id) {
	            var proxyGroupId = data[id].proxyGroupId;
	
	            if (proxyGroupId) {
	                return byProxyGroupId[proxyGroupId];
	            }
	            return [];
	        },
	
	        getIdsInBatch: function(id) {
	            var batchId = data[id].batchId;
	
	            return byBatchId[batchId];
	        }
	    });
	};
	
	qq.status = {
	    SUBMITTING: "submitting",
	    SUBMITTED: "submitted",
	    REJECTED: "rejected",
	    QUEUED: "queued",
	    CANCELED: "canceled",
	    PAUSED: "paused",
	    UPLOADING: "uploading",
	    UPLOAD_RETRYING: "retrying upload",
	    UPLOAD_SUCCESSFUL: "upload successful",
	    UPLOAD_FAILED: "upload failed",
	    DELETE_FAILED: "delete failed",
	    DELETING: "deleting",
	    DELETED: "deleted"
	};
	
	/*globals qq*/
	/**
	 * Defines the public API for FineUploaderBasic mode.
	 */
	(function() {
	    "use strict";
	
	    qq.basePublicApi = {
	        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)
	        addBlobs: function(blobDataOrArray, params, endpoint) {
	            this.addFiles(blobDataOrArray, params, endpoint);
	        },
	
	        addInitialFiles: function(cannedFileList) {
	            var self = this;
	
	            qq.each(cannedFileList, function(index, cannedFile) {
	                self._addCannedFile(cannedFile);
	            });
	        },
	
	        addFiles: function(data, params, endpoint) {
	            this._maybeHandleIos8SafariWorkaround();
	
	            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,
	
	                processBlob = qq.bind(function(blob) {
	                    this._handleNewFile({
	                        blob: blob,
	                        name: this._options.blobs.defaultName
	                    }, batchId, verifiedFiles);
	                }, this),
	
	                processBlobData = qq.bind(function(blobData) {
	                    this._handleNewFile(blobData, batchId, verifiedFiles);
	                }, this),
	
	                processCanvas = qq.bind(function(canvas) {
	                    var blob = qq.canvasToBlob(canvas);
	
	                    this._handleNewFile({
	                        blob: blob,
	                        name: this._options.blobs.defaultName + ".png"
	                    }, batchId, verifiedFiles);
	                }, this),
	
	                processCanvasData = qq.bind(function(canvasData) {
	                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,
	                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);
	
	                    this._handleNewFile({
	                        blob: blob,
	                        name: canvasData.name
	                    }, batchId, verifiedFiles);
	                }, this),
	
	                processFileOrInput = qq.bind(function(fileOrInput) {
	                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {
	                        var files = Array.prototype.slice.call(fileOrInput.files),
	                            self = this;
	
	                        qq.each(files, function(idx, file) {
	                            self._handleNewFile(file, batchId, verifiedFiles);
	                        });
	                    }
	                    else {
	                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);
	                    }
	                }, this),
	
	                normalizeData = function() {
	                    if (qq.isFileList(data)) {
	                        data = Array.prototype.slice.call(data);
	                    }
	                    data = [].concat(data);
	                },
	
	                self = this,
	                verifiedFiles = [];
	
	            this._currentBatchId = batchId;
	
	            if (data) {
	                normalizeData();
	
	                qq.each(data, function(idx, fileContainer) {
	                    if (qq.isFileOrInput(fileContainer)) {
	                        processFileOrInput(fileContainer);
	                    }
	                    else if (qq.isBlob(fileContainer)) {
	                        processBlob(fileContainer);
	                    }
	                    else if (qq.isObject(fileContainer)) {
	                        if (fileContainer.blob && fileContainer.name) {
	                            processBlobData(fileContainer);
	                        }
	                        else if (fileContainer.canvas && fileContainer.name) {
	                            processCanvasData(fileContainer);
	                        }
	                    }
	                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === "canvas") {
	                        processCanvas(fileContainer);
	                    }
	                    else {
	                        self.log(fileContainer + " is not a valid file container!  Ignoring!", "warn");
	                    }
	                });
	
	                this.log("Received " + verifiedFiles.length + " files.");
	                this._prepareItemsForUpload(verifiedFiles, params, endpoint);
	            }
	        },
	
	        cancel: function(id) {
	            this._handler.cancel(id);
	        },
	
	        cancelAll: function() {
	            var storedIdsCopy = [],
	                self = this;
	
	            qq.extend(storedIdsCopy, this._storedIds);
	            qq.each(storedIdsCopy, function(idx, storedFileId) {
	                self.cancel(storedFileId);
	            });
	
	            this._handler.cancelAll();
	        },
	
	        clearStoredFiles: function() {
	            this._storedIds = [];
	        },
	
	        continueUpload: function(id) {
	            var uploadData = this._uploadData.retrieve({id: id});
	
	            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {
	                return false;
	            }
	
	            if (uploadData.status === qq.status.PAUSED) {
	                this.log(qq.format("Paused file ID {} ({}) will be continued.  Not paused.", id, this.getName(id)));
	                this._uploadFile(id);
	                return true;
	            }
	            else {
	                this.log(qq.format("Ignoring continue for file ID {} ({}).  Not paused.", id, this.getName(id)), "error");
	            }
	
	            return false;
	        },
	
	        deleteFile: function(id) {
	            return this._onSubmitDelete(id);
	        },
	
	        // TODO document?
	        doesExist: function(fileOrBlobId) {
	            return this._handler.isValid(fileOrBlobId);
	        },
	
	        // Generate a variable size thumbnail on an img or canvas,
	        // returning a promise that is fulfilled when the attempt completes.
	        // Thumbnail can either be based off of a URL for an image returned
	        // by the server in the upload response, or the associated `Blob`.
	        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer) {
	            var promiseToReturn = new qq.Promise(),
	                fileOrUrl, options;
	
	            if (this._imageGenerator) {
	                fileOrUrl = this._thumbnailUrls[fileId];
	                options = {
	                    scale: maxSize > 0,
	                    maxSize: maxSize > 0 ? maxSize : null
	                };
	
	                // If client-side preview generation is possible
	                // and we are not specifically looking for the image URl returned by the server...
	                if (!fromServer && qq.supportedFeatures.imagePreviews) {
	                    fileOrUrl = this.getFile(fileId);
	                }
	
	                /* jshint eqeqeq:false,eqnull:true */
	                if (fileOrUrl == null) {
	                    promiseToReturn.failure({container: imgOrCanvas, error: "File or URL not found."});
	                }
	                else {
	                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(
	                        function success(modifiedContainer) {
	                            promiseToReturn.success(modifiedContainer);
	                        },
	
	                        function failure(container, reason) {
	                            promiseToReturn.failure({container: container, error: reason || "Problem generating thumbnail"});
	                        }
	                    );
	                }
	            }
	            else {
	                promiseToReturn.failure({container: imgOrCanvas, error: "Missing image generator module"});
	            }
	
	            return promiseToReturn;
	        },
	
	        getButton: function(fileId) {
	            return this._getButton(this._buttonIdsForFileIds[fileId]);
	        },
	
	        getEndpoint: function(fileId) {
	            return this._endpointStore.get(fileId);
	        },
	
	        getFile: function(fileOrBlobId) {
	            return this._handler.getFile(fileOrBlobId) || null;
	        },
	
	        getInProgress: function() {
	            return this._uploadData.retrieve({
	                status: [
	                    qq.status.UPLOADING,
	                    qq.status.UPLOAD_RETRYING,
	                    qq.status.QUEUED
	                ]
	            }).length;
	        },
	
	        getName: function(id) {
	            return this._uploadData.retrieve({id: id}).name;
	        },
	
	                // Parent ID for a specific file, or null if this is the parent, or if it has no parent.
	        getParentId: function(id) {
	            var uploadDataEntry = this.getUploads({id: id}),
	                parentId = null;
	
	            if (uploadDataEntry) {
	                if (uploadDataEntry.parentId !== undefined) {
	                    parentId = uploadDataEntry.parentId;
	                }
	            }
	
	            return parentId;
	        },
	
	        getResumableFilesData: function() {
	            return this._handler.getResumableFilesData();
	        },
	
	        getSize: function(id) {
	            return this._uploadData.retrieve({id: id}).size;
	        },
	
	        getNetUploads: function() {
	            return this._netUploaded;
	        },
	
	        getRemainingAllowedItems: function() {
	            var allowedItems = this._currentItemLimit;
	
	            if (allowedItems > 0) {
	                return allowedItems - this._netUploadedOrQueued;
	            }
	
	            return null;
	        },
	
	        getUploads: function(optionalFilter) {
	            return this._uploadData.retrieve(optionalFilter);
	        },
	
	        getUuid: function(id) {
	            return this._uploadData.retrieve({id: id}).uuid;
	        },
	
	        log: function(str, level) {
	            if (this._options.debug && (!level || level === "info")) {
	                qq.log("[Fine Uploader " + qq.version + "] " + str);
	            }
	            else if (level && level !== "info") {
	                qq.log("[Fine Uploader " + qq.version + "] " + str, level);
	
	            }
	        },
	
	        pauseUpload: function(id) {
	            var uploadData = this._uploadData.retrieve({id: id});
	
	            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {
	                return false;
	            }
	
	            // Pause only really makes sense if the file is uploading or retrying
	            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {
	                if (this._handler.pause(id)) {
	                    this._uploadData.setStatus(id, qq.status.PAUSED);
	                    return true;
	                }
	                else {
	                    this.log(qq.format("Unable to pause file ID {} ({}).", id, this.getName(id)), "error");
	                }
	            }
	            else {
	                this.log(qq.format("Ignoring pause for file ID {} ({}).  Not in progress.", id, this.getName(id)), "error");
	            }
	
	            return false;
	        },
	
	        reset: function() {
	            this.log("Resetting uploader...");
	
	            this._handler.reset();
	            this._storedIds = [];
	            this._autoRetries = [];
	            this._retryTimeouts = [];
	            this._preventRetries = [];
	            this._thumbnailUrls = [];
	
	            qq.each(this._buttons, function(idx, button) {
	                button.reset();
	            });
	
	            this._paramsStore.reset();
	            this._endpointStore.reset();
	            this._netUploadedOrQueued = 0;
	            this._netUploaded = 0;
	            this._uploadData.reset();
	            this._buttonIdsForFileIds = [];
	
	            this._pasteHandler && this._pasteHandler.reset();
	            this._options.session.refreshOnReset && this._refreshSessionData();
	
	            this._succeededSinceLastAllComplete = [];
	            this._failedSinceLastAllComplete = [];
	
	            this._totalProgress && this._totalProgress.reset();
	        },
	
	        retry: function(id) {
	            return this._manualRetry(id);
	        },
	
	        scaleImage: function(id, specs) {
	            var self = this;
	
	            return qq.Scaler.prototype.scaleImage(id, specs, {
	                log: qq.bind(self.log, self),
	                getFile: qq.bind(self.getFile, self),
	                uploadData: self._uploadData
	            });
	        },
	
	        setCustomHeaders: function(headers, id) {
	            this._customHeadersStore.set(headers, id);
	        },
	
	        setDeleteFileCustomHeaders: function(headers, id) {
	            this._deleteFileCustomHeadersStore.set(headers, id);
	        },
	
	        setDeleteFileEndpoint: function(endpoint, id) {
	            this._deleteFileEndpointStore.set(endpoint, id);
	        },
	
	        setDeleteFileParams: function(params, id) {
	            this._deleteFileParamsStore.set(params, id);
	        },
	
	        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button
	        setEndpoint: function(endpoint, id) {
	            this._endpointStore.set(endpoint, id);
	        },
	
	        setForm: function(elementOrId) {
	            this._updateFormSupportAndParams(elementOrId);
	        },
	
	        setItemLimit: function(newItemLimit) {
	            this._currentItemLimit = newItemLimit;
	        },
	
	        setName: function(id, newName) {
	            this._uploadData.updateName(id, newName);
	        },
	
	        setParams: function(params, id) {
	            this._paramsStore.set(params, id);
	        },
	
	        setUuid: function(id, newUuid) {
	            return this._uploadData.uuidChanged(id, newUuid);
	        },
	
	        uploadStoredFiles: function() {
	            if (this._storedIds.length === 0) {
	                this._itemError("noFilesError");
	            }
	            else {
	                this._uploadStoredFiles();
	            }
	        }
	    };
	
	    /**
	     * Defines the private (internal) API for FineUploaderBasic mode.
	     */
	    qq.basePrivateApi = {
	        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.
	        _addCannedFile: function(sessionData) {
	            var id = this._uploadData.addFile({
	                uuid: sessionData.uuid,
	                name: sessionData.name,
	                size: sessionData.size,
	                status: qq.status.UPLOAD_SUCCESSFUL
	            });
	
	            sessionData.deleteFileEndpoint && this.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);
	            sessionData.deleteFileParams && this.setDeleteFileParams(sessionData.deleteFileParams, id);
	
	            if (sessionData.thumbnailUrl) {
	                this._thumbnailUrls[id] = sessionData.thumbnailUrl;
	            }
	
	            this._netUploaded++;
	            this._netUploadedOrQueued++;
	
	            return id;
	        },
	
	        _annotateWithButtonId: function(file, associatedInput) {
	            if (qq.isFile(file)) {
	                file.qqButtonId = this._getButtonId(associatedInput);
	            }
	        },
	
	        _batchError: function(message) {
	            this._options.callbacks.onError(null, null, message, undefined);
	        },
	
	        _createDeleteHandler: function() {
	            var self = this;
	
	            return new qq.DeleteFileAjaxRequester({
	                method: this._options.deleteFile.method.toUpperCase(),
	                maxConnections: this._options.maxConnections,
	                uuidParamName: this._options.request.uuidName,
	                customHeaders: this._deleteFileCustomHeadersStore,
	                paramsStore: this._deleteFileParamsStore,
	                endpointStore: this._deleteFileEndpointStore,
	                cors: this._options.cors,
	                log: qq.bind(self.log, self),
	                onDelete: function(id) {
	                    self._onDelete(id);
	                    self._options.callbacks.onDelete(id);
	                },
	                onDeleteComplete: function(id, xhrOrXdr, isError) {
	                    self._onDeleteComplete(id, xhrOrXdr, isError);
	                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);
	                }
	
	            });
	        },
	
	        _createPasteHandler: function() {
	            var self = this;
	
	            return new qq.PasteSupport({
	                targetElement: this._options.paste.targetElement,
	                callbacks: {
	                    log: qq.bind(self.log, self),
	                    pasteReceived: function(blob) {
	                        self._handleCheckedCallback({
	                            name: "onPasteReceived",
	                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),
	                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),
	                            identifier: "pasted image"
	                        });
	                    }
	                }
	            });
	        },
	
	        _createStore: function(initialValue, _readOnlyValues_) {
	            var store = {},
	                catchall = initialValue,
	                perIdReadOnlyValues = {},
	                readOnlyValues = _readOnlyValues_,
	                copy = function(orig) {
	                    if (qq.isObject(orig)) {
	                        return qq.extend({}, orig);
	                    }
	                    return orig;
	                },
	                getReadOnlyValues = function() {
	                    if (qq.isFunction(readOnlyValues)) {
	                        return readOnlyValues();
	                    }
	                    return readOnlyValues;
	                },
	                includeReadOnlyValues = function(id, existing) {
	                    if (readOnlyValues && qq.isObject(existing)) {
	                        qq.extend(existing, getReadOnlyValues());
	                    }
	
	                    if (perIdReadOnlyValues[id]) {
	                        qq.extend(existing, perIdReadOnlyValues[id]);
	                    }
	                };
	
	            return {
	                set: function(val, id) {
	                    /*jshint eqeqeq: true, eqnull: true*/
	                    if (id == null) {
	                        store = {};
	                        catchall = copy(val);
	                    }
	                    else {
	                        store[id] = copy(val);
	                    }
	                },
	
	                get: function(id) {
	                    var values;
	
	                    /*jshint eqeqeq: true, eqnull: true*/
	                    if (id != null && store[id]) {
	                        values = store[id];
	                    }
	                    else {
	                        values = copy(catchall);
	                    }
	
	                    includeReadOnlyValues(id, values);
	
	                    return copy(values);
	                },
	
	                addReadOnly: function(id, values) {
	                    // Only applicable to Object stores
	                    if (qq.isObject(store)) {
	                        // If null ID, apply readonly values to all files
	                        if (id === null) {
	                            if (qq.isFunction(values)) {
	                                readOnlyValues = values;
	                            }
	                            else {
	                                readOnlyValues = readOnlyValues || {};
	                                qq.extend(readOnlyValues, values);
	                            }
	                        }
	                        else {
	                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};
	                            qq.extend(perIdReadOnlyValues[id], values);
	                        }
	                    }
	                },
	
	                remove: function(fileId) {
	                    return delete store[fileId];
	                },
	
	                reset: function() {
	                    store = {};
	                    perIdReadOnlyValues = {};
	                    catchall = initialValue;
	                }
	            };
	        },
	
	        _createUploadDataTracker: function() {
	            var self = this;
	
	            return new qq.UploadData({
	                getName: function(id) {
	                    return self.getName(id);
	                },
	                getUuid: function(id) {
	                    return self.getUuid(id);
	                },
	                getSize: function(id) {
	                    return self.getSize(id);
	                },
	                onStatusChange: function(id, oldStatus, newStatus) {
	                    self._onUploadStatusChange(id, oldStatus, newStatus);
	                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);
	                    self._maybeAllComplete(id, newStatus);
	
	                    if (self._totalProgress) {
	                        setTimeout(function() {
	                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);
	                        }, 0);
	                    }
	                }
	            });
	        },
	
	        /**
	         * Generate a tracked upload button.
	         *
	         * @param spec Object containing a required `element` property
	         * along with optional `multiple`, `accept`, and `folders`.
	         * @returns {qq.UploadButton}
	         * @private
	         */
	        _createUploadButton: function(spec) {
	            var self = this,
	                acceptFiles = spec.accept || this._options.validation.acceptFiles,
	                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,
	                button;
	
	            function allowMultiple() {
	                if (qq.supportedFeatures.ajaxUploading) {
	                    // Workaround for bug in iOS7+ (see #1039)
	                    if (self._options.workarounds.iosEmptyVideos &&
	                        qq.ios() &&
	                        !qq.ios6() &&
	                        self._isAllowedExtension(allowedExtensions, ".mov")) {
	
	                        return false;
	                    }
	
	                    if (spec.multiple === undefined) {
	                        return self._options.multiple;
	                    }
	
	                    return spec.multiple;
	                }
	
	                return false;
	            }
	
	            button = new qq.UploadButton({
	                acceptFiles: acceptFiles,
	                element: spec.element,
	                focusClass: this._options.classes.buttonFocus,
	                folders: spec.folders,
	                hoverClass: this._options.classes.buttonHover,
	                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,
	                multiple: allowMultiple(),
	                name: this._options.request.inputName,
	                onChange: function(input) {
	                    self._onInputChange(input);
	                },
	                title: spec.title == null ? this._options.text.fileInputTitle : spec.title
	            });
	
	            this._disposeSupport.addDisposer(function() {
	                button.dispose();
	            });
	
	            self._buttons.push(button);
	
	            return button;
	        },
	
	        _createUploadHandler: function(additionalOptions, namespace) {
	            var self = this,
	                lastOnProgress = {},
	                options = {
	                    debug: this._options.debug,
	                    maxConnections: this._options.maxConnections,
	                    cors: this._options.cors,
	                    paramsStore: this._paramsStore,
	                    endpointStore: this._endpointStore,
	                    chunking: this._options.chunking,
	                    resume: this._options.resume,
	                    blobs: this._options.blobs,
	                    log: qq.bind(self.log, self),
	                    preventRetryParam: this._options.retry.preventRetryResponseProperty,
	                    onProgress: function(id, name, loaded, total) {
	                        if (loaded < 0 || total < 0) {
	                            return;
	                        }
	
	                        if (lastOnProgress[id]) {
	                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {
	                                self._onProgress(id, name, loaded, total);
	                                self._options.callbacks.onProgress(id, name, loaded, total);
	                            }
	                        }
	                        else {
	                            self._onProgress(id, name, loaded, total);
	                            self._options.callbacks.onProgress(id, name, loaded, total);
	                        }
	
	                        lastOnProgress[id] = {loaded: loaded, total: total};
	
	                    },
	                    onComplete: function(id, name, result, xhr) {
	                        delete lastOnProgress[id];
	
	                        var status = self.getUploads({id: id}).status,
	                            retVal;
	
	                        // This is to deal with some observed cases where the XHR readyStateChange handler is
	                        // invoked by the browser multiple times for the same XHR instance with the same state
	                        // readyState value.  Higher level: don't invoke complete-related code if we've already
	                        // done this.
	                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {
	                            return;
	                        }
	
	                        retVal = self._onComplete(id, name, result, xhr);
	
	                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback
	                        // until the promise has been fulfilled.
	                        if (retVal instanceof  qq.Promise) {
	                            retVal.done(function() {
	                                self._options.callbacks.onComplete(id, name, result, xhr);
	                            });
	                        }
	                        else {
	                            self._options.callbacks.onComplete(id, name, result, xhr);
	                        }
	                    },
	                    onCancel: function(id, name, cancelFinalizationEffort) {
	                        var promise = new qq.Promise();
	
	                        self._handleCheckedCallback({
	                            name: "onCancel",
	                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),
	                            onFailure: promise.failure,
	                            onSuccess: function() {
	                                cancelFinalizationEffort.then(function() {
	                                    self._onCancel(id, name);
	                                });
	
	                                promise.success();
	                            },
	                            identifier: id
	                        });
	
	                        return promise;
	                    },
	                    onUploadPrep: qq.bind(this._onUploadPrep, this),
	                    onUpload: function(id, name) {
	                        self._onUpload(id, name);
	                        self._options.callbacks.onUpload(id, name);
	                    },
	                    onUploadChunk: function(id, name, chunkData) {
	                        self._onUploadChunk(id, chunkData);
	                        self._options.callbacks.onUploadChunk(id, name, chunkData);
	                    },
	                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {
	                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);
	                    },
	                    onResume: function(id, name, chunkData) {
	                        return self._options.callbacks.onResume(id, name, chunkData);
	                    },
	                    onAutoRetry: function(id, name, responseJSON, xhr) {
	                        return self._onAutoRetry.apply(self, arguments);
	                    },
	                    onUuidChanged: function(id, newUuid) {
	                        self.log("Server requested UUID change from '" + self.getUuid(id) + "' to '" + newUuid + "'");
	                        self.setUuid(id, newUuid);
	                    },
	                    getName: qq.bind(self.getName, self),
	                    getUuid: qq.bind(self.getUuid, self),
	                    getSize: qq.bind(self.getSize, self),
	                    setSize: qq.bind(self._setSize, self),
	                    getDataByUuid: function(uuid) {
	                        return self.getUploads({uuid: uuid});
	                    },
	                    isQueued: function(id) {
	                        var status = self.getUploads({id: id}).status;
	                        return status === qq.status.QUEUED ||
	                            status === qq.status.SUBMITTED ||
	                            status === qq.status.UPLOAD_RETRYING ||
	                            status === qq.status.PAUSED;
	                    },
	                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,
	                    getIdsInBatch: self._uploadData.getIdsInBatch
	                };
	
	            qq.each(this._options.request, function(prop, val) {
	                options[prop] = val;
	            });
	
	            options.customHeaders = this._customHeadersStore;
	
	            if (additionalOptions) {
	                qq.each(additionalOptions, function(key, val) {
	                    options[key] = val;
	                });
	            }
	
	            return new qq.UploadHandlerController(options, namespace);
	        },
	
	        _fileOrBlobRejected: function(id) {
	            this._netUploadedOrQueued--;
	            this._uploadData.setStatus(id, qq.status.REJECTED);
	        },
	
	        _formatSize: function(bytes) {
	            var i = -1;
	            do {
	                bytes = bytes / 1000;
	                i++;
	            } while (bytes > 999);
	
	            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];
	        },
	
	        // Creates an internal object that tracks various properties of each extra button,
	        // and then actually creates the extra button.
	        _generateExtraButtonSpecs: function() {
	            var self = this;
	
	            this._extraButtonSpecs = {};
	
	            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {
	                var multiple = extraButtonOptionEntry.multiple,
	                    validation = qq.extend({}, self._options.validation, true),
	                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);
	
	                if (multiple === undefined) {
	                    multiple = self._options.multiple;
	                }
	
	                if (extraButtonSpec.validation) {
	                    qq.extend(validation, extraButtonOptionEntry.validation, true);
	                }
	
	                qq.extend(extraButtonSpec, {
	                    multiple: multiple,
	                    validation: validation
	                }, true);
	
	                self._initExtraButton(extraButtonSpec);
	            });
	        },
	
	        _getButton: function(buttonId) {
	            var extraButtonsSpec = this._extraButtonSpecs[buttonId];
	
	            if (extraButtonsSpec) {
	                return extraButtonsSpec.element;
	            }
	            else if (buttonId === this._defaultButtonId) {
	                return this._options.button;
	            }
	        },
	
	        /**
	         * Gets the internally used tracking ID for a button.
	         *
	         * @param buttonOrFileInputOrFile `File`, `<input type="file">`, or a button container element
	         * @returns {*} The button's ID, or undefined if no ID is recoverable
	         * @private
	         */
	        _getButtonId: function(buttonOrFileInputOrFile) {
	            var inputs, fileInput,
	                fileBlobOrInput = buttonOrFileInputOrFile;
	
	            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)
	            if (fileBlobOrInput instanceof qq.BlobProxy) {
	                fileBlobOrInput = fileBlobOrInput.referenceBlob;
	            }
	
	            // If the item is a `Blob` it will never be associated with a button or drop zone.
	            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {
	                if (qq.isFile(fileBlobOrInput)) {
	                    return fileBlobOrInput.qqButtonId;
	                }
	                else if (fileBlobOrInput.tagName.toLowerCase() === "input" &&
	                    fileBlobOrInput.type.toLowerCase() === "file") {
	
	                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);
	                }
	
	                inputs = fileBlobOrInput.getElementsByTagName("input");
	
	                qq.each(inputs, function(idx, input) {
	                    if (input.getAttribute("type") === "file") {
	                        fileInput = input;
	                        return false;
	                    }
	                });
	
	                if (fileInput) {
	                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);
	                }
	            }
	        },
	
	        _getNotFinished: function() {
	            return this._uploadData.retrieve({
	                status: [
	                    qq.status.UPLOADING,
	                    qq.status.UPLOAD_RETRYING,
	                    qq.status.QUEUED,
	                    qq.status.SUBMITTING,
	                    qq.status.SUBMITTED,
	                    qq.status.PAUSED
	                ]
	            }).length;
	        },
	
	        // Get the validation options for this button.  Could be the default validation option
	        // or a specific one assigned to this particular button.
	        _getValidationBase: function(buttonId) {
	            var extraButtonSpec = this._extraButtonSpecs[buttonId];
	
	            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;
	        },
	
	        _getValidationDescriptor: function(fileWrapper) {
	            if (fileWrapper.file instanceof qq.BlobProxy) {
	                return {
	                    name: qq.getFilename(fileWrapper.file.referenceBlob),
	                    size: fileWrapper.file.referenceBlob.size
	                };
	            }
	
	            return {
	                name: this.getUploads({id: fileWrapper.id}).name,
	                size: this.getUploads({id: fileWrapper.id}).size
	            };
	        },
	
	        _getValidationDescriptors: function(fileWrappers) {
	            var self = this,
	                fileDescriptors = [];
	
	            qq.each(fileWrappers, function(idx, fileWrapper) {
	                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));
	            });
	
	            return fileDescriptors;
	        },
	
	        // Allows camera access on either the default or an extra button for iOS devices.
	        _handleCameraAccess: function() {
	            if (this._options.camera.ios && qq.ios()) {
	                var acceptIosCamera = "image/*;capture=camera",
	                    button = this._options.camera.button,
	                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,
	                    optionRoot = this._options;
	
	                // If we are not targeting the default button, it is an "extra" button
	                if (buttonId && buttonId !== this._defaultButtonId) {
	                    optionRoot = this._extraButtonSpecs[buttonId];
	                }
	
	                // Camera access won't work in iOS if the `multiple` attribute is present on the file input
	                optionRoot.multiple = false;
	
	                // update the options
	                if (optionRoot.validation.acceptFiles === null) {
	                    optionRoot.validation.acceptFiles = acceptIosCamera;
	                }
	                else {
	                    optionRoot.validation.acceptFiles += "," + acceptIosCamera;
	                }
	
	                // update the already-created button
	                qq.each(this._buttons, function(idx, button) {
	                    if (button.getButtonId() === buttonId) {
	                        button.setMultiple(optionRoot.multiple);
	                        button.setAcceptFiles(optionRoot.acceptFiles);
	
	                        return false;
	                    }
	                });
	            }
	        },
	
	        _handleCheckedCallback: function(details) {
	            var self = this,
	                callbackRetVal = details.callback();
	
	            if (qq.isGenericPromise(callbackRetVal)) {
	                this.log(details.name + " - waiting for " + details.name + " promise to be fulfilled for " + details.identifier);
	                return callbackRetVal.then(
	                    function(successParam) {
	                        self.log(details.name + " promise success for " + details.identifier);
	                        details.onSuccess(successParam);
	                    },
	                    function() {
	                        if (details.onFailure) {
	                            self.log(details.name + " promise failure for " + details.identifier);
	                            details.onFailure();
	                        }
	                        else {
	                            self.log(details.name + " promise failure for " + details.identifier);
	                        }
	                    });
	            }
	
	            if (callbackRetVal !== false) {
	                details.onSuccess(callbackRetVal);
	            }
	            else {
	                if (details.onFailure) {
	                    this.log(details.name + " - return value was 'false' for " + details.identifier + ".  Invoking failure callback.");
	                    details.onFailure();
	                }
	                else {
	                    this.log(details.name + " - return value was 'false' for " + details.identifier + ".  Will not proceed.");
	                }
	            }
	
	            return callbackRetVal;
	        },
	
	        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.
	        _handleNewFile: function(file, batchId, newFileWrapperList) {
	            var self = this,
	                uuid = qq.getUniqueId(),
	                size = -1,
	                name = qq.getFilename(file),
	                actualFile = file.blob || file,
	                handler = this._customNewFileHandler ?
	                    this._customNewFileHandler :
	                    qq.bind(self._handleNewFileGeneric, self);
	
	            if (!qq.isInput(actualFile) && actualFile.size >= 0) {
	                size = actualFile.size;
	            }
	
	            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {
	                uploadData: self._uploadData,
	                paramsStore: self._paramsStore,
	                addFileToHandler: function(id, file) {
	                    self._handler.add(id, file);
	                    self._netUploadedOrQueued++;
	                    self._trackButton(id);
	                }
	            });
	        },
	
	        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {
	            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});
	
	            this._handler.add(id, file);
	            this._trackButton(id);
	
	            this._netUploadedOrQueued++;
	
	            fileList.push({id: id, file: file});
	        },
	
	        _handlePasteSuccess: function(blob, extSuppliedName) {
	            var extension = blob.type.split("/")[1],
	                name = extSuppliedName;
	
	            /*jshint eqeqeq: true, eqnull: true*/
	            if (name == null) {
	                name = this._options.paste.defaultName;
	            }
	
	            name += "." + extension;
	
	            this.addFiles({
	                name: name,
	                blob: blob
	            });
	        },
	
	        // Creates an extra button element
	        _initExtraButton: function(spec) {
	            var button = this._createUploadButton({
	                accept: spec.validation.acceptFiles,
	                allowedExtensions: spec.validation.allowedExtensions,
	                element: spec.element,
	                folders: spec.folders,
	                multiple: spec.multiple,
	                title: spec.fileInputTitle
	            });
	
	            this._extraButtonSpecs[button.getButtonId()] = spec;
	        },
	
	        _initFormSupportAndParams: function() {
	            this._formSupport = qq.FormSupport && new qq.FormSupport(
	                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)
	            );
	
	            if (this._formSupport && this._formSupport.attachedToForm) {
	                this._paramsStore = this._createStore(
	                    this._options.request.params,  this._formSupport.getFormInputsAsObject
	                );
	
	                this._options.autoUpload = this._formSupport.newAutoUpload;
	                if (this._formSupport.newEndpoint) {
	                    this._options.request.endpoint = this._formSupport.newEndpoint;
	                }
	            }
	            else {
	                this._paramsStore = this._createStore(this._options.request.params);
	            }
	        },
	
	        _isDeletePossible: function() {
	            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {
	                return false;
	            }
	
	            if (this._options.cors.expected) {
	                if (qq.supportedFeatures.deleteFileCorsXhr) {
	                    return true;
	                }
	
	                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {
	                    return true;
	                }
	
	                return false;
	            }
	
	            return true;
	        },
	
	        _isAllowedExtension: function(allowed, fileName) {
	            var valid = false;
	
	            if (!allowed.length) {
	                return true;
	            }
	
	            qq.each(allowed, function(idx, allowedExt) {
	                /**
	                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the
	                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.
	                 */
	                if (qq.isString(allowedExt)) {
	                    /*jshint eqeqeq: true, eqnull: true*/
	                    var extRegex = new RegExp("\\." + allowedExt + "$", "i");
	
	                    if (fileName.match(extRegex) != null) {
	                        valid = true;
	                        return false;
	                    }
	                }
	            });
	
	            return valid;
	        },
	
	        /**
	         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.
	         *
	         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error
	         * @param maybeNameOrNames names of the items that have failed, if applicable
	         * @param item `File`, `Blob`, or `<input type="file">`
	         * @private
	         */
	        _itemError: function(code, maybeNameOrNames, item) {
	            var message = this._options.messages[code],
	                allowedExtensions = [],
	                names = [].concat(maybeNameOrNames),
	                name = names[0],
	                buttonId = this._getButtonId(item),
	                validationBase = this._getValidationBase(buttonId),
	                extensionsForMessage, placeholderMatch;
	
	            function r(name, replacement) { message = message.replace(name, replacement); }
	
	            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {
	                /**
	                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the
	                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.
	                 */
	                if (qq.isString(allowedExtension)) {
	                    allowedExtensions.push(allowedExtension);
	                }
	            });
	
	            extensionsForMessage = allowedExtensions.join(", ").toLowerCase();
	
	            r("{file}", this._options.formatFileName(name));
	            r("{extensions}", extensionsForMessage);
	            r("{sizeLimit}", this._formatSize(validationBase.sizeLimit));
	            r("{minSizeLimit}", this._formatSize(validationBase.minSizeLimit));
	
	            placeholderMatch = message.match(/(\{\w+\})/g);
	            if (placeholderMatch !== null) {
	                qq.each(placeholderMatch, function(idx, placeholder) {
	                    r(placeholder, names[idx]);
	                });
	            }
	
	            this._options.callbacks.onError(null, name, message, undefined);
	
	            return message;
	        },
	
	        /**
	         * Conditionally orders a manual retry of a failed upload.
	         *
	         * @param id File ID of the failed upload
	         * @param callback Optional callback to invoke if a retry is prudent.
	         * In lieu of asking the upload handler to retry.
	         * @returns {boolean} true if a manual retry will occur
	         * @private
	         */
	        _manualRetry: function(id, callback) {
	            if (this._onBeforeManualRetry(id)) {
	                this._netUploadedOrQueued++;
	                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);
	
	                if (callback) {
	                    callback(id);
	                }
	                else {
	                    this._handler.retry(id);
	                }
	
	                return true;
	            }
	        },
	
	        _maybeAllComplete: function(id, status) {
	            var self = this,
	                notFinished = this._getNotFinished();
	
	            if (status === qq.status.UPLOAD_SUCCESSFUL) {
	                this._succeededSinceLastAllComplete.push(id);
	            }
	            else if (status === qq.status.UPLOAD_FAILED) {
	                this._failedSinceLastAllComplete.push(id);
	            }
	
	            if (notFinished === 0 &&
	                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {
	                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete
	                setTimeout(function() {
	                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);
	                }, 0);
	            }
	        },
	
	        _maybeHandleIos8SafariWorkaround: function() {
	            var self = this;
	
	            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {
	                setTimeout(function() {
	                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);
	                }, 0);
	                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);
	            }
	        },
	
	        _maybeParseAndSendUploadError: function(id, name, response, xhr) {
	            // Assuming no one will actually set the response code to something other than 200
	            // and still set 'success' to true...
	            if (!response.success) {
	                if (xhr && xhr.status !== 200 && !response.error) {
	                    this._options.callbacks.onError(id, name, "XHR returned response code " + xhr.status, xhr);
	                }
	                else {
	                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;
	                    this._options.callbacks.onError(id, name, errorReason, xhr);
	                }
	            }
	        },
	
	        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {
	            var self = this;
	
	            if (items.length > index) {
	                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {
	                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks
	                    setTimeout(function() {
	                        var validationDescriptor = self._getValidationDescriptor(items[index]),
	                            buttonId = self._getButtonId(items[index].file),
	                            button = self._getButton(buttonId);
	
	                        self._handleCheckedCallback({
	                            name: "onValidate",
	                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),
	                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),
	                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),
	                            identifier: "Item '" + validationDescriptor.name + "', size: " + validationDescriptor.size
	                        });
	                    }, 0);
	                }
	                else if (!validItem) {
	                    for (; index < items.length; index++) {
	                        self._fileOrBlobRejected(items[index].id);
	                    }
	                }
	            }
	        },
	
	        _onAllComplete: function(successful, failed) {
	            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);
	
	            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));
	
	            this._succeededSinceLastAllComplete = [];
	            this._failedSinceLastAllComplete = [];
	        },
	
	        /**
	         * Attempt to automatically retry a failed upload.
	         *
	         * @param id The file ID of the failed upload
	         * @param name The name of the file associated with the failed upload
	         * @param responseJSON Response from the server, parsed into a javascript object
	         * @param xhr Ajax transport used to send the failed request
	         * @param callback Optional callback to be invoked if a retry is prudent.
	         * Invoked in lieu of asking the upload handler to retry.
	         * @returns {boolean} true if an auto-retry will occur
	         * @private
	         */
	        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {
	            var self = this;
	
	            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];
	
	            if (self._shouldAutoRetry(id, name, responseJSON)) {
	                self._maybeParseAndSendUploadError.apply(self, arguments);
	                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);
	                self._onBeforeAutoRetry(id, name);
	
	                self._retryTimeouts[id] = setTimeout(function() {
	                    self.log("Retrying " + name + "...");
	                    self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);
	
	                    if (callback) {
	                        callback(id);
	                    }
	                    else {
	                        self._handler.retry(id);
	                    }
	                }, self._options.retry.autoAttemptDelay * 1000);
	
	                return true;
	            }
	        },
	
	        _onBeforeAutoRetry: function(id, name) {
	            this.log("Waiting " + this._options.retry.autoAttemptDelay + " seconds before retrying " + name + "...");
	        },
	
	        //return false if we should not attempt the requested retry
	        _onBeforeManualRetry: function(id) {
	            var itemLimit = this._currentItemLimit,
	                fileName;
	
	            if (this._preventRetries[id]) {
	                this.log("Retries are forbidden for id " + id, "warn");
	                return false;
	            }
	            else if (this._handler.isValid(id)) {
	                fileName = this.getName(id);
	
	                if (this._options.callbacks.onManualRetry(id, fileName) === false) {
	                    return false;
	                }
	
	                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {
	                    this._itemError("retryFailTooManyItems");
	                    return false;
	                }
	
	                this.log("Retrying upload for '" + fileName + "' (id: " + id + ")...");
	                return true;
	            }
	            else {
	                this.log("'" + id + "' is not a valid file ID", "error");
	                return false;
	            }
	        },
	
	        _onCancel: function(id, name) {
	            this._netUploadedOrQueued--;
	
	            clearTimeout(this._retryTimeouts[id]);
	
	            var storedItemIndex = qq.indexOf(this._storedIds, id);
	            if (!this._options.autoUpload && storedItemIndex >= 0) {
	                this._storedIds.splice(storedItemIndex, 1);
	            }
	
	            this._uploadData.setStatus(id, qq.status.CANCELED);
	        },
	
	        _onComplete: function(id, name, result, xhr) {
	            if (!result.success) {
	                this._netUploadedOrQueued--;
	                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);
	
	                if (result[this._options.retry.preventRetryResponseProperty] === true) {
	                    this._preventRetries[id] = true;
	                }
	            }
	            else {
	                if (result.thumbnailUrl) {
	                    this._thumbnailUrls[id] = result.thumbnailUrl;
	                }
	
	                this._netUploaded++;
	                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);
	            }
	
	            this._maybeParseAndSendUploadError(id, name, result, xhr);
	
	            return result.success ? true : false;
	        },
	
	        _onDelete: function(id) {
	            this._uploadData.setStatus(id, qq.status.DELETING);
	        },
	
	        _onDeleteComplete: function(id, xhrOrXdr, isError) {
	            var name = this.getName(id);
	
	            if (isError) {
	                this._uploadData.setStatus(id, qq.status.DELETE_FAILED);
	                this.log("Delete request for '" + name + "' has failed.", "error");
	
	                // For error reporing, we only have accesss to the response status if this is not
	                // an `XDomainRequest`.
	                if (xhrOrXdr.withCredentials === undefined) {
	                    this._options.callbacks.onError(id, name, "Delete request failed", xhrOrXdr);
	                }
	                else {
	                    this._options.callbacks.onError(id, name, "Delete request failed with response code " + xhrOrXdr.status, xhrOrXdr);
	                }
	            }
	            else {
	                this._netUploadedOrQueued--;
	                this._netUploaded--;
	                this._handler.expunge(id);
	                this._uploadData.setStatus(id, qq.status.DELETED);
	                this.log("Delete request for '" + name + "' has succeeded.");
	            }
	        },
	
	        _onInputChange: function(input) {
	            var fileIndex;
	
	            if (qq.supportedFeatures.ajaxUploading) {
	                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {
	                    this._annotateWithButtonId(input.files[fileIndex], input);
	                }
	
	                this.addFiles(input.files);
	            }
	            // Android 2.3.x will fire `onchange` even if no file has been selected
	            else if (input.value.length > 0) {
	                this.addFiles(input);
	            }
	
	            qq.each(this._buttons, function(idx, button) {
	                button.reset();
	            });
	        },
	
	        _onProgress: function(id, name, loaded, total) {
	            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);
	        },
	
	        _onSubmit: function(id, name) {
	            //nothing to do yet in core uploader
	        },
	
	        _onSubmitCallbackSuccess: function(id, name) {
	            this._onSubmit.apply(this, arguments);
	            this._uploadData.setStatus(id, qq.status.SUBMITTED);
	            this._onSubmitted.apply(this, arguments);
	
	            if (this._options.autoUpload) {
	                this._options.callbacks.onSubmitted.apply(this, arguments);
	                this._uploadFile(id);
	            }
	            else {
	                this._storeForLater(id);
	                this._options.callbacks.onSubmitted.apply(this, arguments);
	            }
	        },
	
	        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {
	            var uuid = this.getUuid(id),
	                adjustedOnSuccessCallback;
	
	            if (onSuccessCallback) {
	                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);
	            }
	
	            if (this._isDeletePossible()) {
	                this._handleCheckedCallback({
	                    name: "onSubmitDelete",
	                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),
	                    onSuccess: adjustedOnSuccessCallback ||
	                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),
	                    identifier: id
	                });
	                return true;
	            }
	            else {
	                this.log("Delete request ignored for ID " + id + ", delete feature is disabled or request not possible " +
	                    "due to CORS on a user agent that does not support pre-flighting.", "warn");
	                return false;
	            }
	        },
	
	        _onSubmitted: function(id) {
	            //nothing to do in the base uploader
	        },
	
	        _onTotalProgress: function(loaded, total) {
	            this._options.callbacks.onTotalProgress(loaded, total);
	        },
	
	        _onUploadPrep: function(id) {
	            // nothing to do in the core uploader for now
	        },
	
	        _onUpload: function(id, name) {
	            this._uploadData.setStatus(id, qq.status.UPLOADING);
	        },
	
	        _onUploadChunk: function(id, chunkData) {
	            //nothing to do in the base uploader
	        },
	
	        _onUploadStatusChange: function(id, oldStatus, newStatus) {
	            // Make sure a "queued" retry attempt is canceled if the upload has been paused
	            if (newStatus === qq.status.PAUSED) {
	                clearTimeout(this._retryTimeouts[id]);
	            }
	        },
	
	        _onValidateBatchCallbackFailure: function(fileWrappers) {
	            var self = this;
	
	            qq.each(fileWrappers, function(idx, fileWrapper) {
	                self._fileOrBlobRejected(fileWrapper.id);
	            });
	        },
	
	        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {
	            var errorMessage,
	                itemLimit = this._currentItemLimit,
	                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;
	
	            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {
	                if (items.length > 0) {
	                    this._handleCheckedCallback({
	                        name: "onValidate",
	                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),
	                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),
	                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),
	                        identifier: "Item '" + items[0].file.name + "', size: " + items[0].file.size
	                    });
	                }
	                else {
	                    this._itemError("noFilesError");
	                }
	            }
	            else {
	                this._onValidateBatchCallbackFailure(items);
	                errorMessage = this._options.messages.tooManyItemsError
	                    .replace(/\{netItems\}/g, proposedNetFilesUploadedOrQueued)
	                    .replace(/\{itemLimit\}/g, itemLimit);
	                this._batchError(errorMessage);
	            }
	        },
	
	        _onValidateCallbackFailure: function(items, index, params, endpoint) {
	            var nextIndex = index + 1;
	
	            this._fileOrBlobRejected(items[index].id, items[index].file.name);
	
	            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);
	        },
	
	        _onValidateCallbackSuccess: function(items, index, params, endpoint) {
	            var self = this,
	                nextIndex = index + 1,
	                validationDescriptor = this._getValidationDescriptor(items[index]);
	
	            this._validateFileOrBlobData(items[index], validationDescriptor)
	                .then(
	                function() {
	                    self._upload(items[index].id, params, endpoint);
	                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);
	                },
	                function() {
	                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);
	                }
	            );
	        },
	
	        _prepareItemsForUpload: function(items, params, endpoint) {
	            if (items.length === 0) {
	                this._itemError("noFilesError");
	                return;
	            }
	
	            var validationDescriptors = this._getValidationDescriptors(items),
	                buttonId = this._getButtonId(items[0].file),
	                button = this._getButton(buttonId);
	
	            this._handleCheckedCallback({
	                name: "onValidateBatch",
	                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),
	                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),
	                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),
	                identifier: "batch validation"
	            });
	        },
	
	        _preventLeaveInProgress: function() {
	            var self = this;
	
	            this._disposeSupport.attach(window, "beforeunload", function(e) {
	                if (self.getInProgress()) {
	                    e = e || window.event;
	                    // for ie, ff
	                    e.returnValue = self._options.messages.onLeave;
	                    // for webkit
	                    return self._options.messages.onLeave;
	                }
	            });
	        },
	
	        // Attempts to refresh session data only if the `qq.Session` module exists
	        // and a session endpoint has been specified.  The `onSessionRequestComplete`
	        // callback will be invoked once the refresh is complete.
	        _refreshSessionData: function() {
	            var self = this,
	                options = this._options.session;
	
	            /* jshint eqnull:true */
	            if (qq.Session && this._options.session.endpoint != null) {
	                if (!this._session) {
	                    qq.extend(options, this._options.cors);
	
	                    options.log = qq.bind(this.log, this);
	                    options.addFileRecord = qq.bind(this._addCannedFile, this);
	
	                    this._session = new qq.Session(options);
	                }
	
	                setTimeout(function() {
	                    self._session.refresh().then(function(response, xhrOrXdr) {
	                        self._sessionRequestComplete();
	                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);
	
	                    }, function(response, xhrOrXdr) {
	
	                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);
	                    });
	                }, 0);
	            }
	        },
	
	        _sessionRequestComplete: function() {},
	
	        _setSize: function(id, newSize) {
	            this._uploadData.updateSize(id, newSize);
	            this._totalProgress && this._totalProgress.onNewSize(id);
	        },
	
	        _shouldAutoRetry: function(id, name, responseJSON) {
	            var uploadData = this._uploadData.retrieve({id: id});
	
	            /*jshint laxbreak: true */
	            if (!this._preventRetries[id]
	                && this._options.retry.enableAuto
	                && uploadData.status !== qq.status.PAUSED) {
	
	                if (this._autoRetries[id] === undefined) {
	                    this._autoRetries[id] = 0;
	                }
	
	                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {
	                    this._autoRetries[id] += 1;
	                    return true;
	                }
	            }
	
	            return false;
	        },
	
	        _storeForLater: function(id) {
	            this._storedIds.push(id);
	        },
	
	        // Maps a file with the button that was used to select it.
	        _trackButton: function(id) {
	            var buttonId;
	
	            if (qq.supportedFeatures.ajaxUploading) {
	                buttonId = this._handler.getFile(id).qqButtonId;
	            }
	            else {
	                buttonId = this._getButtonId(this._handler.getInput(id));
	            }
	
	            if (buttonId) {
	                this._buttonIdsForFileIds[id] = buttonId;
	            }
	        },
	
	        _updateFormSupportAndParams: function(formElementOrId) {
	            this._options.form.element = formElementOrId;
	
	            this._formSupport = qq.FormSupport && new qq.FormSupport(
	                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)
	                );
	
	            if (this._formSupport && this._formSupport.attachedToForm) {
	                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);
	
	                this._options.autoUpload = this._formSupport.newAutoUpload;
	                if (this._formSupport.newEndpoint) {
	                    this.setEndpoint(this._formSupport.newEndpoint);
	                }
	            }
	        },
	
	        _upload: function(id, params, endpoint) {
	            var name = this.getName(id);
	
	            if (params) {
	                this.setParams(params, id);
	            }
	
	            if (endpoint) {
	                this.setEndpoint(endpoint, id);
	            }
	
	            this._handleCheckedCallback({
	                name: "onSubmit",
	                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),
	                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),
	                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),
	                identifier: id
	            });
	        },
	
	        _uploadFile: function(id) {
	            if (!this._handler.upload(id)) {
	                this._uploadData.setStatus(id, qq.status.QUEUED);
	            }
	        },
	
	        _uploadStoredFiles: function() {
	            var idToUpload, stillSubmitting,
	                self = this;
	
	            while (this._storedIds.length) {
	                idToUpload = this._storedIds.shift();
	                this._uploadFile(idToUpload);
	            }
	
	            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit
	            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;
	            if (stillSubmitting) {
	                qq.log("Still waiting for " + stillSubmitting + " files to clear submit queue. Will re-parse stored IDs array shortly.");
	                setTimeout(function() {
	                    self._uploadStoredFiles();
	                }, 1000);
	            }
	        },
	
	        /**
	         * Performs some internal validation checks on an item, defined in the `validation` option.
	         *
	         * @param fileWrapper Wrapper containing a `file` along with an `id`
	         * @param validationDescriptor Normalized information about the item (`size`, `name`).
	         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file
	         * @private
	         */
	        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {
	            var self = this,
	                file = (function() {
	                    if (fileWrapper.file instanceof qq.BlobProxy) {
	                        return fileWrapper.file.referenceBlob;
	                    }
	                    return fileWrapper.file;
	                }()),
	                name = validationDescriptor.name,
	                size = validationDescriptor.size,
	                buttonId = this._getButtonId(fileWrapper.file),
	                validationBase = this._getValidationBase(buttonId),
	                validityChecker = new qq.Promise();
	
	            validityChecker.then(
	                function() {},
	                function() {
	                    self._fileOrBlobRejected(fileWrapper.id, name);
	                });
	
	            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {
	                this._itemError("typeError", name, file);
	                return validityChecker.failure();
	            }
	
	            if (size === 0) {
	                this._itemError("emptyError", name, file);
	                return validityChecker.failure();
	            }
	
	            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {
	                this._itemError("sizeError", name, file);
	                return validityChecker.failure();
	            }
	
	            if (size > 0 && size < validationBase.minSizeLimit) {
	                this._itemError("minSizeError", name, file);
	                return validityChecker.failure();
	            }
	
	            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {
	                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(
	                    validityChecker.success,
	                    function(errorCode) {
	                        self._itemError(errorCode + "ImageError", name, file);
	                        validityChecker.failure();
	                    }
	                );
	            }
	            else {
	                validityChecker.success();
	            }
	
	            return validityChecker;
	        },
	
	        _wrapCallbacks: function() {
	            var self, safeCallback, prop;
	
	            self = this;
	
	            safeCallback = function(name, callback, args) {
	                var errorMsg;
	
	                try {
	                    return callback.apply(self, args);
	                }
	                catch (exception) {
	                    errorMsg = exception.message || exception.toString();
	                    self.log("Caught exception in '" + name + "' callback - " + errorMsg, "error");
	                }
	            };
	
	            /* jshint forin: false, loopfunc: true */
	            for (prop in this._options.callbacks) {
	                (function() {
	                    var callbackName, callbackFunc;
	                    callbackName = prop;
	                    callbackFunc = self._options.callbacks[callbackName];
	                    self._options.callbacks[callbackName] = function() {
	                        return safeCallback(callbackName, callbackFunc, arguments);
	                    };
	                }());
	            }
	        }
	    };
	}());
	
	/*globals qq*/
	(function() {
	    "use strict";
	
	    qq.FineUploaderBasic = function(o) {
	        var self = this;
	
	        // These options define FineUploaderBasic mode.
	        this._options = {
	            debug: false,
	            button: null,
	            multiple: true,
	            maxConnections: 3,
	            disableCancelForFormUploads: false,
	            autoUpload: true,
	
	            request: {
	                customHeaders: {},
	                endpoint: "/server/upload",
	                filenameParam: "qqfilename",
	                forceMultipart: true,
	                inputName: "qqfile",
	                method: "POST",
	                params: {},
	                paramsInBody: true,
	                totalFileSizeName: "qqtotalfilesize",
	                uuidName: "qquuid"
	            },
	
	            validation: {
	                allowedExtensions: [],
	                sizeLimit: 0,
	                minSizeLimit: 0,
	                itemLimit: 0,
	                stopOnFirstInvalidFile: true,
	                acceptFiles: null,
	                image: {
	                    maxHeight: 0,
	                    maxWidth: 0,
	                    minHeight: 0,
	                    minWidth: 0
	                }
	            },
	
	            callbacks: {
	                onSubmit: function(id, name) {},
	                onSubmitted: function(id, name) {},
	                onComplete: function(id, name, responseJSON, maybeXhr) {},
	                onAllComplete: function(successful, failed) {},
	                onCancel: function(id, name) {},
	                onUpload: function(id, name) {},
	                onUploadChunk: function(id, name, chunkData) {},
	                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},
	                onResume: function(id, fileName, chunkData) {},
	                onProgress: function(id, name, loaded, total) {},
	                onTotalProgress: function(loaded, total) {},
	                onError: function(id, name, reason, maybeXhrOrXdr) {},
	                onAutoRetry: function(id, name, attemptNumber) {},
	                onManualRetry: function(id, name) {},
	                onValidateBatch: function(fileOrBlobData) {},
	                onValidate: function(fileOrBlobData) {},
	                onSubmitDelete: function(id) {},
	                onDelete: function(id) {},
	                onDeleteComplete: function(id, xhrOrXdr, isError) {},
	                onPasteReceived: function(blob) {},
	                onStatusChange: function(id, oldStatus, newStatus) {},
	                onSessionRequestComplete: function(response, success, xhrOrXdr) {}
	            },
	
	            messages: {
	                typeError: "{file} has an invalid extension. Valid extension(s): {extensions}.",
	                sizeError: "{file} is too large, maximum file size is {sizeLimit}.",
	                minSizeError: "{file} is too small, minimum file size is {minSizeLimit}.",
	                emptyError: "{file} is empty, please select files again without it.",
	                noFilesError: "No files to upload.",
	                tooManyItemsError: "Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.",
	                maxHeightImageError: "Image is too tall.",
	                maxWidthImageError: "Image is too wide.",
	                minHeightImageError: "Image is not tall enough.",
	                minWidthImageError: "Image is not wide enough.",
	                retryFailTooManyItems: "Retry failed - you have reached your file limit.",
	                onLeave: "The files are being uploaded, if you leave now the upload will be canceled.",
	                unsupportedBrowserIos8Safari: "Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues."
	            },
	
	            retry: {
	                enableAuto: false,
	                maxAutoAttempts: 3,
	                autoAttemptDelay: 5,
	                preventRetryResponseProperty: "preventRetry"
	            },
	
	            classes: {
	                buttonHover: "qq-upload-button-hover",
	                buttonFocus: "qq-upload-button-focus"
	            },
	
	            chunking: {
	                enabled: false,
	                concurrent: {
	                    enabled: false
	                },
	                mandatory: false,
	                paramNames: {
	                    partIndex: "qqpartindex",
	                    partByteOffset: "qqpartbyteoffset",
	                    chunkSize: "qqchunksize",
	                    totalFileSize: "qqtotalfilesize",
	                    totalParts: "qqtotalparts"
	                },
	                partSize: 2000000,
	                // only relevant for traditional endpoints, only required when concurrent.enabled === true
	                success: {
	                    endpoint: null
	                }
	            },
	
	            resume: {
	                enabled: false,
	                recordsExpireIn: 7, //days
	                paramNames: {
	                    resuming: "qqresume"
	                }
	            },
	
	            formatFileName: function(fileOrBlobName) {
	                return fileOrBlobName;
	            },
	
	            text: {
	                defaultResponseError: "Upload failure reason unknown",
	                fileInputTitle: "file input",
	                sizeSymbols: ["kB", "MB", "GB", "TB", "PB", "EB"]
	            },
	
	            deleteFile: {
	                enabled: false,
	                method: "DELETE",
	                endpoint: "/server/upload",
	                customHeaders: {},
	                params: {}
	            },
	
	            cors: {
	                expected: false,
	                sendCredentials: false,
	                allowXdr: false
	            },
	
	            blobs: {
	                defaultName: "misc_data"
	            },
	
	            paste: {
	                targetElement: null,
	                defaultName: "pasted_image"
	            },
	
	            camera: {
	                ios: false,
	
	                // if ios is true: button is null means target the default button, otherwise target the button specified
	                button: null
	            },
	
	            // This refers to additional upload buttons to be handled by Fine Uploader.
	            // Each element is an object, containing `element` as the only required
	            // property.  The `element` must be a container that will ultimately
	            // contain an invisible `<input type="file">` created by Fine Uploader.
	            // Optional properties of each object include `multiple`, `validation`,
	            // and `folders`.
	            extraButtons: [],
	
	            // Depends on the session module.  Used to query the server for an initial file list
	            // during initialization and optionally after a `reset`.
	            session: {
	                endpoint: null,
	                params: {},
	                customHeaders: {},
	                refreshOnReset: true
	            },
	
	            // Send parameters associated with an existing form along with the files
	            form: {
	                // Element ID, HTMLElement, or null
	                element: "qq-form",
	
	                // Overrides the base `autoUpload`, unless `element` is null.
	                autoUpload: false,
	
	                // true = upload files on form submission (and squelch submit event)
	                interceptSubmit: true
	            },
	
	            // scale images client side, upload a new file for each scaled version
	            scaling: {
	                // send the original file as well
	                sendOriginal: true,
	
	                // fox orientation for scaled images
	                orient: true,
	
	                // If null, scaled image type will match reference image type.  This value will be referred to
	                // for any size record that does not specific a type.
	                defaultType: null,
	
	                defaultQuality: 80,
	
	                failureText: "Failed to scale",
	
	                includeExif: false,
	
	                // metadata about each requested scaled version
	                sizes: []
	            },
	
	            workarounds: {
	                iosEmptyVideos: true,
	                ios8SafariUploads: true,
	                ios8BrowserCrash: false
	            }
	        };
	
	        // Replace any default options with user defined ones
	        qq.extend(this._options, o, true);
	
	        this._buttons = [];
	        this._extraButtonSpecs = {};
	        this._buttonIdsForFileIds = [];
	
	        this._wrapCallbacks();
	        this._disposeSupport =  new qq.DisposeSupport();
	
	        this._storedIds = [];
	        this._autoRetries = [];
	        this._retryTimeouts = [];
	        this._preventRetries = [];
	        this._thumbnailUrls = [];
	
	        this._netUploadedOrQueued = 0;
	        this._netUploaded = 0;
	        this._uploadData = this._createUploadDataTracker();
	
	        this._initFormSupportAndParams();
	
	        this._customHeadersStore = this._createStore(this._options.request.customHeaders);
	        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);
	
	        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);
	
	        this._endpointStore = this._createStore(this._options.request.endpoint);
	        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);
	
	        this._handler = this._createUploadHandler();
	
	        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();
	
	        if (this._options.button) {
	            this._defaultButtonId = this._createUploadButton({
	                element: this._options.button,
	                title: this._options.text.fileInputTitle
	            }).getButtonId();
	        }
	
	        this._generateExtraButtonSpecs();
	
	        this._handleCameraAccess();
	
	        if (this._options.paste.targetElement) {
	            if (qq.PasteSupport) {
	                this._pasteHandler = this._createPasteHandler();
	            }
	            else {
	                this.log("Paste support module not found", "error");
	            }
	        }
	
	        this._preventLeaveInProgress();
	
	        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));
	        this._refreshSessionData();
	
	        this._succeededSinceLastAllComplete = [];
	        this._failedSinceLastAllComplete = [];
	
	        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};
	        if (this._scaler.enabled) {
	            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);
	        }
	
	        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {
	            this._totalProgress = new qq.TotalProgress(
	                qq.bind(this._onTotalProgress, this),
	
	                function(id) {
	                    var entry = self._uploadData.retrieve({id: id});
	                    return (entry && entry.size) || 0;
	                }
	            );
	        }
	
	        this._currentItemLimit = this._options.validation.itemLimit;
	    };
	
	    // Define the private & public API methods.
	    qq.FineUploaderBasic.prototype = qq.basePublicApi;
	    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);
	}());
	
	/*globals qq, XDomainRequest*/
	/** Generic class for sending non-upload ajax requests and handling the associated responses **/
	qq.AjaxRequester = function(o) {
	    "use strict";
	
	    var log, shouldParamsBeInQueryString,
	        queue = [],
	        requestData = {},
	        options = {
	            acceptHeader: null,
	            validMethods: ["PATCH", "POST", "PUT"],
	            method: "POST",
	            contentType: "application/x-www-form-urlencoded",
	            maxConnections: 3,
	            customHeaders: {},
	            endpointStore: {},
	            paramsStore: {},
	            mandatedParams: {},
	            allowXRequestedWithAndCacheControl: true,
	            successfulResponseCodes: {
	                DELETE: [200, 202, 204],
	                PATCH: [200, 201, 202, 203, 204],
	                POST: [200, 201, 202, 203, 204],
	                PUT: [200, 201, 202, 203, 204],
	                GET: [200]
	            },
	            cors: {
	                expected: false,
	                sendCredentials: false
	            },
	            log: function(str, level) {},
	            onSend: function(id) {},
	            onComplete: function(id, xhrOrXdr, isError) {},
	            onProgress: null
	        };
	
	    qq.extend(options, o);
	    log = options.log;
	
	    if (qq.indexOf(options.validMethods, options.method) < 0) {
	        throw new Error("'" + options.method + "' is not a supported method for this type of request!");
	    }
	
	    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)
	    // are defined by the W3C in the CORS spec as a list of methods that, in part,
	    // make a CORS request eligible to be exempt from preflighting.
	    function isSimpleMethod() {
	        return qq.indexOf(["GET", "POST", "HEAD"], options.method) >= 0;
	    }
	
	    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)
	    // are defined by the W3C in the CORS spec as a list of headers that, in part,
	    // make a CORS request eligible to be exempt from preflighting.
	    function containsNonSimpleHeaders(headers) {
	        var containsNonSimple = false;
	
	        qq.each(containsNonSimple, function(idx, header) {
	            if (qq.indexOf(["Accept", "Accept-Language", "Content-Language", "Content-Type"], header) < 0) {
	                containsNonSimple = true;
	                return false;
	            }
	        });
	
	        return containsNonSimple;
	    }
	
	    function isXdr(xhr) {
	        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.
	        return options.cors.expected && xhr.withCredentials === undefined;
	    }
	
	    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.
	    function getCorsAjaxTransport() {
	        var xhrOrXdr;
	
	        if (window.XMLHttpRequest || window.ActiveXObject) {
	            xhrOrXdr = qq.createXhrInstance();
	
	            if (xhrOrXdr.withCredentials === undefined) {
	                xhrOrXdr = new XDomainRequest();
	                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment
	                xhrOrXdr.onload = function() {};
	                xhrOrXdr.onerror = function() {};
	                xhrOrXdr.ontimeout = function() {};
	                xhrOrXdr.onprogress = function() {};
	            }
	        }
	
	        return xhrOrXdr;
	    }
	
	    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.
	    function getXhrOrXdr(id, suppliedXhr) {
	        var xhrOrXdr = requestData[id].xhr;
	
	        if (!xhrOrXdr) {
	            if (suppliedXhr) {
	                xhrOrXdr = suppliedXhr;
	            }
	            else {
	                if (options.cors.expected) {
	                    xhrOrXdr = getCorsAjaxTransport();
	                }
	                else {
	                    xhrOrXdr = qq.createXhrInstance();
	                }
	            }
	
	            requestData[id].xhr = xhrOrXdr;
	        }
	
	        return xhrOrXdr;
	    }
	
	    // Removes element from queue, sends next request
	    function dequeue(id) {
	        var i = qq.indexOf(queue, id),
	            max = options.maxConnections,
	            nextId;
	
	        delete requestData[id];
	        queue.splice(i, 1);
	
	        if (queue.length >= max && i < max) {
	            nextId = queue[max - 1];
	            sendRequest(nextId);
	        }
	    }
	
	    function onComplete(id, xdrError) {
	        var xhr = getXhrOrXdr(id),
	            method = options.method,
	            isError = xdrError === true;
	
	        dequeue(id);
	
	        if (isError) {
	            log(method + " request for " + id + " has failed", "error");
	        }
	        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {
	            isError = true;
	            log(method + " request for " + id + " has failed - response code " + xhr.status, "error");
	        }
	
	        options.onComplete(id, xhr, isError);
	    }
	
	    function getParams(id) {
	        var onDemandParams = requestData[id].additionalParams,
	            mandatedParams = options.mandatedParams,
	            params;
	
	        if (options.paramsStore.get) {
	            params = options.paramsStore.get(id);
	        }
	
	        if (onDemandParams) {
	            qq.each(onDemandParams, function(name, val) {
	                params = params || {};
	                params[name] = val;
	            });
	        }
	
	        if (mandatedParams) {
	            qq.each(mandatedParams, function(name, val) {
	                params = params || {};
	                params[name] = val;
	            });
	        }
	
	        return params;
	    }
	
	    function sendRequest(id, optXhr) {
	        var xhr = getXhrOrXdr(id, optXhr),
	            method = options.method,
	            params = getParams(id),
	            payload = requestData[id].payload,
	            url;
	
	        options.onSend(id);
	
	        url = createUrl(id, params, requestData[id].additionalQueryParams);
	
	        // XDR and XHR status detection APIs differ a bit.
	        if (isXdr(xhr)) {
	            xhr.onload = getXdrLoadHandler(id);
	            xhr.onerror = getXdrErrorHandler(id);
	        }
	        else {
	            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);
	        }
	
	        registerForUploadProgress(id);
	
	        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.
	        xhr.open(method, url, true);
	
	        // Instruct the transport to send cookies along with the CORS request,
	        // unless we are using `XDomainRequest`, which is not capable of this.
	        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {
	            xhr.withCredentials = true;
	        }
	
	        setHeaders(id);
	
	        log("Sending " + method + " request for " + id);
	
	        if (payload) {
	            xhr.send(payload);
	        }
	        else if (shouldParamsBeInQueryString || !params) {
	            xhr.send();
	        }
	        else if (params && options.contentType && options.contentType.toLowerCase().indexOf("application/x-www-form-urlencoded") >= 0) {
	            xhr.send(qq.obj2url(params, ""));
	        }
	        else if (params && options.contentType && options.contentType.toLowerCase().indexOf("application/json") >= 0) {
	            xhr.send(JSON.stringify(params));
	        }
	        else {
	            xhr.send(params);
	        }
	
	        return xhr;
	    }
	
	    function createUrl(id, params, additionalQueryParams) {
	        var endpoint = options.endpointStore.get(id),
	            addToPath = requestData[id].addToPath;
	
	        /*jshint -W116,-W041 */
	        if (addToPath != undefined) {
	            endpoint += "/" + addToPath;
	        }
	
	        if (shouldParamsBeInQueryString && params) {
	            endpoint = qq.obj2url(params, endpoint);
	        }
	
	        if (additionalQueryParams) {
	            endpoint = qq.obj2url(additionalQueryParams, endpoint);
	        }
	
	        return endpoint;
	    }
	
	    // Invoked by the UA to indicate a number of possible states that describe
	    // a live `XMLHttpRequest` transport.
	    function getXhrReadyStateChangeHandler(id) {
	        return function() {
	            if (getXhrOrXdr(id).readyState === 4) {
	                onComplete(id);
	            }
	        };
	    }
	
	    function registerForUploadProgress(id) {
	        var onProgress = options.onProgress;
	
	        if (onProgress) {
	            getXhrOrXdr(id).upload.onprogress = function(e) {
	                if (e.lengthComputable) {
	                    onProgress(id, e.loaded, e.total);
	                }
	            };
	        }
	    }
	
	    // This will be called by IE to indicate **success** for an associated
	    // `XDomainRequest` transported request.
	    function getXdrLoadHandler(id) {
	        return function() {
	            onComplete(id);
	        };
	    }
	
	    // This will be called by IE to indicate **failure** for an associated
	    // `XDomainRequest` transported request.
	    function getXdrErrorHandler(id) {
	        return function() {
	            onComplete(id, true);
	        };
	    }
	
	    function setHeaders(id) {
	        var xhr = getXhrOrXdr(id),
	            customHeaders = options.customHeaders,
	            onDemandHeaders = requestData[id].additionalHeaders || {},
	            method = options.method,
	            allHeaders = {};
	
	        // If XDomainRequest is being used, we can't set headers, so just ignore this block.
	        if (!isXdr(xhr)) {
	            options.acceptHeader && xhr.setRequestHeader("Accept", options.acceptHeader);
	
	            // Only attempt to add X-Requested-With & Cache-Control if permitted
	            if (options.allowXRequestedWithAndCacheControl) {
	                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request
	                // OR the cross-origin request contains a non-simple method or header.
	                // This is done to ensure a preflight is not triggered exclusively based on the
	                // addition of these 2 non-simple headers.
	                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {
	                    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
	                    xhr.setRequestHeader("Cache-Control", "no-cache");
	                }
	            }
	
	            if (options.contentType && (method === "POST" || method === "PUT")) {
	                xhr.setRequestHeader("Content-Type", options.contentType);
	            }
	
	            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);
	            qq.extend(allHeaders, onDemandHeaders);
	
	            qq.each(allHeaders, function(name, val) {
	                xhr.setRequestHeader(name, val);
	            });
	        }
	    }
	
	    function isResponseSuccessful(responseCode) {
	        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;
	    }
	
	    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {
	        requestData[id] = {
	            addToPath: addToPath,
	            additionalParams: additionalParams,
	            additionalQueryParams: additionalQueryParams,
	            additionalHeaders: additionalHeaders,
	            payload: payload
	        };
	
	        var len = queue.push(id);
	
	        // if too many active connections, wait...
	        if (len <= options.maxConnections) {
	            return sendRequest(id, optXhr);
	        }
	    }
	
	    shouldParamsBeInQueryString = options.method === "GET" || options.method === "DELETE";
	
	    qq.extend(this, {
	        // Start the process of sending the request.  The ID refers to the file associated with the request.
	        initTransport: function(id) {
	            var path, params, headers, payload, cacheBuster, additionalQueryParams;
	
	            return {
	                // Optionally specify the end of the endpoint path for the request.
	                withPath: function(appendToPath) {
	                    path = appendToPath;
	                    return this;
	                },
	
	                // Optionally specify additional parameters to send along with the request.
	                // These will be added to the query string for GET/DELETE requests or the payload
	                // for POST/PUT requests.  The Content-Type of the request will be used to determine
	                // how these parameters should be formatted as well.
	                withParams: function(additionalParams) {
	                    params = additionalParams;
	                    return this;
	                },
	
	                withQueryParams: function(_additionalQueryParams_) {
	                    additionalQueryParams = _additionalQueryParams_;
	                    return this;
	                },
	
	                // Optionally specify additional headers to send along with the request.
	                withHeaders: function(additionalHeaders) {
	                    headers = additionalHeaders;
	                    return this;
	                },
	
	                // Optionally specify a payload/body for the request.
	                withPayload: function(thePayload) {
	                    payload = thePayload;
	                    return this;
	                },
	
	                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)
	                withCacheBuster: function() {
	                    cacheBuster = true;
	                    return this;
	                },
	
	                // Send the constructed request.
	                send: function(optXhr) {
	                    if (cacheBuster && qq.indexOf(["GET", "DELETE"], options.method) >= 0) {
	                        params.qqtimestamp = new Date().getTime();
	                    }
	
	                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);
	                }
	            };
	        },
	
	        canceled: function(id) {
	            dequeue(id);
	        }
	    });
	};
	
	/* globals qq */
	/**
	 * Common upload handler functions.
	 *
	 * @constructor
	 */
	qq.UploadHandler = function(spec) {
	    "use strict";
	
	    var proxy = spec.proxy,
	        fileState = {},
	        onCancel = proxy.onCancel,
	        getName = proxy.getName;
	
	    qq.extend(this, {
	        add: function(id, fileItem) {
	            fileState[id] = fileItem;
	            fileState[id].temp = {};
	        },
	
	        cancel: function(id) {
	            var self = this,
	                cancelFinalizationEffort = new qq.Promise(),
	                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);
	
	            onCancelRetVal.then(function() {
	                if (self.isValid(id)) {
	                    fileState[id].canceled = true;
	                    self.expunge(id);
	                }
	                cancelFinalizationEffort.success();
	            });
	        },
	
	        expunge: function(id) {
	            delete fileState[id];
	        },
	
	        getThirdPartyFileId: function(id) {
	            return fileState[id].key;
	        },
	
	        isValid: function(id) {
	            return fileState[id] !== undefined;
	        },
	
	        reset: function() {
	            fileState = {};
	        },
	
	        _getFileState: function(id) {
	            return fileState[id];
	        },
	
	        _setThirdPartyFileId: function(id, thirdPartyFileId) {
	            fileState[id].key = thirdPartyFileId;
	        },
	
	        _wasCanceled: function(id) {
	            return !!fileState[id].canceled;
	        }
	    });
	};
	
	/*globals qq*/
	/**
	 * Base upload handler module.  Controls more specific handlers.
	 *
	 * @param o Options.  Passed along to the specific handler submodule as well.
	 * @param namespace [optional] Namespace for the specific handler.
	 */
	qq.UploadHandlerController = function(o, namespace) {
	    "use strict";
	
	    var controller = this,
	        chunkingPossible = false,
	        concurrentChunkingPossible = false,
	        chunking, preventRetryResponse, log, handler,
	
	    options = {
	        paramsStore: {},
	        maxConnections: 3, // maximum number of concurrent uploads
	        chunking: {
	            enabled: false,
	            multiple: {
	                enabled: false
	            }
	        },
	        log: function(str, level) {},
	        onProgress: function(id, fileName, loaded, total) {},
	        onComplete: function(id, fileName, response, xhr) {},
	        onCancel: function(id, fileName) {},
	        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload
	        onUpload: function(id, fileName) {},
	        onUploadChunk: function(id, fileName, chunkData) {},
	        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},
	        onAutoRetry: function(id, fileName, response, xhr) {},
	        onResume: function(id, fileName, chunkData) {},
	        onUuidChanged: function(id, newUuid) {},
	        getName: function(id) {},
	        setSize: function(id, newSize) {},
	        isQueued: function(id) {},
	        getIdsInProxyGroup: function(id) {},
	        getIdsInBatch: function(id) {}
	    },
	
	    chunked = {
	        // Called when each chunk has uploaded successfully
	        done: function(id, chunkIdx, response, xhr) {
	            var chunkData = handler._getChunkData(id, chunkIdx);
	
	            handler._getFileState(id).attemptingResume = false;
	
	            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];
	            handler._getFileState(id).loaded += chunkData.size;
	
	            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);
	        },
	
	        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any
	        // logic associated with closing out the file, such as combining the chunks.
	        finalize: function(id) {
	            var size = options.getSize(id),
	                name = options.getName(id);
	
	            log("All chunks have been uploaded for " + id + " - finalizing....");
	            handler.finalizeChunks(id).then(
	                function(response, xhr) {
	                    log("Finalize successful for " + id);
	
	                    var normaizedResponse = upload.normalizeResponse(response, true);
	
	                    options.onProgress(id, name, size, size);
	                    handler._maybeDeletePersistedChunkData(id);
	                    upload.cleanup(id, normaizedResponse, xhr);
	                },
	                function(response, xhr) {
	                    var normaizedResponse = upload.normalizeResponse(response, false);
	
	                    log("Problem finalizing chunks for file ID " + id + " - " + normaizedResponse.error, "error");
	
	                    if (normaizedResponse.reset) {
	                        chunked.reset(id);
	                    }
	
	                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {
	                        upload.cleanup(id, normaizedResponse, xhr);
	                    }
	                }
	            );
	        },
	
	        hasMoreParts: function(id) {
	            return !!handler._getFileState(id).chunking.remaining.length;
	        },
	
	        nextPart: function(id) {
	            var nextIdx = handler._getFileState(id).chunking.remaining.shift();
	
	            if (nextIdx >= handler._getTotalChunks(id)) {
	                nextIdx = null;
	            }
	
	            return nextIdx;
	        },
	
	        reset: function(id) {
	            log("Server or callback has ordered chunking effort to be restarted on next attempt for item ID " + id, "error");
	
	            handler._maybeDeletePersistedChunkData(id);
	            handler.reevaluateChunking(id);
	            handler._getFileState(id).loaded = 0;
	        },
	
	        sendNext: function(id) {
	            var size = options.getSize(id),
	                name = options.getName(id),
	                chunkIdx = chunked.nextPart(id),
	                chunkData = handler._getChunkData(id, chunkIdx),
	                resuming = handler._getFileState(id).attemptingResume,
	                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];
	
	            if (handler._getFileState(id).loaded == null) {
	                handler._getFileState(id).loaded = 0;
	            }
	
	            // Don't follow-through with the resume attempt if the integrator returns false from onResume
	            if (resuming && options.onResume(id, name, chunkData) === false) {
	                chunked.reset(id);
	                chunkIdx = chunked.nextPart(id);
	                chunkData = handler._getChunkData(id, chunkIdx);
	                resuming = false;
	            }
	
	            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.
	            if (chunkIdx == null && inProgressChunks.length === 0) {
	                chunked.finalize(id);
	            }
	
	            // Send the next chunk
	            else {
	                log(qq.format("Sending chunked upload request for item {}.{}, bytes {}-{} of {}.", id, chunkIdx, chunkData.start + 1, chunkData.end, size));
	                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));
	                inProgressChunks.push(chunkIdx);
	                handler._getFileState(id).chunking.inProgress = inProgressChunks;
	
	                if (concurrentChunkingPossible) {
	                    connectionManager.open(id, chunkIdx);
	                }
	
	                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {
	                    chunked.sendNext(id);
	                }
	
	                handler.uploadChunk(id, chunkIdx, resuming).then(
	                    // upload chunk success
	                    function success(response, xhr) {
	                        log("Chunked upload request succeeded for " + id + ", chunk " + chunkIdx);
	
	                        handler.clearCachedChunk(id, chunkIdx);
	
	                        var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],
	                            responseToReport = upload.normalizeResponse(response, true),
	                            inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);
	
	                        log(qq.format("Chunk {} for file {} uploaded successfully.", chunkIdx, id));
	
	                        chunked.done(id, chunkIdx, responseToReport, xhr);
	
	                        if (inProgressChunkIdx >= 0) {
	                            inProgressChunks.splice(inProgressChunkIdx, 1);
	                        }
	
	                        handler._maybePersistChunkedState(id);
	
	                        if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {
	                            chunked.finalize(id);
	                        }
	                        else if (chunked.hasMoreParts(id)) {
	                            chunked.sendNext(id);
	                        }
	                        else {
	                            log(qq.format("File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}", id, JSON.stringify(inProgressChunks)));
	                        }
	                    },
	
	                    // upload chunk failure
	                    function failure(response, xhr) {
	                        log("Chunked upload request failed for " + id + ", chunk " + chunkIdx);
	
	                        handler.clearCachedChunk(id, chunkIdx);
	
	                        var responseToReport = upload.normalizeResponse(response, false),
	                            inProgressIdx;
	
	                        if (responseToReport.reset) {
	                            chunked.reset(id);
	                        }
	                        else {
	                            inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);
	                            if (inProgressIdx >= 0) {
	                                handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);
	                                handler._getFileState(id).chunking.remaining.unshift(chunkIdx);
	                            }
	                        }
	
	                        // We may have aborted all other in-progress chunks for this file due to a failure.
	                        // If so, ignore the failures associated with those aborts.
	                        if (!handler._getFileState(id).temp.ignoreFailure) {
	                            // If this chunk has failed, we want to ignore all other failures of currently in-progress
	                            // chunks since they will be explicitly aborted
	                            if (concurrentChunkingPossible) {
	                                handler._getFileState(id).temp.ignoreFailure = true;
	
	                                log(qq.format("Going to attempt to abort these chunks: {}. These are currently in-progress: {}.", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));
	                                qq.each(handler._getXhrs(id), function(ckid, ckXhr) {
	                                    log(qq.format("Attempting to abort file {}.{}. XHR readyState {}. ", id, ckid, ckXhr.readyState));
	                                    ckXhr.abort();
	                                    // Flag the transport, in case we are waiting for some other async operation
	                                    // to complete before attempting to upload the chunk
	                                    ckXhr._cancelled = true;
	                                });
	
	                                // We must indicate that all aborted chunks are no longer in progress
	                                handler.moveInProgressToRemaining(id);
	
	                                // Free up any connections used by these chunks, but don't allow any
	                                // other files to take up the connections (until we have exhausted all auto-retries)
	                                connectionManager.free(id, true);
	                            }
	
	                            if (!options.onAutoRetry(id, name, responseToReport, xhr)) {
	                                // If one chunk fails, abort all of the others to avoid odd race conditions that occur
	                                // if a chunk succeeds immediately after one fails before we have determined if the upload
	                                // is a failure or not.
	                                upload.cleanup(id, responseToReport, xhr);
	                            }
	                        }
	                    }
	                )
	                    .done(function() {
	                        handler.clearXhr(id, chunkIdx);
	                    }) ;
	            }
	        }
	    },
	
	    connectionManager = {
	        _open: [],
	        _openChunks: {},
	        _waiting: [],
	
	        available: function() {
	            var max = options.maxConnections,
	                openChunkEntriesCount = 0,
	                openChunksCount = 0;
	
	            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {
	                openChunkEntriesCount++;
	                openChunksCount += openChunkIndexes.length;
	            });
	
	            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);
	        },
	
	        /**
	         * Removes element from queue, starts upload of next
	         */
	        free: function(id, dontAllowNext) {
	            var allowNext = !dontAllowNext,
	                waitingIndex = qq.indexOf(connectionManager._waiting, id),
	                connectionsIndex = qq.indexOf(connectionManager._open, id),
	                nextId;
	
	            delete connectionManager._openChunks[id];
	
	            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {
	                log("Generated blob upload has ended for " + id + ", disposing generated blob.");
	                delete handler._getFileState(id).file;
	            }
	
	            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array
	            if (waitingIndex >= 0) {
	                connectionManager._waiting.splice(waitingIndex, 1);
	            }
	            // If this file was consuming a connection, allow the next file to be uploaded
	            else if (allowNext && connectionsIndex >= 0) {
	                connectionManager._open.splice(connectionsIndex, 1);
	
	                nextId = connectionManager._waiting.shift();
	                if (nextId >= 0) {
	                    connectionManager._open.push(nextId);
	                    upload.start(nextId);
	                }
	            }
	        },
	
	        getWaitingOrConnected: function() {
	            var waitingOrConnected = [];
	
	            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)
	            // We need to grab the file ID of any file that has at least one chunk consuming a connection.
	            qq.each(connectionManager._openChunks, function(fileId, chunks) {
	                if (chunks && chunks.length) {
	                    waitingOrConnected.push(parseInt(fileId));
	                }
	            });
	
	            // For non-chunked files, only one connection will be consumed per file.
	            // This is where we aggregate those file IDs.
	            qq.each(connectionManager._open, function(idx, fileId) {
	                if (!connectionManager._openChunks[fileId]) {
	                    waitingOrConnected.push(parseInt(fileId));
	                }
	            });
	
	            // There may be files waiting for a connection.
	            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);
	
	            return waitingOrConnected;
	        },
	
	        isUsingConnection: function(id) {
	            return qq.indexOf(connectionManager._open, id) >= 0;
	        },
	
	        open: function(id, chunkIdx) {
	            if (chunkIdx == null) {
	                connectionManager._waiting.push(id);
	            }
	
	            if (connectionManager.available()) {
	                if (chunkIdx == null) {
	                    connectionManager._waiting.pop();
	                    connectionManager._open.push(id);
	                }
	                else {
	                    (function() {
	                        var openChunksEntry = connectionManager._openChunks[id] || [];
	                        openChunksEntry.push(chunkIdx);
	                        connectionManager._openChunks[id] = openChunksEntry;
	                    }());
	                }
	
	                return true;
	            }
	
	            return false;
	        },
	
	        reset: function() {
	            connectionManager._waiting = [];
	            connectionManager._open = [];
	        }
	    },
	
	    simple = {
	        send: function(id, name) {
	            handler._getFileState(id).loaded = 0;
	
	            log("Sending simple upload request for " + id);
	            handler.uploadFile(id).then(
	                function(response, optXhr) {
	                    log("Simple upload request succeeded for " + id);
	
	                    var responseToReport = upload.normalizeResponse(response, true),
	                        size = options.getSize(id);
	
	                    options.onProgress(id, name, size, size);
	                    upload.maybeNewUuid(id, responseToReport);
	                    upload.cleanup(id, responseToReport, optXhr);
	                },
	
	                function(response, optXhr) {
	                    log("Simple upload request failed for " + id);
	
	                    var responseToReport = upload.normalizeResponse(response, false);
	
	                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {
	                        upload.cleanup(id, responseToReport, optXhr);
	                    }
	                }
	            );
	        }
	    },
	
	    upload = {
	        cancel: function(id) {
	            log("Cancelling " + id);
	            options.paramsStore.remove(id);
	            connectionManager.free(id);
	        },
	
	        cleanup: function(id, response, optXhr) {
	            var name = options.getName(id);
	
	            options.onComplete(id, name, response, optXhr);
	
	            if (handler._getFileState(id)) {
	                handler._clearXhrs && handler._clearXhrs(id);
	            }
	
	            connectionManager.free(id);
	        },
	
	        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined
	        // if none of these are available for the ID
	        getProxyOrBlob: function(id) {
	            return (handler.getProxy && handler.getProxy(id)) ||
	                (handler.getFile && handler.getFile(id));
	        },
	
	        initHandler: function() {
	            var handlerType = namespace ? qq[namespace] : qq.traditional,
	                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? "Xhr" : "Form";
	
	            handler = new handlerType[handlerModuleSubtype + "UploadHandler"](
	                options,
	                {
	                    getDataByUuid: options.getDataByUuid,
	                    getName: options.getName,
	                    getSize: options.getSize,
	                    getUuid: options.getUuid,
	                    log: log,
	                    onCancel: options.onCancel,
	                    onProgress: options.onProgress,
	                    onUuidChanged: options.onUuidChanged
	                }
	            );
	
	            if (handler._removeExpiredChunkingRecords) {
	                handler._removeExpiredChunkingRecords();
	            }
	        },
	
	        isDeferredEligibleForUpload: function(id) {
	            return options.isQueued(id);
	        },
	
	        // For Blobs that are part of a group of generated images, along with a reference image,
	        // this will ensure the blobs in the group are uploaded in the order they were triggered,
	        // even if some async processing must be completed on one or more Blobs first.
	        maybeDefer: function(id, blob) {
	            // If we don't have a file/blob yet & no file/blob exists for this item, request it,
	            // and then submit the upload to the specific handler once the blob is available.
	            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.
	            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {
	
	                // Blob creation may take some time, so the caller may want to update the
	                // UI to indicate that an operation is in progress, even before the actual
	                // upload begins and an onUpload callback is invoked.
	                options.onUploadPrep(id);
	
	                log("Attempting to generate a blob on-demand for " + id);
	                blob.create().then(function(generatedBlob) {
	                    log("Generated an on-demand blob for " + id);
	
	                    // Update record associated with this file by providing the generated Blob
	                    handler.updateBlob(id, generatedBlob);
	
	                    // Propagate the size for this generated Blob
	                    options.setSize(id, generatedBlob.size);
	
	                    // Order handler to recalculate chunking possibility, if applicable
	                    handler.reevaluateChunking(id);
	
	                    upload.maybeSendDeferredFiles(id);
	                },
	
	                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.
	                function(errorMessage) {
	                    var errorResponse = {};
	
	                    if (errorMessage) {
	                        errorResponse.error = errorMessage;
	                    }
	
	                    log(qq.format("Failed to generate blob for ID {}.  Error message: {}.", id, errorMessage), "error");
	
	                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);
	                    upload.maybeSendDeferredFiles(id);
	                    connectionManager.free(id);
	                });
	            }
	            else {
	                return upload.maybeSendDeferredFiles(id);
	            }
	
	            return false;
	        },
	
	        // Upload any grouped blobs, in the proper order, that are ready to be uploaded
	        maybeSendDeferredFiles: function(id) {
	            var idsInGroup = options.getIdsInProxyGroup(id),
	                uploadedThisId = false;
	
	            if (idsInGroup && idsInGroup.length) {
	                log("Maybe ready to upload proxy group file " + id);
	
	                qq.each(idsInGroup, function(idx, idInGroup) {
	                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {
	                        uploadedThisId = idInGroup === id;
	                        upload.now(idInGroup);
	                    }
	                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {
	                        return false;
	                    }
	                });
	            }
	            else {
	                uploadedThisId = true;
	                upload.now(id);
	            }
	
	            return uploadedThisId;
	        },
	
	        maybeNewUuid: function(id, response) {
	            if (response.newUuid !== undefined) {
	                options.onUuidChanged(id, response.newUuid);
	            }
	        },
	
	        // The response coming from handler implementations may be in various formats.
	        // Instead of hoping a promise nested 5 levels deep will always return an object
	        // as its first param, let's just normalize the response here.
	        normalizeResponse: function(originalResponse, successful) {
	            var response = originalResponse;
	
	            // The passed "response" param may not be a response at all.
	            // It could be a string, detailing the error, for example.
	            if (!qq.isObject(originalResponse)) {
	                response = {};
	
	                if (qq.isString(originalResponse) && !successful) {
	                    response.error = originalResponse;
	                }
	            }
	
	            response.success = successful;
	
	            return response;
	        },
	
	        now: function(id) {
	            var name = options.getName(id);
	
	            if (!controller.isValid(id)) {
	                throw new qq.Error(id + " is not a valid file ID to upload!");
	            }
	
	            options.onUpload(id, name);
	
	            if (chunkingPossible && handler._shouldChunkThisFile(id)) {
	                chunked.sendNext(id);
	            }
	            else {
	                simple.send(id, name);
	            }
	        },
	
	        start: function(id) {
	            var blobToUpload = upload.getProxyOrBlob(id);
	
	            if (blobToUpload) {
	                return upload.maybeDefer(id, blobToUpload);
	            }
	            else {
	                upload.now(id);
	                return true;
	            }
	        }
	    };
	
	    qq.extend(this, {
	        /**
	         * Adds file or file input to the queue
	         **/
	        add: function(id, file) {
	            handler.add.apply(this, arguments);
	        },
	
	        /**
	         * Sends the file identified by id
	         */
	        upload: function(id) {
	            if (connectionManager.open(id)) {
	                return upload.start(id);
	            }
	            return false;
	        },
	
	        retry: function(id) {
	            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks
	            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore
	            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore
	            // any more failures at this point.
	            if (concurrentChunkingPossible) {
	                handler._getFileState(id).temp.ignoreFailure = false;
	            }
	
	            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.
	            // Just go ahead and ask the handler to upload again.
	            if (connectionManager.isUsingConnection(id)) {
	                return upload.start(id);
	            }
	
	            // If we are attempting to retry a file that is not currently consuming a connection,
	            // this is likely a manual retry attempt.  We will need to ensure a connection is available
	            // before the retry commences.
	            else {
	                return controller.upload(id);
	            }
	        },
	
	        /**
	         * Cancels file upload by id
	         */
	        cancel: function(id) {
	            var cancelRetVal = handler.cancel(id);
	
	            if (qq.isGenericPromise(cancelRetVal)) {
	                cancelRetVal.then(function() {
	                    upload.cancel(id);
	                });
	            }
	            else if (cancelRetVal !== false) {
	                upload.cancel(id);
	            }
	        },
	
	        /**
	         * Cancels all queued or in-progress uploads
	         */
	        cancelAll: function() {
	            var waitingOrConnected = connectionManager.getWaitingOrConnected(),
	                i;
	
	            // ensure files are cancelled in reverse order which they were added
	            // to avoid a flash of time where a queued file begins to upload before it is canceled
	            if (waitingOrConnected.length) {
	                for (i = waitingOrConnected.length - 1; i >= 0; i--) {
	                    controller.cancel(waitingOrConnected[i]);
	                }
	            }
	
	            connectionManager.reset();
	        },
	
	        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.
	        // Undefined if no file record is available.
	        getFile: function(id) {
	            if (handler.getProxy && handler.getProxy(id)) {
	                return handler.getProxy(id).referenceBlob;
	            }
	
	            return handler.getFile && handler.getFile(id);
	        },
	
	        // Returns true if the Blob associated with the ID is related to a proxy s
	        isProxied: function(id) {
	            return !!(handler.getProxy && handler.getProxy(id));
	        },
	
	        getInput: function(id) {
	            if (handler.getInput) {
	                return handler.getInput(id);
	            }
	        },
	
	        reset: function() {
	            log("Resetting upload handler");
	            controller.cancelAll();
	            connectionManager.reset();
	            handler.reset();
	        },
	
	        expunge: function(id) {
	            if (controller.isValid(id)) {
	                return handler.expunge(id);
	            }
	        },
	
	        /**
	         * Determine if the file exists.
	         */
	        isValid: function(id) {
	            return handler.isValid(id);
	        },
	
	        getResumableFilesData: function() {
	            if (handler.getResumableFilesData) {
	                return handler.getResumableFilesData();
	            }
	            return [];
	        },
	
	        /**
	         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is
	         * available (such as the "key" for Amazon S3), this will return that value.  Otherwise, the return value
	         * will be undefined.
	         *
	         * @param id Internal file ID
	         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process
	         */
	        getThirdPartyFileId: function(id) {
	            if (controller.isValid(id)) {
	                return handler.getThirdPartyFileId(id);
	            }
	        },
	
	        /**
	         * Attempts to pause the associated upload if the specific handler supports this and the file is "valid".
	         * @param id ID of the upload/file to pause
	         * @returns {boolean} true if the upload was paused
	         */
	        pause: function(id) {
	            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {
	                connectionManager.free(id);
	                handler.moveInProgressToRemaining(id);
	                return true;
	            }
	            return false;
	        },
	
	        // True if the file is eligible for pause/resume.
	        isResumable: function(id) {
	            return !!handler.isResumable && handler.isResumable(id);
	        }
	    });
	
	    qq.extend(options, o);
	    log = options.log;
	    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;
	    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;
	
	    preventRetryResponse = (function() {
	        var response = {};
	
	        response[options.preventRetryParam] = true;
	
	        return response;
	    }());
	
	    upload.initHandler();
	};
	
	/* globals qq */
	/**
	 * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden
	 * in some cases by specific form upload handlers.
	 *
	 * @constructor
	 */
	qq.FormUploadHandler = function(spec) {
	    "use strict";
	
	    var options = spec.options,
	        handler = this,
	        proxy = spec.proxy,
	        formHandlerInstanceId = qq.getUniqueId(),
	        onloadCallbacks = {},
	        detachLoadEvents = {},
	        postMessageCallbackTimers = {},
	        isCors = options.isCors,
	        inputName = options.inputName,
	        getUuid = proxy.getUuid,
	        log = proxy.log,
	        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});
	
	    /**
	     * Remove any trace of the file from the handler.
	     *
	     * @param id ID of the associated file
	     */
	    function expungeFile(id) {
	        delete detachLoadEvents[id];
	
	        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.
	        // In that case, terminate the timer waiting for a message from the loaded iframe
	        // and stop listening for any more messages coming from this iframe.
	        if (isCors) {
	            clearTimeout(postMessageCallbackTimers[id]);
	            delete postMessageCallbackTimers[id];
	            corsMessageReceiver.stopReceivingMessages(id);
	        }
	
	        var iframe = document.getElementById(handler._getIframeName(id));
	        if (iframe) {
	            // To cancel request set src to something else.  We use src="javascript:false;"
	            // because it doesn't trigger ie6 prompt on https
	            /* jshint scripturl:true */
	            iframe.setAttribute("src", "javascript:false;");
	
	            qq(iframe).remove();
	        }
	    }
	
	    /**
	     * @param iframeName `document`-unique Name of the associated iframe
	     * @returns {*} ID of the associated file
	     */
	    function getFileIdForIframeName(iframeName) {
	        return iframeName.split("_")[0];
	    }
	
	    /**
	     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe
	     * to the current `document`.  Note that the iframe is hidden from view.
	     *
	     * @param name Name of the iframe.
	     * @returns {HTMLIFrameElement} The created iframe
	     */
	    function initIframeForUpload(name) {
	        var iframe = qq.toElement("<iframe src='javascript:false;' name='" + name + "' />");
	
	        iframe.setAttribute("id", name);
	
	        iframe.style.display = "none";
	        document.body.appendChild(iframe);
	
	        return iframe;
	    }
	
	    /**
	     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated
	     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.
	     *
	     * @param iframe Listen for messages on this iframe.
	     * @param callback Invoke this callback with the message from the iframe.
	     */
	    function registerPostMessageCallback(iframe, callback) {
	        var iframeName = iframe.id,
	            fileId = getFileIdForIframeName(iframeName),
	            uuid = getUuid(fileId);
	
	        onloadCallbacks[uuid] = callback;
	
	        // When the iframe has loaded (after the server responds to an upload request)
	        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.
	        detachLoadEvents[fileId] = qq(iframe).attach("load", function() {
	            if (handler.getInput(fileId)) {
	                log("Received iframe load event for CORS upload request (iframe name " + iframeName + ")");
	
	                postMessageCallbackTimers[iframeName] = setTimeout(function() {
	                    var errorMessage = "No valid message received from loaded iframe for iframe name " + iframeName;
	                    log(errorMessage, "error");
	                    callback({
	                        error: errorMessage
	                    });
	                }, 1000);
	            }
	        });
	
	        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer
	        // that declares the upload a failure if a message is not received within a reasonable amount of time.
	        corsMessageReceiver.receiveMessage(iframeName, function(message) {
	            log("Received the following window message: '" + message + "'");
	            var fileId = getFileIdForIframeName(iframeName),
	                response = handler._parseJsonResponse(message),
	                uuid = response.uuid,
	                onloadCallback;
	
	            if (uuid && onloadCallbacks[uuid]) {
	                log("Handling response for iframe name " + iframeName);
	                clearTimeout(postMessageCallbackTimers[iframeName]);
	                delete postMessageCallbackTimers[iframeName];
	
	                handler._detachLoadEvent(iframeName);
	
	                onloadCallback = onloadCallbacks[uuid];
	
	                delete onloadCallbacks[uuid];
	                corsMessageReceiver.stopReceivingMessages(iframeName);
	                onloadCallback(response);
	            }
	            else if (!uuid) {
	                log("'" + message + "' does not contain a UUID - ignoring.");
	            }
	        });
	    }
	
	    qq.extend(this, new qq.UploadHandler(spec));
	
	    qq.override(this, function(super_) {
	        return {
	            /**
	             * Adds File or Blob to the queue
	             **/
	            add: function(id, fileInput) {
	                super_.add(id, {input: fileInput});
	
	                fileInput.setAttribute("name", inputName);
	
	                // remove file input from DOM
	                if (fileInput.parentNode) {
	                    qq(fileInput).remove();
	                }
	            },
	
	            expunge: function(id) {
	                expungeFile(id);
	                super_.expunge(id);
	            },
	
	            isValid: function(id) {
	                return super_.isValid(id) &&
	                    handler._getFileState(id).input !== undefined;
	            }
	        };
	    });
	
	    qq.extend(this, {
	        getInput: function(id) {
	            return handler._getFileState(id).input;
	        },
	
	        /**
	         * This function either delegates to a more specific message handler if CORS is involved,
	         * or simply registers a callback when the iframe has been loaded that invokes the passed callback
	         * after determining if the content of the iframe is accessible.
	         *
	         * @param iframe Associated iframe
	         * @param callback Callback to invoke after we have determined if the iframe content is accessible.
	         */
	        _attachLoadEvent: function(iframe, callback) {
	            /*jslint eqeq: true*/
	            var responseDescriptor;
	
	            if (isCors) {
	                registerPostMessageCallback(iframe, callback);
	            }
	            else {
	                detachLoadEvents[iframe.id] = qq(iframe).attach("load", function() {
	                    log("Received response for " + iframe.id);
	
	                    // when we remove iframe from dom
	                    // the request stops, but in IE load
	                    // event fires
	                    if (!iframe.parentNode) {
	                        return;
	                    }
	
	                    try {
	                        // fixing Opera 10.53
	                        if (iframe.contentDocument &&
	                            iframe.contentDocument.body &&
	                            iframe.contentDocument.body.innerHTML == "false") {
	                            // In Opera event is fired second time
	                            // when body.innerHTML changed from false
	                            // to server response approx. after 1 sec
	                            // when we upload file with iframe
	                            return;
	                        }
	                    }
	                    catch (error) {
	                        //IE may throw an "access is denied" error when attempting to access contentDocument on the iframe in some cases
	                        log("Error when attempting to access iframe during handling of upload response (" + error.message + ")", "error");
	                        responseDescriptor = {success: false};
	                    }
	
	                    callback(responseDescriptor);
	                });
	            }
	        },
	
	        /**
	         * Creates an iframe with a specific document-unique name.
	         *
	         * @param id ID of the associated file
	         * @returns {HTMLIFrameElement}
	         */
	        _createIframe: function(id) {
	            var iframeName = handler._getIframeName(id);
	
	            return initIframeForUpload(iframeName);
	        },
	
	        /**
	         * Called when we are no longer interested in being notified when an iframe has loaded.
	         *
	         * @param id Associated file ID
	         */
	        _detachLoadEvent: function(id) {
	            if (detachLoadEvents[id] !== undefined) {
	                detachLoadEvents[id]();
	                delete detachLoadEvents[id];
	            }
	        },
	
	        /**
	         * @param fileId ID of the associated file
	         * @returns {string} The `document`-unique name of the iframe
	         */
	        _getIframeName: function(fileId) {
	            return fileId + "_" + formHandlerInstanceId;
	        },
	
	        /**
	         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.
	         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note
	         * that the form is hidden from view.
	         *
	         * @param spec An object containing various properties to be used when constructing the form.  Required properties are
	         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.
	         * @returns {HTMLFormElement} The created form
	         */
	        _initFormForUpload: function(spec) {
	            var method = spec.method,
	                endpoint = spec.endpoint,
	                params = spec.params,
	                paramsInBody = spec.paramsInBody,
	                targetName = spec.targetName,
	                form = qq.toElement("<form method='" + method + "' enctype='multipart/form-data'></form>"),
	                url = endpoint;
	
	            if (paramsInBody) {
	                qq.obj2Inputs(params, form);
	            }
	            else {
	                url = qq.obj2url(params, endpoint);
	            }
	
	            form.setAttribute("action", url);
	            form.setAttribute("target", targetName);
	            form.style.display = "none";
	            document.body.appendChild(form);
	
	            return form;
	        },
	
	        /**
	         * @param innerHtmlOrMessage JSON message
	         * @returns {*} The parsed response, or an empty object if the response could not be parsed
	         */
	        _parseJsonResponse: function(innerHtmlOrMessage) {
	            var response = {};
	
	            try {
	                response = qq.parseJson(innerHtmlOrMessage);
	            }
	            catch (error) {
	                log("Error when attempting to parse iframe upload response (" + error.message + ")", "error");
	            }
	
	            return response;
	        }
	    });
	};
	
	/* globals qq */
	/**
	 * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific
	 * XHR upload handlers.
	 *
	 * @constructor
	 */
	qq.XhrUploadHandler = function(spec) {
	    "use strict";
	
	    var handler = this,
	        namespace = spec.options.namespace,
	        proxy = spec.proxy,
	        chunking = spec.options.chunking,
	        resume = spec.options.resume,
	        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,
	        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,
	        getName = proxy.getName,
	        getSize = proxy.getSize,
	        getUuid = proxy.getUuid,
	        getEndpoint = proxy.getEndpoint,
	        getDataByUuid = proxy.getDataByUuid,
	        onUuidChanged = proxy.onUuidChanged,
	        onProgress = proxy.onProgress,
	        log = proxy.log;
	
	    function abort(id) {
	        qq.each(handler._getXhrs(id), function(xhrId, xhr) {
	            var ajaxRequester = handler._getAjaxRequester(id, xhrId);
	
	            xhr.onreadystatechange = null;
	            xhr.upload.onprogress = null;
	            xhr.abort();
	            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);
	        });
	    }
	
	    qq.extend(this, new qq.UploadHandler(spec));
	
	    qq.override(this, function(super_) {
	        return {
	            /**
	             * Adds File or Blob to the queue
	             **/
	            add: function(id, blobOrProxy) {
	                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {
	                    super_.add(id, {file: blobOrProxy});
	                }
	                else if (blobOrProxy instanceof qq.BlobProxy) {
	                    super_.add(id, {proxy: blobOrProxy});
	                }
	                else {
	                    throw new Error("Passed obj is not a File, Blob, or proxy");
	                }
	
	                handler._initTempState(id);
	                resumeEnabled && handler._maybePrepareForResume(id);
	            },
	
	            expunge: function(id) {
	                abort(id);
	                handler._maybeDeletePersistedChunkData(id);
	                handler._clearXhrs(id);
	                super_.expunge(id);
	            }
	        };
	    });
	
	    qq.extend(this, {
	        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.
	        clearCachedChunk: function(id, chunkIdx) {
	            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];
	        },
	
	        clearXhr: function(id, chunkIdx) {
	            var tempState = handler._getFileState(id).temp;
	
	            if (tempState.xhrs) {
	                delete tempState.xhrs[chunkIdx];
	            }
	            if (tempState.ajaxRequesters) {
	                delete tempState.ajaxRequesters[chunkIdx];
	            }
	        },
	
	        // Called when all chunks have been successfully uploaded.  Expected promissory return type.
	        // This defines the default behavior if nothing further is required when all chunks have been uploaded.
	        finalizeChunks: function(id, responseParser) {
	            var lastChunkIdx = handler._getTotalChunks(id) - 1,
	                xhr = handler._getXhr(id, lastChunkIdx);
	
	            if (responseParser) {
	                return new qq.Promise().success(responseParser(xhr), xhr);
	            }
	
	            return new qq.Promise().success({}, xhr);
	        },
	
	        getFile: function(id) {
	            return handler.isValid(id) && handler._getFileState(id).file;
	        },
	
	        getProxy: function(id) {
	            return handler.isValid(id) && handler._getFileState(id).proxy;
	        },
	
	        /**
	         * @returns {Array} Array of objects containing properties useful to integrators
	         * when it is important to determine which files are potentially resumable.
	         */
	        getResumableFilesData: function() {
	            var resumableFilesData = [];
	
	            handler._iterateResumeRecords(function(key, uploadData) {
	                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);
	
	                var data = {
	                    name: uploadData.name,
	                    remaining: uploadData.chunking.remaining,
	                    size: uploadData.size,
	                    uuid: uploadData.uuid
	                };
	
	                if (uploadData.key) {
	                    data.key = uploadData.key;
	                }
	
	                resumableFilesData.push(data);
	            });
	
	            return resumableFilesData;
	        },
	
	        isResumable: function(id) {
	            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;
	        },
	
	        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {
	            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,
	                remaining = optRemaining || handler._getFileState(id).chunking.remaining;
	
	            if (inProgress) {
	                log(qq.format("Moving these chunks from in-progress {}, to remaining.", JSON.stringify(inProgress)));
	                inProgress.reverse();
	                qq.each(inProgress, function(idx, chunkIdx) {
	                    remaining.unshift(chunkIdx);
	                });
	                inProgress.length = 0;
	            }
	        },
	
	        pause: function(id) {
	            if (handler.isValid(id)) {
	                log(qq.format("Aborting XHR upload for {} '{}' due to pause instruction.", id, getName(id)));
	                handler._getFileState(id).paused = true;
	                abort(id);
	                return true;
	            }
	        },
	
	        reevaluateChunking: function(id) {
	            if (chunking && handler.isValid(id)) {
	                var state = handler._getFileState(id),
	                    totalChunks,
	                    i;
	
	                delete state.chunking;
	
	                state.chunking = {};
	                totalChunks = handler._getTotalChunks(id);
	                if (totalChunks > 1 || chunking.mandatory) {
	                    state.chunking.enabled = true;
	                    state.chunking.parts = totalChunks;
	                    state.chunking.remaining = [];
	
	                    for (i = 0; i < totalChunks; i++) {
	                        state.chunking.remaining.push(i);
	                    }
	
	                    handler._initTempState(id);
	                }
	                else {
	                    state.chunking.enabled = false;
	                }
	            }
	        },
	
	        updateBlob: function(id, newBlob) {
	            if (handler.isValid(id)) {
	                handler._getFileState(id).file = newBlob;
	            }
	        },
	
	        _clearXhrs: function(id) {
	            var tempState = handler._getFileState(id).temp;
	
	            qq.each(tempState.ajaxRequesters, function(chunkId) {
	                delete tempState.ajaxRequesters[chunkId];
	            });
	
	            qq.each(tempState.xhrs, function(chunkId) {
	                delete tempState.xhrs[chunkId];
	            });
	        },
	
	        /**
	         * Creates an XHR instance for this file and stores it in the fileState.
	         *
	         * @param id File ID
	         * @param optChunkIdx The chunk index associated with this XHR, if applicable
	         * @returns {XMLHttpRequest}
	         */
	        _createXhr: function(id, optChunkIdx) {
	            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());
	        },
	
	        _getAjaxRequester: function(id, optChunkIdx) {
	            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;
	            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];
	        },
	
	        _getChunkData: function(id, chunkIndex) {
	            var chunkSize = chunking.partSize,
	                fileSize = getSize(id),
	                fileOrBlob = handler.getFile(id),
	                startBytes = chunkSize * chunkIndex,
	                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,
	                totalChunks = handler._getTotalChunks(id),
	                cachedChunks = this._getFileState(id).temp.cachedChunks,
	
	            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.
	            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760
	                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);
	
	            cachedChunks[chunkIndex] = blob;
	
	            return {
	                part: chunkIndex,
	                start: startBytes,
	                end: endBytes,
	                count: totalChunks,
	                blob: blob,
	                size: endBytes - startBytes
	            };
	        },
	
	        _getChunkDataForCallback: function(chunkData) {
	            return {
	                partIndex: chunkData.part,
	                startByte: chunkData.start + 1,
	                endByte: chunkData.end,
	                totalParts: chunkData.count
	            };
	        },
	
	        /**
	         * @param id File ID
	         * @returns {string} Identifier for this item that may appear in the browser's local storage
	         */
	        _getLocalStorageId: function(id) {
	            var formatVersion = "5.0",
	                name = getName(id),
	                size = getSize(id),
	                chunkSize = chunking.partSize,
	                endpoint = getEndpoint(id);
	
	            return qq.format("qq{}resume{}-{}-{}-{}-{}", namespace, formatVersion, name, size, chunkSize, endpoint);
	        },
	
	        _getMimeType: function(id) {
	            return handler.getFile(id).type;
	        },
	
	        _getPersistableData: function(id) {
	            return handler._getFileState(id).chunking;
	        },
	
	        /**
	         * @param id ID of the associated file
	         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA
	         */
	        _getTotalChunks: function(id) {
	            if (chunking) {
	                var fileSize = getSize(id),
	                    chunkSize = chunking.partSize;
	
	                return Math.ceil(fileSize / chunkSize);
	            }
	        },
	
	        _getXhr: function(id, optChunkIdx) {
	            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;
	            return handler._getFileState(id).temp.xhrs[chunkIdx];
	        },
	
	        _getXhrs: function(id) {
	            return handler._getFileState(id).temp.xhrs;
	        },
	
	        // Iterates through all XHR handler-created resume records (in local storage),
	        // invoking the passed callback and passing in the key and value of each local storage record.
	        _iterateResumeRecords: function(callback) {
	            if (resumeEnabled) {
	                qq.each(localStorage, function(key, item) {
	                    if (key.indexOf(qq.format("qq{}resume", namespace)) === 0) {
	                        var uploadData = JSON.parse(item);
	                        callback(key, uploadData);
	                    }
	                });
	            }
	        },
	
	        _initTempState: function(id) {
	            handler._getFileState(id).temp = {
	                ajaxRequesters: {},
	                chunkProgress: {},
	                xhrs: {},
	                cachedChunks: {}
	            };
	        },
	
	        _markNotResumable: function(id) {
	            handler._getFileState(id).notResumable = true;
	        },
	
	        // Removes a chunked upload record from local storage, if possible.
	        // Returns true if the item was removed, false otherwise.
	        _maybeDeletePersistedChunkData: function(id) {
	            var localStorageId;
	
	            if (resumeEnabled && handler.isResumable(id)) {
	                localStorageId = handler._getLocalStorageId(id);
	
	                if (localStorageId && localStorage.getItem(localStorageId)) {
	                    localStorage.removeItem(localStorageId);
	                    return true;
	                }
	            }
	
	            return false;
	        },
	
	        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload
	        // so we can pick up from where we left off.
	        _maybePrepareForResume: function(id) {
	            var state = handler._getFileState(id),
	                localStorageId, persistedData;
	
	            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,
	            // so prepare for a resume attempt.
	            if (resumeEnabled && state.key === undefined) {
	                localStorageId = handler._getLocalStorageId(id);
	                persistedData = localStorage.getItem(localStorageId);
	
	                // If we found this item in local storage, maybe we should resume it.
	                if (persistedData) {
	                    persistedData = JSON.parse(persistedData);
	
	                    // If we found a resume record but we have already handled this file in this session,
	                    // don't try to resume it & ensure we don't persist future check data
	                    if (getDataByUuid(persistedData.uuid)) {
	                        handler._markNotResumable(id);
	                    }
	                    else {
	                        log(qq.format("Identified file with ID {} and name of {} as resumable.", id, getName(id)));
	
	                        onUuidChanged(id, persistedData.uuid);
	
	                        state.key = persistedData.key;
	                        state.chunking = persistedData.chunking;
	                        state.loaded = persistedData.loaded;
	                        state.attemptingResume = true;
	
	                        handler.moveInProgressToRemaining(id);
	                    }
	                }
	            }
	        },
	
	        // Persist any data needed to resume this upload in a new session.
	        _maybePersistChunkedState: function(id) {
	            var state = handler._getFileState(id),
	                localStorageId, persistedData;
	
	            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up
	            if (resumeEnabled && handler.isResumable(id)) {
	                localStorageId = handler._getLocalStorageId(id);
	
	                persistedData = {
	                    name: getName(id),
	                    size: getSize(id),
	                    uuid: getUuid(id),
	                    key: state.key,
	                    chunking: state.chunking,
	                    loaded: state.loaded,
	                    lastUpdated: Date.now()
	                };
	
	                try {
	                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));
	                }
	                catch (error) {
	                    log(qq.format("Unable to save resume data for '{}' due to error: '{}'.", id, error.toString()), "warn");
	                }
	            }
	        },
	
	        _registerProgressHandler: function(id, chunkIdx, chunkSize) {
	            var xhr = handler._getXhr(id, chunkIdx),
	                name = getName(id),
	                progressCalculator = {
	                    simple: function(loaded, total) {
	                        var fileSize = getSize(id);
	
	                        if (loaded === total) {
	                            onProgress(id, name, fileSize, fileSize);
	                        }
	                        else {
	                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);
	                        }
	                    },
	
	                    chunked: function(loaded, total) {
	                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,
	                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,
	                            loadedForRequest = loaded,
	                            totalForRequest = total,
	                            totalFileSize = getSize(id),
	                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),
	                            totalLoadedForFile = totalSuccessfullyLoadedForFile;
	
	                        chunkProgress[chunkIdx] = estActualChunkLoaded;
	
	                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {
	                            totalLoadedForFile += chunkLoaded;
	                        });
	
	                        onProgress(id, name, totalLoadedForFile, totalFileSize);
	                    }
	                };
	
	            xhr.upload.onprogress = function(e) {
	                if (e.lengthComputable) {
	                    /* jshint eqnull: true */
	                    var type = chunkSize == null ? "simple" : "chunked";
	                    progressCalculator[type](e.loaded, e.total);
	                }
	            };
	        },
	
	        /**
	         * Registers an XHR transport instance created elsewhere.
	         *
	         * @param id ID of the associated file
	         * @param optChunkIdx The chunk index associated with this XHR, if applicable
	         * @param xhr XMLHttpRequest object instance
	         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.
	         * @returns {XMLHttpRequest}
	         */
	        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {
	            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,
	                tempState = handler._getFileState(id).temp;
	
	            tempState.xhrs = tempState.xhrs || {};
	            tempState.ajaxRequesters = tempState.ajaxRequesters || {};
	
	            tempState.xhrs[xhrsId] = xhr;
	
	            if (optAjaxRequester) {
	                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;
	            }
	
	            return xhr;
	        },
	
	        // Deletes any local storage records that are "expired".
	        _removeExpiredChunkingRecords: function() {
	            var expirationDays = resume.recordsExpireIn;
	
	            handler._iterateResumeRecords(function(key, uploadData) {
	                var expirationDate = new Date(uploadData.lastUpdated);
	
	                // transform updated date into expiration date
	                expirationDate.setDate(expirationDate.getDate() + expirationDays);
	
	                if (expirationDate.getTime() <= Date.now()) {
	                    log("Removing expired resume record with key " + key);
	                    localStorage.removeItem(key);
	                }
	            });
	        },
	
	        /**
	         * Determine if the associated file should be chunked.
	         *
	         * @param id ID of the associated file
	         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part
	         */
	        _shouldChunkThisFile: function(id) {
	            var state = handler._getFileState(id);
	
	            if (!state.chunking) {
	                handler.reevaluateChunking(id);
	            }
	
	            return state.chunking.enabled;
	        }
	    });
	};
	
	/*globals qq */
	/*jshint -W117 */
	qq.WindowReceiveMessage = function(o) {
	    "use strict";
	
	    var options = {
	            log: function(message, level) {}
	        },
	        callbackWrapperDetachers = {};
	
	    qq.extend(options, o);
	
	    qq.extend(this, {
	        receiveMessage: function(id, callback) {
	            var onMessageCallbackWrapper = function(event) {
	                    callback(event.data);
	                };
	
	            if (window.postMessage) {
	                callbackWrapperDetachers[id] = qq(window).attach("message", onMessageCallbackWrapper);
	            }
	            else {
	                log("iframe message passing not supported in this browser!", "error");
	            }
	        },
	
	        stopReceivingMessages: function(id) {
	            if (window.postMessage) {
	                var detacher = callbackWrapperDetachers[id];
	                if (detacher) {
	                    detacher();
	                }
	            }
	        }
	    });
	};
	
	/*globals qq */
	/**
	 * Defines the public API for FineUploader mode.
	 */
	(function() {
	    "use strict";
	
	    qq.uiPublicApi = {
	        addInitialFiles: function(cannedFileList) {
	            this._parent.prototype.addInitialFiles.apply(this, arguments);
	            this._templating.addCacheToDom();
	        },
	
	        clearStoredFiles: function() {
	            this._parent.prototype.clearStoredFiles.apply(this, arguments);
	            this._templating.clearFiles();
	        },
	
	        addExtraDropzone: function(element) {
	            this._dnd && this._dnd.setupExtraDropzone(element);
	        },
	
	        removeExtraDropzone: function(element) {
	            if (this._dnd) {
	                return this._dnd.removeDropzone(element);
	            }
	        },
	
	        getItemByFileId: function(id) {
	            if (!this._templating.isHiddenForever(id)) {
	                return this._templating.getFileContainer(id);
	            }
	        },
	
	        reset: function() {
	            this._parent.prototype.reset.apply(this, arguments);
	            this._templating.reset();
	
	            if (!this._options.button && this._templating.getButton()) {
	                this._defaultButtonId = this._createUploadButton({
	                    element: this._templating.getButton(),
	                    title: this._options.text.fileInputTitle
	                }).getButtonId();
	            }
	
	            if (this._dnd) {
	                this._dnd.dispose();
	                this._dnd = this._setupDragAndDrop();
	            }
	
	            this._totalFilesInBatch = 0;
	            this._filesInBatchAddedToUi = 0;
	
	            this._setupClickAndEditEventHandlers();
	        },
	
	        setName: function(id, newName) {
	            var formattedFilename = this._options.formatFileName(newName);
	
	            this._parent.prototype.setName.apply(this, arguments);
	            this._templating.updateFilename(id, formattedFilename);
	        },
	
	        pauseUpload: function(id) {
	            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);
	
	            paused && this._templating.uploadPaused(id);
	            return paused;
	        },
	
	        continueUpload: function(id) {
	            var continued = this._parent.prototype.continueUpload.apply(this, arguments);
	
	            continued && this._templating.uploadContinued(id);
	            return continued;
	        },
	
	        getId: function(fileContainerOrChildEl) {
	            return this._templating.getFileId(fileContainerOrChildEl);
	        },
	
	        getDropTarget: function(fileId) {
	            var file = this.getFile(fileId);
	
	            return file.qqDropTarget;
	        }
	    };
	
	    /**
	     * Defines the private (internal) API for FineUploader mode.
	     */
	    qq.uiPrivateApi = {
	        _getButton: function(buttonId) {
	            var button = this._parent.prototype._getButton.apply(this, arguments);
	
	            if (!button) {
	                if (buttonId === this._defaultButtonId) {
	                    button = this._templating.getButton();
	                }
	            }
	
	            return button;
	        },
	
	        _removeFileItem: function(fileId) {
	            this._templating.removeFile(fileId);
	        },
	
	        _setupClickAndEditEventHandlers: function() {
	            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();
	
	            // A better approach would be to check specifically for focusin event support by querying the DOM API,
	            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.
	            this._focusinEventSupported = !qq.firefox();
	
	            if (this._isEditFilenameEnabled())
	            {
	                this._filenameClickHandler = this._bindFilenameClickEvent();
	                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();
	                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();
	            }
	        },
	
	        _setupDragAndDrop: function() {
	            var self = this,
	                dropZoneElements = this._options.dragAndDrop.extraDropzones,
	                templating = this._templating,
	                defaultDropZone = templating.getDropZone();
	
	            defaultDropZone && dropZoneElements.push(defaultDropZone);
	
	            return new qq.DragAndDrop({
	                dropZoneElements: dropZoneElements,
	                allowMultipleItems: this._options.multiple,
	                classes: {
	                    dropActive: this._options.classes.dropActive
	                },
	                callbacks: {
	                    processingDroppedFiles: function() {
	                        templating.showDropProcessing();
	                    },
	                    processingDroppedFilesComplete: function(files, targetEl) {
	                        templating.hideDropProcessing();
	
	                        qq.each(files, function(idx, file) {
	                            file.qqDropTarget = targetEl;
	                        });
	
	                        if (files.length) {
	                            self.addFiles(files, null, null);
	                        }
	                    },
	                    dropError: function(code, errorData) {
	                        self._itemError(code, errorData);
	                    },
	                    dropLog: function(message, level) {
	                        self.log(message, level);
	                    }
	                }
	            });
	        },
	
	        _bindFileButtonsClickEvent: function() {
	            var self = this;
	
	            return new qq.FileButtonsClickHandler({
	                templating: this._templating,
	
	                log: function(message, lvl) {
	                    self.log(message, lvl);
	                },
	
	                onDeleteFile: function(fileId) {
	                    self.deleteFile(fileId);
	                },
	
	                onCancel: function(fileId) {
	                    self.cancel(fileId);
	                },
	
	                onRetry: function(fileId) {
	                    self.retry(fileId);
	                },
	
	                onPause: function(fileId) {
	                    self.pauseUpload(fileId);
	                },
	
	                onContinue: function(fileId) {
	                    self.continueUpload(fileId);
	                },
	
	                onGetName: function(fileId) {
	                    return self.getName(fileId);
	                }
	            });
	        },
	
	        _isEditFilenameEnabled: function() {
	            /*jshint -W014 */
	            return this._templating.isEditFilenamePossible()
	                && !this._options.autoUpload
	                && qq.FilenameClickHandler
	                && qq.FilenameInputFocusHandler
	                && qq.FilenameInputFocusHandler;
	        },
	
	        _filenameEditHandler: function() {
	            var self = this,
	                templating = this._templating;
	
	            return {
	                templating: templating,
	                log: function(message, lvl) {
	                    self.log(message, lvl);
	                },
	                onGetUploadStatus: function(fileId) {
	                    return self.getUploads({id: fileId}).status;
	                },
	                onGetName: function(fileId) {
	                    return self.getName(fileId);
	                },
	                onSetName: function(id, newName) {
	                    self.setName(id, newName);
	                },
	                onEditingStatusChange: function(id, isEditing) {
	                    var qqInput = qq(templating.getEditInput(id)),
	                        qqFileContainer = qq(templating.getFileContainer(id));
	
	                    if (isEditing) {
	                        qqInput.addClass("qq-editing");
	                        templating.hideFilename(id);
	                        templating.hideEditIcon(id);
	                    }
	                    else {
	                        qqInput.removeClass("qq-editing");
	                        templating.showFilename(id);
	                        templating.showEditIcon(id);
	                    }
	
	                    // Force IE8 and older to repaint
	                    qqFileContainer.addClass("qq-temp").removeClass("qq-temp");
	                }
	            };
	        },
	
	        _onUploadStatusChange: function(id, oldStatus, newStatus) {
	            this._parent.prototype._onUploadStatusChange.apply(this, arguments);
	
	            if (this._isEditFilenameEnabled()) {
	                // Status for a file exists before it has been added to the DOM, so we must be careful here.
	                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {
	                    this._templating.markFilenameEditable(id);
	                    this._templating.hideEditIcon(id);
	                }
	            }
	
	            if (newStatus === qq.status.UPLOAD_RETRYING) {
	                this._templating.hideRetry(id);
	                this._templating.setStatusText(id);
	                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);
	            }
	            else if (newStatus === qq.status.UPLOAD_FAILED) {
	                this._templating.hidePause(id);
	            }
	        },
	
	        _bindFilenameInputFocusInEvent: function() {
	            var spec = qq.extend({}, this._filenameEditHandler());
	
	            return new qq.FilenameInputFocusInHandler(spec);
	        },
	
	        _bindFilenameInputFocusEvent: function() {
	            var spec = qq.extend({}, this._filenameEditHandler());
	
	            return new qq.FilenameInputFocusHandler(spec);
	        },
	
	        _bindFilenameClickEvent: function() {
	            var spec = qq.extend({}, this._filenameEditHandler());
	
	            return new qq.FilenameClickHandler(spec);
	        },
	
	        _storeForLater: function(id) {
	            this._parent.prototype._storeForLater.apply(this, arguments);
	            this._templating.hideSpinner(id);
	        },
	
	        _onAllComplete: function(successful, failed) {
	            this._parent.prototype._onAllComplete.apply(this, arguments);
	            this._templating.resetTotalProgress();
	        },
	
	        _onSubmit: function(id, name) {
	            var file = this.getFile(id);
	
	            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {
	                this._paramsStore.addReadOnly(id, {
	                    qqpath: file.qqPath
	                });
	            }
	
	            this._parent.prototype._onSubmit.apply(this, arguments);
	            this._addToList(id, name);
	        },
	
	        // The file item has been added to the DOM.
	        _onSubmitted: function(id) {
	            // If the edit filename feature is enabled, mark the filename element as "editable" and the associated edit icon
	            if (this._isEditFilenameEnabled()) {
	                this._templating.markFilenameEditable(id);
	                this._templating.showEditIcon(id);
	
	                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input
	                if (!this._focusinEventSupported) {
	                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));
	                }
	            }
	        },
	
	        // Update the progress bar & percentage as the file is uploaded
	        _onProgress: function(id, name, loaded, total) {
	            this._parent.prototype._onProgress.apply(this, arguments);
	
	            this._templating.updateProgress(id, loaded, total);
	
	            if (Math.round(loaded / total * 100) === 100) {
	                this._templating.hideCancel(id);
	                this._templating.hidePause(id);
	                this._templating.hideProgress(id);
	                this._templating.setStatusText(id, this._options.text.waitingForResponse);
	
	                // If ~last byte was sent, display total file size
	                this._displayFileSize(id);
	            }
	            else {
	                // If still uploading, display percentage - total size is actually the total request(s) size
	                this._displayFileSize(id, loaded, total);
	            }
	        },
	
	        _onTotalProgress: function(loaded, total) {
	            this._parent.prototype._onTotalProgress.apply(this, arguments);
	            this._templating.updateTotalProgress(loaded, total);
	        },
	
	        _onComplete: function(id, name, result, xhr) {
	            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),
	                templating = this._templating,
	                fileContainer = templating.getFileContainer(id),
	                self = this;
	
	            function completeUpload(result) {
	                // If this file is not represented in the templating module, perhaps it was hidden intentionally.
	                // If so, don't perform any UI-related tasks related to this file.
	                if (!fileContainer) {
	                    return;
	                }
	
	                templating.setStatusText(id);
	
	                qq(fileContainer).removeClass(self._classes.retrying);
	                templating.hideProgress(id);
	
	                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {
	                    templating.hideCancel(id);
	                }
	                templating.hideSpinner(id);
	
	                if (result.success) {
	                    self._markFileAsSuccessful(id);
	                }
	                else {
	                    qq(fileContainer).addClass(self._classes.fail);
	                    templating.showCancel(id);
	
	                    if (templating.isRetryPossible() && !self._preventRetries[id]) {
	                        qq(fileContainer).addClass(self._classes.retryable);
	                        templating.showRetry(id);
	                    }
	                    self._controlFailureTextDisplay(id, result);
	                }
	            }
	
	            // The parent may need to perform some async operation before we can accurately determine the status of the upload.
	            if (parentRetVal instanceof qq.Promise) {
	                parentRetVal.done(function(newResult) {
	                    completeUpload(newResult);
	                });
	
	            }
	            else {
	                completeUpload(result);
	            }
	
	            return parentRetVal;
	        },
	
	        _markFileAsSuccessful: function(id) {
	            var templating = this._templating;
	
	            if (this._isDeletePossible()) {
	                templating.showDeleteButton(id);
	            }
	
	            qq(templating.getFileContainer(id)).addClass(this._classes.success);
	
	            this._maybeUpdateThumbnail(id);
	        },
	
	        _onUploadPrep: function(id) {
	            this._parent.prototype._onUploadPrep.apply(this, arguments);
	            this._templating.showSpinner(id);
	        },
	
	        _onUpload: function(id, name) {
	            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);
	
	            this._templating.showSpinner(id);
	
	            return parentRetVal;
	        },
	
	        _onUploadChunk: function(id, chunkData) {
	            this._parent.prototype._onUploadChunk.apply(this, arguments);
	
	            // Only display the pause button if we have finished uploading at least one chunk
	            // & this file can be resumed
	            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {
	                this._templating.allowPause(id);
	            }
	        },
	
	        _onCancel: function(id, name) {
	            this._parent.prototype._onCancel.apply(this, arguments);
	            this._removeFileItem(id);
	
	            if (this._getNotFinished() === 0) {
	                this._templating.resetTotalProgress();
	            }
	        },
	
	        _onBeforeAutoRetry: function(id) {
	            var retryNumForDisplay, maxAuto, retryNote;
	
	            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);
	
	            this._showCancelLink(id);
	
	            if (this._options.retry.showAutoRetryNote) {
	                retryNumForDisplay = this._autoRetries[id];
	                maxAuto = this._options.retry.maxAutoAttempts;
	
	                retryNote = this._options.retry.autoRetryNote.replace(/\{retryNum\}/g, retryNumForDisplay);
	                retryNote = retryNote.replace(/\{maxAuto\}/g, maxAuto);
	
	                this._templating.setStatusText(id, retryNote);
	                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);
	            }
	        },
	
	        //return false if we should not attempt the requested retry
	        _onBeforeManualRetry: function(id) {
	            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {
	                this._templating.resetProgress(id);
	                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);
	                this._templating.setStatusText(id);
	                this._templating.showSpinner(id);
	                this._showCancelLink(id);
	                return true;
	            }
	            else {
	                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);
	                this._templating.showRetry(id);
	                return false;
	            }
	        },
	
	        _onSubmitDelete: function(id) {
	            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);
	
	            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);
	        },
	
	        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {
	            if (this._options.deleteFile.forceConfirm) {
	                this._showDeleteConfirm.apply(this, arguments);
	            }
	            else {
	                this._sendDeleteRequest.apply(this, arguments);
	            }
	        },
	
	        _onDeleteComplete: function(id, xhr, isError) {
	            this._parent.prototype._onDeleteComplete.apply(this, arguments);
	
	            this._templating.hideSpinner(id);
	
	            if (isError) {
	                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);
	                this._templating.showDeleteButton(id);
	            }
	            else {
	                this._removeFileItem(id);
	            }
	        },
	
	        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {
	            this._templating.hideDeleteButton(id);
	            this._templating.showSpinner(id);
	            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);
	            this._deleteHandler.sendDelete.apply(this, arguments);
	        },
	
	        _showDeleteConfirm: function(id, uuid, mandatedParams) {
	            /*jshint -W004 */
	            var fileName = this.getName(id),
	                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\{filename\}/g, fileName),
	                uuid = this.getUuid(id),
	                deleteRequestArgs = arguments,
	                self = this,
	                retVal;
	
	            retVal = this._options.showConfirm(confirmMessage);
	
	            if (qq.isGenericPromise(retVal)) {
	                retVal.then(function() {
	                    self._sendDeleteRequest.apply(self, deleteRequestArgs);
	                });
	            }
	            else if (retVal !== false) {
	                self._sendDeleteRequest.apply(self, deleteRequestArgs);
	            }
	        },
	
	        _addToList: function(id, name, canned) {
	            var prependData,
	                prependIndex = 0,
	                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,
	                record;
	
	            if (this._options.display.prependFiles) {
	                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {
	                    prependIndex = this._filesInBatchAddedToUi - 1;
	                }
	
	                prependData = {
	                    index: prependIndex
	                };
	            }
	
	            if (!canned) {
	                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {
	                    this._templating.disableCancel();
	                }
	
	                // Cancel all existing (previous) files and clear the list if this file is not part of
	                // a scaled file group that has already been accepted, or if this file is not part of
	                // a scaled file group at all.
	                if (!this._options.multiple) {
	                    record = this.getUploads({id: id});
	
	                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;
	
	                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {
	                        this._handler.cancelAll();
	                        this._clearList();
	                        this._handledProxyGroup = null;
	                    }
	                }
	            }
	
	            if (canned) {
	                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);
	                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true);
	            }
	            else {
	                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);
	                this._templating.generatePreview(id, this.getFile(id));
	            }
	
	            this._filesInBatchAddedToUi += 1;
	
	            if (canned ||
	                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {
	
	                this._displayFileSize(id);
	            }
	        },
	
	        _clearList: function() {
	            this._templating.clearFiles();
	            this.clearStoredFiles();
	        },
	
	        _displayFileSize: function(id, loadedSize, totalSize) {
	            var size = this.getSize(id),
	                sizeForDisplay = this._formatSize(size);
	
	            if (size >= 0) {
	                if (loadedSize !== undefined && totalSize !== undefined) {
	                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);
	                }
	
	                this._templating.updateSize(id, sizeForDisplay);
	            }
	        },
	
	        _formatProgress: function(uploadedSize, totalSize) {
	            var message = this._options.text.formatProgress;
	            function r(name, replacement) { message = message.replace(name, replacement); }
	
	            r("{percent}", Math.round(uploadedSize / totalSize * 100));
	            r("{total_size}", this._formatSize(totalSize));
	            return message;
	        },
	
	        _controlFailureTextDisplay: function(id, response) {
	            var mode, responseProperty, failureReason;
	
	            mode = this._options.failedUploadTextDisplay.mode;
	            responseProperty = this._options.failedUploadTextDisplay.responseProperty;
	
	            if (mode === "custom") {
	                failureReason = response[responseProperty];
	                if (!failureReason) {
	                    failureReason = this._options.text.failUpload;
	                }
	
	                this._templating.setStatusText(id, failureReason);
	
	                if (this._options.failedUploadTextDisplay.enableTooltip) {
	                    this._showTooltip(id, failureReason);
	                }
	            }
	            else if (mode === "default") {
	                this._templating.setStatusText(id, this._options.text.failUpload);
	            }
	            else if (mode !== "none") {
	                this.log("failedUploadTextDisplay.mode value of '" + mode + "' is not valid", "warn");
	            }
	        },
	
	        _showTooltip: function(id, text) {
	            this._templating.getFileContainer(id).title = text;
	        },
	
	        _showCancelLink: function(id) {
	            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {
	                this._templating.showCancel(id);
	            }
	        },
	
	        _itemError: function(code, name, item) {
	            var message = this._parent.prototype._itemError.apply(this, arguments);
	            this._options.showMessage(message);
	        },
	
	        _batchError: function(message) {
	            this._parent.prototype._batchError.apply(this, arguments);
	            this._options.showMessage(message);
	        },
	
	        _setupPastePrompt: function() {
	            var self = this;
	
	            this._options.callbacks.onPasteReceived = function() {
	                var message = self._options.paste.namePromptMessage,
	                    defaultVal = self._options.paste.defaultName;
	
	                return self._options.showPrompt(message, defaultVal);
	            };
	        },
	
	        _fileOrBlobRejected: function(id, name) {
	            this._totalFilesInBatch -= 1;
	            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);
	        },
	
	        _prepareItemsForUpload: function(items, params, endpoint) {
	            this._totalFilesInBatch = items.length;
	            this._filesInBatchAddedToUi = 0;
	            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);
	        },
	
	        _maybeUpdateThumbnail: function(fileId) {
	            var thumbnailUrl = this._thumbnailUrls[fileId],
	                fileStatus = this.getUploads({id: fileId}).status;
	
	            if (fileStatus !== qq.status.DELETED &&
	                (thumbnailUrl ||
	                this._options.thumbnails.placeholders.waitUntilResponse ||
	                !qq.supportedFeatures.imagePreviews)) {
	
	                // This will replace the "waiting" placeholder with a "preview not available" placeholder
	                // if called with a null thumbnailUrl.
	                this._templating.updateThumbnail(fileId, thumbnailUrl);
	            }
	        },
	
	        _addCannedFile: function(sessionData) {
	            var id = this._parent.prototype._addCannedFile.apply(this, arguments);
	
	            this._addToList(id, this.getName(id), true);
	            this._templating.hideSpinner(id);
	            this._templating.hideCancel(id);
	            this._markFileAsSuccessful(id);
	
	            return id;
	        },
	
	        _setSize: function(id, newSize) {
	            this._parent.prototype._setSize.apply(this, arguments);
	
	            this._templating.updateSize(id, this._formatSize(newSize));
	        },
	
	        _sessionRequestComplete: function() {
	            this._templating.addCacheToDom();
	            this._parent.prototype._sessionRequestComplete.apply(this, arguments);
	        }
	    };
	}());
	
	/*globals qq */
	/**
	 * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.
	 */
	qq.FineUploader = function(o, namespace) {
	    "use strict";
	
	    var self = this;
	
	    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden
	    // if the (internal) caller defines a different parent.  The parent is also used by
	    // the private and public API functions that need to delegate to a parent function.
	    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;
	    this._parent.apply(this, arguments);
	
	    // Options provided by FineUploader mode
	    qq.extend(this._options, {
	        element: null,
	
	        button: null,
	
	        listElement: null,
	
	        dragAndDrop: {
	            extraDropzones: [],
	            reportDirectoryPaths: false
	        },
	
	        text: {
	            formatProgress: "{percent}% of {total_size}",
	            failUpload: "Upload failed",
	            waitingForResponse: "Processing...",
	            paused: "Paused"
	        },
	
	        template: "qq-template",
	
	        classes: {
	            retrying: "qq-upload-retrying",
	            retryable: "qq-upload-retryable",
	            success: "qq-upload-success",
	            fail: "qq-upload-fail",
	            editable: "qq-editable",
	            hide: "qq-hide",
	            dropActive: "qq-upload-drop-area-active"
	        },
	
	        failedUploadTextDisplay: {
	            mode: "default", //default, custom, or none
	            responseProperty: "error",
	            enableTooltip: true
	        },
	
	        messages: {
	            tooManyFilesError: "You may only drop one file",
	            unsupportedBrowser: "Unrecoverable error - this browser does not permit file uploading of any kind."
	        },
	
	        retry: {
	            showAutoRetryNote: true,
	            autoRetryNote: "Retrying {retryNum}/{maxAuto}..."
	        },
	
	        deleteFile: {
	            forceConfirm: false,
	            confirmMessage: "Are you sure you want to delete {filename}?",
	            deletingStatusText: "Deleting...",
	            deletingFailedText: "Delete failed"
	
	        },
	
	        display: {
	            fileSizeOnSubmit: false,
	            prependFiles: false
	        },
	
	        paste: {
	            promptForName: false,
	            namePromptMessage: "Please name this image"
	        },
	
	        thumbnails: {
	            maxCount: 0,
	            placeholders: {
	                waitUntilResponse: false,
	                notAvailablePath: null,
	                waitingPath: null
	            },
	            timeBetweenThumbs: 750
	        },
	
	        scaling: {
	            hideScaled: false
	        },
	
	        showMessage: function(message) {
	            if (self._templating.hasDialog("alert")) {
	                return self._templating.showDialog("alert", message);
	            }
	            else {
	                setTimeout(function() {
	                    window.alert(message);
	                }, 0);
	            }
	        },
	
	        showConfirm: function(message) {
	            if (self._templating.hasDialog("confirm")) {
	                return self._templating.showDialog("confirm", message);
	            }
	            else {
	                return window.confirm(message);
	            }
	        },
	
	        showPrompt: function(message, defaultValue) {
	            if (self._templating.hasDialog("prompt")) {
	                return self._templating.showDialog("prompt", message, defaultValue);
	            }
	            else {
	                return window.prompt(message, defaultValue);
	            }
	        }
	    }, true);
	
	    // Replace any default options with user defined ones
	    qq.extend(this._options, o, true);
	
	    this._templating = new qq.Templating({
	        log: qq.bind(this.log, this),
	        templateIdOrEl: this._options.template,
	        containerEl: this._options.element,
	        fileContainerEl: this._options.listElement,
	        button: this._options.button,
	        imageGenerator: this._imageGenerator,
	        classes: {
	            hide: this._options.classes.hide,
	            editable: this._options.classes.editable
	        },
	        limits: {
	            maxThumbs: this._options.thumbnails.maxCount,
	            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs
	        },
	        placeholders: {
	            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,
	            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,
	            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath
	        },
	        text: this._options.text
	    });
	
	    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {
	        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);
	    }
	    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {
	        this._templating.renderFailure(this._options.messages.unsupportedBrowser);
	    }
	    else {
	        this._wrapCallbacks();
	
	        this._templating.render();
	
	        this._classes = this._options.classes;
	
	        if (!this._options.button && this._templating.getButton()) {
	            this._defaultButtonId = this._createUploadButton({
	                element: this._templating.getButton(),
	                title: this._options.text.fileInputTitle
	            }).getButtonId();
	        }
	
	        this._setupClickAndEditEventHandlers();
	
	        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {
	            this._dnd = this._setupDragAndDrop();
	        }
	
	        if (this._options.paste.targetElement && this._options.paste.promptForName) {
	            if (qq.PasteSupport) {
	                this._setupPastePrompt();
	            }
	            else {
	                this.log("Paste support module not found.", "error");
	            }
	        }
	
	        this._totalFilesInBatch = 0;
	        this._filesInBatchAddedToUi = 0;
	    }
	};
	
	// Inherit the base public & private API methods
	qq.extend(qq.FineUploader.prototype, qq.basePublicApi);
	qq.extend(qq.FineUploader.prototype, qq.basePrivateApi);
	
	// Add the FineUploader/default UI public & private UI methods, which may override some base methods.
	qq.extend(qq.FineUploader.prototype, qq.uiPublicApi);
	qq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);
	
	/* globals qq */
	/* jshint -W065 */
	/**
	 * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least
	 * a limited amount of control over the template elements after they are added to the DOM.
	 * Wherever possible, this module asserts total control over template elements present in the DOM.
	 *
	 * @param spec Specification object used to control various templating behaviors
	 * @constructor
	 */
	qq.Templating = function(spec) {
	    "use strict";
	
	    var FILE_ID_ATTR = "qq-file-id",
	        FILE_CLASS_PREFIX = "qq-file-id-",
	        THUMBNAIL_MAX_SIZE_ATTR = "qq-max-size",
	        THUMBNAIL_SERVER_SCALE_ATTR = "qq-server-scale",
	        // This variable is duplicated in the DnD module since it can function as a standalone as well
	        HIDE_DROPZONE_ATTR = "qq-hide-dropzone",
	        DROPZPONE_TEXT_ATTR = "qq-drop-area-text",
	        IN_PROGRESS_CLASS = "qq-in-progress",
	        HIDDEN_FOREVER_CLASS = "qq-hidden-forever",
	        fileBatch = {
	            content: document.createDocumentFragment(),
	            map: {}
	        },
	        isCancelDisabled = false,
	        generatedThumbnails = 0,
	        thumbnailQueueMonitorRunning = false,
	        thumbGenerationQueue = [],
	        thumbnailMaxSize = -1,
	        options = {
	            log: null,
	            limits: {
	                maxThumbs: 0,
	                timeBetweenThumbs: 750
	            },
	            templateIdOrEl: "qq-template",
	            containerEl: null,
	            fileContainerEl: null,
	            button: null,
	            imageGenerator: null,
	            classes: {
	                hide: "qq-hide",
	                editable: "qq-editable"
	            },
	            placeholders: {
	                waitUntilUpdate: false,
	                thumbnailNotAvailable: null,
	                waitingForThumbnail: null
	            },
	            text: {
	                paused: "Paused"
	            }
	        },
	        selectorClasses = {
	            button: "qq-upload-button-selector",
	            alertDialog: "qq-alert-dialog-selector",
	            dialogCancelButton: "qq-cancel-button-selector",
	            confirmDialog: "qq-confirm-dialog-selector",
	            dialogMessage: "qq-dialog-message-selector",
	            dialogOkButton: "qq-ok-button-selector",
	            promptDialog: "qq-prompt-dialog-selector",
	            uploader: "qq-uploader-selector",
	            drop: "qq-upload-drop-area-selector",
	            list: "qq-upload-list-selector",
	            progressBarContainer: "qq-progress-bar-container-selector",
	            progressBar: "qq-progress-bar-selector",
	            totalProgressBarContainer: "qq-total-progress-bar-container-selector",
	            totalProgressBar: "qq-total-progress-bar-selector",
	            file: "qq-upload-file-selector",
	            spinner: "qq-upload-spinner-selector",
	            size: "qq-upload-size-selector",
	            cancel: "qq-upload-cancel-selector",
	            pause: "qq-upload-pause-selector",
	            continueButton: "qq-upload-continue-selector",
	            deleteButton: "qq-upload-delete-selector",
	            retry: "qq-upload-retry-selector",
	            statusText: "qq-upload-status-text-selector",
	            editFilenameInput: "qq-edit-filename-selector",
	            editNameIcon: "qq-edit-filename-icon-selector",
	            dropText: "qq-upload-drop-area-text-selector",
	            dropProcessing: "qq-drop-processing-selector",
	            dropProcessingSpinner: "qq-drop-processing-spinner-selector",
	            thumbnail: "qq-thumbnail-selector"
	        },
	        previewGeneration = {},
	        cachedThumbnailNotAvailableImg = new qq.Promise(),
	        cachedWaitingForThumbnailImg = new qq.Promise(),
	        log,
	        isEditElementsExist,
	        isRetryElementExist,
	        templateHtml,
	        container,
	        fileList,
	        showThumbnails,
	        serverScale,
	
	        // During initialization of the templating module we should cache any
	        // placeholder images so we can quickly swap them into the file list on demand.
	        // Any placeholder images that cannot be loaded/found are simply ignored.
	        cacheThumbnailPlaceholders = function() {
	            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,
	                waitingUrl = options.placeholders.waitingForThumbnail,
	                spec = {
	                    maxSize: thumbnailMaxSize,
	                    scale: serverScale
	                };
	
	            if (showThumbnails) {
	                if (notAvailableUrl) {
	                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(
	                        function(updatedImg) {
	                            cachedThumbnailNotAvailableImg.success(updatedImg);
	                        },
	                        function() {
	                            cachedThumbnailNotAvailableImg.failure();
	                            log("Problem loading 'not available' placeholder image at " + notAvailableUrl, "error");
	                        }
	                    );
	                }
	                else {
	                    cachedThumbnailNotAvailableImg.failure();
	                }
	
	                if (waitingUrl) {
	                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(
	                        function(updatedImg) {
	                            cachedWaitingForThumbnailImg.success(updatedImg);
	                        },
	                        function() {
	                            cachedWaitingForThumbnailImg.failure();
	                            log("Problem loading 'waiting for thumbnail' placeholder image at " + waitingUrl, "error");
	                        }
	                    );
	                }
	                else {
	                    cachedWaitingForThumbnailImg.failure();
	                }
	            }
	        },
	
	        // Displays a "waiting for thumbnail" type placeholder image
	        // iff we were able to load it during initialization of the templating module.
	        displayWaitingImg = function(thumbnail) {
	            var waitingImgPlacement = new qq.Promise();
	
	            cachedWaitingForThumbnailImg.then(function(img) {
	                maybeScalePlaceholderViaCss(img, thumbnail);
	                /* jshint eqnull:true */
	                if (!thumbnail.src) {
	                    thumbnail.src = img.src;
	                    thumbnail.onload = function() {
	                        thumbnail.onload = null;
	                        show(thumbnail);
	                        waitingImgPlacement.success();
	                    };
	                }
	                else {
	                    waitingImgPlacement.success();
	                }
	            }, function() {
	                // In some browsers (such as IE9 and older) an img w/out a src attribute
	                // are displayed as "broken" images, so we should just hide the img tag
	                // if we aren't going to display the "waiting" placeholder.
	                hide(thumbnail);
	                waitingImgPlacement.success();
	            });
	
	            return waitingImgPlacement;
	        },
	
	        generateNewPreview = function(id, blob, spec) {
	            var thumbnail = getThumbnail(id);
	
	            log("Generating new thumbnail for " + id);
	            blob.qqThumbnailId = id;
	
	            return options.imageGenerator.generate(blob, thumbnail, spec).then(
	                function() {
	                    generatedThumbnails++;
	                    show(thumbnail);
	                    previewGeneration[id].success();
	                },
	                function() {
	                    previewGeneration[id].failure();
	
	                    // Display the "not available" placeholder img only if we are
	                    // not expecting a thumbnail at a later point, such as in a server response.
	                    if (!options.placeholders.waitUntilUpdate) {
	                        maybeSetDisplayNotAvailableImg(id, thumbnail);
	                    }
	                });
	        },
	
	        generateNextQueuedPreview = function() {
	            if (thumbGenerationQueue.length) {
	                thumbnailQueueMonitorRunning = true;
	
	                var queuedThumbRequest = thumbGenerationQueue.shift();
	
	                if (queuedThumbRequest.update) {
	                    processUpdateQueuedPreviewRequest(queuedThumbRequest);
	                }
	                else {
	                    processNewQueuedPreviewRequest(queuedThumbRequest);
	                }
	            }
	            else {
	                thumbnailQueueMonitorRunning = false;
	            }
	        },
	
	        getCancel = function(id) {
	            return getTemplateEl(getFile(id), selectorClasses.cancel);
	        },
	
	        getContinue = function(id) {
	            return getTemplateEl(getFile(id), selectorClasses.continueButton);
	        },
	
	        getDialog = function(type) {
	            return getTemplateEl(container, selectorClasses[type + "Dialog"]);
	        },
	
	        getDelete = function(id) {
	            return getTemplateEl(getFile(id), selectorClasses.deleteButton);
	        },
	
	        getDropProcessing = function() {
	            return getTemplateEl(container, selectorClasses.dropProcessing);
	        },
	
	        getEditIcon = function(id) {
	            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);
	        },
	
	        getFile = function(id) {
	            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);
	        },
	
	        getFilename = function(id) {
	            return getTemplateEl(getFile(id), selectorClasses.file);
	        },
	
	        getPause = function(id) {
	            return getTemplateEl(getFile(id), selectorClasses.pause);
	        },
	
	        getProgress = function(id) {
	            /* jshint eqnull:true */
	            // Total progress bar
	            if (id == null) {
	                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||
	                    getTemplateEl(container, selectorClasses.totalProgressBar);
	            }
	
	            // Per-file progress bar
	            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||
	                getTemplateEl(getFile(id), selectorClasses.progressBar);
	        },
	
	        getRetry = function(id) {
	            return getTemplateEl(getFile(id), selectorClasses.retry);
	        },
	
	        getSize = function(id) {
	            return getTemplateEl(getFile(id), selectorClasses.size);
	        },
	
	        getSpinner = function(id) {
	            return getTemplateEl(getFile(id), selectorClasses.spinner);
	        },
	
	        getTemplateEl = function(context, cssClass) {
	            return context && qq(context).getFirstByClass(cssClass);
	        },
	
	        getThumbnail = function(id) {
	            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);
	        },
	
	        hide = function(el) {
	            el && qq(el).addClass(options.classes.hide);
	        },
	
	        // Ensures a placeholder image does not exceed any max size specified
	        // via `style` attribute properties iff <canvas> was not used to scale
	        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.
	        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {
	            var maxWidth = placeholder.style.maxWidth,
	                maxHeight = placeholder.style.maxHeight;
	
	            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {
	                qq(thumbnail).css({
	                    maxWidth: maxWidth,
	                    maxHeight: maxHeight
	                });
	            }
	        },
	
	        // Displays a "thumbnail not available" type placeholder image
	        // iff we were able to load this placeholder during initialization
	        // of the templating module or after preview generation has failed.
	        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {
	            var previewing = previewGeneration[id] || new qq.Promise().failure(),
	                notAvailableImgPlacement = new qq.Promise();
	
	            cachedThumbnailNotAvailableImg.then(function(img) {
	                previewing.then(
	                    function() {
	                        notAvailableImgPlacement.success();
	                    },
	                    function() {
	                        maybeScalePlaceholderViaCss(img, thumbnail);
	
	                        thumbnail.onload = function() {
	                            thumbnail.onload = null;
	                            notAvailableImgPlacement.success();
	                        };
	
	                        thumbnail.src = img.src;
	                        show(thumbnail);
	                    }
	                );
	            });
	
	            return notAvailableImgPlacement;
	        },
	
	        /**
	         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust
	         * some internally-tracked state variables based on the contents of the template.
	         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)
	         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.
	         *
	         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates
	         */
	        parseAndGetTemplate = function() {
	            var scriptEl,
	                scriptHtml,
	                fileListNode,
	                tempTemplateEl,
	                fileListHtml,
	                defaultButton,
	                dropArea,
	                thumbnail,
	                dropProcessing,
	                dropTextEl,
	                uploaderEl;
	
	            log("Parsing template");
	
	            /*jshint -W116*/
	            if (options.templateIdOrEl == null) {
	                throw new Error("You MUST specify either a template element or ID!");
	            }
	
	            // Grab the contents of the script tag holding the template.
	            if (qq.isString(options.templateIdOrEl)) {
	                scriptEl = document.getElementById(options.templateIdOrEl);
	
	                if (scriptEl === null) {
	                    throw new Error(qq.format("Cannot find template script at ID '{}'!", options.templateIdOrEl));
	                }
	
	                scriptHtml = scriptEl.innerHTML;
	            }
	            else {
	                if (options.templateIdOrEl.innerHTML === undefined) {
	                    throw new Error("You have specified an invalid value for the template option!  " +
	                        "It must be an ID or an Element.");
	                }
	
	                scriptHtml = options.templateIdOrEl.innerHTML;
	            }
	
	            scriptHtml = qq.trimStr(scriptHtml);
	            tempTemplateEl = document.createElement("div");
	            tempTemplateEl.appendChild(qq.toElement(scriptHtml));
	            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);
	
	            // Don't include the default template button in the DOM
	            // if an alternate button container has been specified.
	            if (options.button) {
	                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);
	                if (defaultButton) {
	                    qq(defaultButton).remove();
	                }
	            }
	
	            // Omit the drop processing element from the DOM if DnD is not supported by the UA,
	            // or the drag and drop module is not found.
	            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD
	            // to support layouts where the drop zone is also a container for visible elements,
	            // such as the file list.
	            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {
	                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);
	                if (dropProcessing) {
	                    qq(dropProcessing).remove();
	                }
	            }
	
	            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);
	
	            // If DnD is not available then remove
	            // it from the DOM as well.
	            if (dropArea && !qq.DragAndDrop) {
	                log("DnD module unavailable.", "info");
	                qq(dropArea).remove();
	            }
	
	            if (!qq.supportedFeatures.fileDrop) {
	                // don't display any "drop files to upload" background text
	                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);
	
	                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {
	                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,
	                    // and the drop area is marked as "hide before enter", ensure it is hidden as the DnD module
	                    // will not do this (since we will not be loading the DnD module)
	                    qq(dropArea).css({
	                        display: "none"
	                    });
	                }
	            }
	            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {
	                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);
	                dropTextEl && qq(dropTextEl).remove();
	            }
	
	            // Ensure the `showThumbnails` flag is only set if the thumbnail element
	            // is present in the template AND the current UA is capable of generating client-side previews.
	            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);
	            if (!showThumbnails) {
	                thumbnail && qq(thumbnail).remove();
	            }
	            else if (thumbnail) {
	                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));
	                // Only enforce max size if the attr value is non-zero
	                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;
	
	                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);
	            }
	            showThumbnails = showThumbnails && thumbnail;
	
	            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;
	            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;
	
	            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);
	            /*jshint -W116*/
	            if (fileListNode == null) {
	                throw new Error("Could not find the file list container in the template!");
	            }
	
	            fileListHtml = fileListNode.innerHTML;
	            fileListNode.innerHTML = "";
	
	            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS
	            if (tempTemplateEl.getElementsByTagName("DIALOG").length) {
	                document.createElement("dialog");
	            }
	
	            log("Template parsing complete");
	
	            return {
	                template: qq.trimStr(tempTemplateEl.innerHTML),
	                fileTemplate: qq.trimStr(fileListHtml)
	            };
	        },
	
	        prependFile = function(el, index, fileList) {
	            var parentEl = fileList,
	                beforeEl = parentEl.firstChild;
	
	            if (index > 0) {
	                beforeEl = qq(parentEl).children()[index].nextSibling;
	
	            }
	
	            parentEl.insertBefore(el, beforeEl);
	        },
	
	        processNewQueuedPreviewRequest = function(queuedThumbRequest) {
	            var id = queuedThumbRequest.id,
	                optFileOrBlob = queuedThumbRequest.optFileOrBlob,
	                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,
	                thumbnail = getThumbnail(id),
	                spec = {
	                    maxSize: thumbnailMaxSize,
	                    scale: true,
	                    orient: true
	                };
	
	            if (qq.supportedFeatures.imagePreviews) {
	                if (thumbnail) {
	                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {
	                        maybeSetDisplayNotAvailableImg(id, thumbnail);
	                        generateNextQueuedPreview();
	                    }
	                    else {
	                        displayWaitingImg(thumbnail).done(function() {
	                            previewGeneration[id] = new qq.Promise();
	
	                            previewGeneration[id].done(function() {
	                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);
	                            });
	
	                            /* jshint eqnull: true */
	                            // If we've already generated an <img> for this file, use the one that exists,
	                            // don't waste resources generating a new one.
	                            if (relatedThumbnailId != null) {
	                                useCachedPreview(id, relatedThumbnailId);
	                            }
	                            else {
	                                generateNewPreview(id, optFileOrBlob, spec);
	                            }
	                        });
	                    }
	                }
	                // File element in template may have been removed, so move on to next item in queue
	                else {
	                    generateNextQueuedPreview();
	                }
	            }
	            else if (thumbnail) {
	                displayWaitingImg(thumbnail);
	                generateNextQueuedPreview();
	            }
	        },
	
	        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {
	            var id = queuedThumbRequest.id,
	                thumbnailUrl = queuedThumbRequest.thumbnailUrl,
	                showWaitingImg = queuedThumbRequest.showWaitingImg,
	                thumbnail = getThumbnail(id),
	                spec = {
	                    maxSize: thumbnailMaxSize,
	                    scale: serverScale
	                };
	
	            if (thumbnail) {
	                if (thumbnailUrl) {
	                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {
	                        maybeSetDisplayNotAvailableImg(id, thumbnail);
	                        generateNextQueuedPreview();
	                    }
	                    else {
	                        if (showWaitingImg) {
	                            displayWaitingImg(thumbnail);
	                        }
	
	                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(
	                            function() {
	                                show(thumbnail);
	                                generatedThumbnails++;
	                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);
	                            },
	
	                            function() {
	                                maybeSetDisplayNotAvailableImg(id, thumbnail);
	                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);
	                            }
	                        );
	                    }
	                }
	                else {
	                    maybeSetDisplayNotAvailableImg(id, thumbnail);
	                    generateNextQueuedPreview();
	                }
	            }
	        },
	
	        setProgressBarWidth = function(id, percent) {
	            var bar = getProgress(id),
	                /* jshint eqnull:true */
	                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;
	
	            if (bar && !qq(bar).hasClass(progressBarSelector)) {
	                bar = qq(bar).getFirstByClass(progressBarSelector);
	            }
	
	            if (bar) {
	                qq(bar).css({width: percent + "%"});
	                bar.setAttribute("aria-valuenow", percent);
	            }
	        },
	
	        show = function(el) {
	            el && qq(el).removeClass(options.classes.hide);
	        },
	
	        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {
	            var targetThumnail = getThumbnail(targetThumbnailId),
	                cachedThumbnail = getThumbnail(cachedThumbnailId);
	
	            log(qq.format("ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));
	
	            // Generation of the related thumbnail may still be in progress, so, wait until it is done.
	            previewGeneration[cachedThumbnailId].then(function() {
	                generatedThumbnails++;
	                previewGeneration[targetThumbnailId].success();
	                log(qq.format("Now using previously generated thumbnail created for ID {} on ID {}.", cachedThumbnailId, targetThumbnailId));
	                targetThumnail.src = cachedThumbnail.src;
	                show(targetThumnail);
	            },
	            function() {
	                previewGeneration[targetThumbnailId].failure();
	                if (!options.placeholders.waitUntilUpdate) {
	                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumnail);
	                }
	            });
	        };
	
	    qq.extend(options, spec);
	    log = options.log;
	
	    // No need to worry about conserving CPU or memory on older browsers,
	    // since there is no ability to preview, and thumbnail display is primitive and quick.
	    if (!qq.supportedFeatures.imagePreviews) {
	        options.limits.timeBetweenThumbs = 0;
	        options.limits.maxThumbs = 0;
	    }
	
	    container = options.containerEl;
	    showThumbnails = options.imageGenerator !== undefined;
	    templateHtml = parseAndGetTemplate();
	
	    cacheThumbnailPlaceholders();
	
	    qq.extend(this, {
	        render: function() {
	            log("Rendering template in DOM.");
	
	            generatedThumbnails = 0;
	
	            container.innerHTML = templateHtml.template;
	            hide(getDropProcessing());
	            this.hideTotalProgress();
	            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);
	
	            log("Template rendering complete");
	        },
	
	        renderFailure: function(message) {
	            var cantRenderEl = qq.toElement(message);
	            container.innerHTML = "";
	            container.appendChild(cantRenderEl);
	        },
	
	        reset: function() {
	            this.render();
	        },
	
	        clearFiles: function() {
	            fileList.innerHTML = "";
	        },
	
	        disableCancel: function() {
	            isCancelDisabled = true;
	        },
	
	        addFile: function(id, name, prependInfo, hideForever, batch) {
	            var fileEl = qq.toElement(templateHtml.fileTemplate),
	                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),
	                uploaderEl = getTemplateEl(container, selectorClasses.uploader),
	                fileContainer = batch ? fileBatch.content : fileList,
	                thumb;
	
	            if (batch) {
	                fileBatch.map[id] = fileEl;
	            }
	
	            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);
	            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);
	
	            if (fileNameEl) {
	                qq(fileNameEl).setText(name);
	                fileNameEl.setAttribute("title", name);
	            }
	
	            fileEl.setAttribute(FILE_ID_ATTR, id);
	
	            if (prependInfo) {
	                prependFile(fileEl, prependInfo.index, fileContainer);
	            }
	            else {
	                fileContainer.appendChild(fileEl);
	            }
	
	            if (hideForever) {
	                fileEl.style.display = "none";
	                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);
	            }
	            else {
	                hide(getProgress(id));
	                hide(getSize(id));
	                hide(getDelete(id));
	                hide(getRetry(id));
	                hide(getPause(id));
	                hide(getContinue(id));
	
	                if (isCancelDisabled) {
	                    this.hideCancel(id);
	                }
	
	                thumb = getThumbnail(id);
	                if (thumb && !thumb.src) {
	                    cachedWaitingForThumbnailImg.then(function(waitingImg) {
	                        thumb.src = waitingImg.src;
	                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {
	                            qq(thumb).css({
	                                maxHeight: waitingImg.style.maxHeight,
	                                maxWidth: waitingImg.style.maxWidth
	                            });
	                        }
	
	                        show(thumb);
	                    });
	                }
	            }
	        },
	
	        addFileToCache: function(id, name, prependInfo, hideForever) {
	            this.addFile(id, name, prependInfo, hideForever, true);
	        },
	
	        addCacheToDom: function() {
	            fileList.appendChild(fileBatch.content);
	            fileBatch.content = document.createDocumentFragment();
	            fileBatch.map = {};
	        },
	
	        removeFile: function(id) {
	            qq(getFile(id)).remove();
	        },
	
	        getFileId: function(el) {
	            var currentNode = el;
	
	            if (currentNode) {
	                /*jshint -W116*/
	                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {
	                    currentNode = currentNode.parentNode;
	                }
	
	                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));
	            }
	        },
	
	        getFileList: function() {
	            return fileList;
	        },
	
	        markFilenameEditable: function(id) {
	            var filename = getFilename(id);
	
	            filename && qq(filename).addClass(options.classes.editable);
	        },
	
	        updateFilename: function(id, name) {
	            var filenameEl = getFilename(id);
	
	            if (filenameEl) {
	                qq(filenameEl).setText(name);
	                filenameEl.setAttribute("title", name);
	            }
	        },
	
	        hideFilename: function(id) {
	            hide(getFilename(id));
	        },
	
	        showFilename: function(id) {
	            show(getFilename(id));
	        },
	
	        isFileName: function(el) {
	            return qq(el).hasClass(selectorClasses.file);
	        },
	
	        getButton: function() {
	            return options.button || getTemplateEl(container, selectorClasses.button);
	        },
	
	        hideDropProcessing: function() {
	            hide(getDropProcessing());
	        },
	
	        showDropProcessing: function() {
	            show(getDropProcessing());
	        },
	
	        getDropZone: function() {
	            return getTemplateEl(container, selectorClasses.drop);
	        },
	
	        isEditFilenamePossible: function() {
	            return isEditElementsExist;
	        },
	
	        hideRetry: function(id) {
	            hide(getRetry(id));
	        },
	
	        isRetryPossible: function() {
	            return isRetryElementExist;
	        },
	
	        showRetry: function(id) {
	            show(getRetry(id));
	        },
	
	        getFileContainer: function(id) {
	            return getFile(id);
	        },
	
	        showEditIcon: function(id) {
	            var icon = getEditIcon(id);
	
	            icon && qq(icon).addClass(options.classes.editable);
	        },
	
	        isHiddenForever: function(id) {
	            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);
	        },
	
	        hideEditIcon: function(id) {
	            var icon = getEditIcon(id);
	
	            icon && qq(icon).removeClass(options.classes.editable);
	        },
	
	        isEditIcon: function(el) {
	            return qq(el).hasClass(selectorClasses.editNameIcon, true);
	        },
	
	        getEditInput: function(id) {
	            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);
	        },
	
	        isEditInput: function(el) {
	            return qq(el).hasClass(selectorClasses.editFilenameInput, true);
	        },
	
	        updateProgress: function(id, loaded, total) {
	            var bar = getProgress(id),
	                percent;
	
	            if (bar && total > 0) {
	                percent = Math.round(loaded / total * 100);
	
	                if (percent === 100) {
	                    hide(bar);
	                }
	                else {
	                    show(bar);
	                }
	
	                setProgressBarWidth(id, percent);
	            }
	        },
	
	        updateTotalProgress: function(loaded, total) {
	            this.updateProgress(null, loaded, total);
	        },
	
	        hideProgress: function(id) {
	            var bar = getProgress(id);
	
	            bar && hide(bar);
	        },
	
	        hideTotalProgress: function() {
	            this.hideProgress();
	        },
	
	        resetProgress: function(id) {
	            setProgressBarWidth(id, 0);
	            this.hideTotalProgress(id);
	        },
	
	        resetTotalProgress: function() {
	            this.resetProgress();
	        },
	
	        showCancel: function(id) {
	            if (!isCancelDisabled) {
	                var cancel = getCancel(id);
	
	                cancel && qq(cancel).removeClass(options.classes.hide);
	            }
	        },
	
	        hideCancel: function(id) {
	            hide(getCancel(id));
	        },
	
	        isCancel: function(el)  {
	            return qq(el).hasClass(selectorClasses.cancel, true);
	        },
	
	        allowPause: function(id) {
	            show(getPause(id));
	            hide(getContinue(id));
	        },
	
	        uploadPaused: function(id) {
	            this.setStatusText(id, options.text.paused);
	            this.allowContinueButton(id);
	            hide(getSpinner(id));
	        },
	
	        hidePause: function(id) {
	            hide(getPause(id));
	        },
	
	        isPause: function(el) {
	            return qq(el).hasClass(selectorClasses.pause, true);
	        },
	
	        isContinueButton: function(el) {
	            return qq(el).hasClass(selectorClasses.continueButton, true);
	        },
	
	        allowContinueButton: function(id) {
	            show(getContinue(id));
	            hide(getPause(id));
	        },
	
	        uploadContinued: function(id) {
	            this.setStatusText(id, "");
	            this.allowPause(id);
	            show(getSpinner(id));
	        },
	
	        showDeleteButton: function(id) {
	            show(getDelete(id));
	        },
	
	        hideDeleteButton: function(id) {
	            hide(getDelete(id));
	        },
	
	        isDeleteButton: function(el) {
	            return qq(el).hasClass(selectorClasses.deleteButton, true);
	        },
	
	        isRetry: function(el) {
	            return qq(el).hasClass(selectorClasses.retry, true);
	        },
	
	        updateSize: function(id, text) {
	            var size = getSize(id);
	
	            if (size) {
	                show(size);
	                qq(size).setText(text);
	            }
	        },
	
	        setStatusText: function(id, text) {
	            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);
	
	            if (textEl) {
	                /*jshint -W116*/
	                if (text == null) {
	                    qq(textEl).clearText();
	                }
	                else {
	                    qq(textEl).setText(text);
	                }
	            }
	        },
	
	        hideSpinner: function(id) {
	            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);
	            hide(getSpinner(id));
	        },
	
	        showSpinner: function(id) {
	            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);
	            show(getSpinner(id));
	        },
	
	        generatePreview: function(id, optFileOrBlob) {
	            if (!this.isHiddenForever(id)) {
	                thumbGenerationQueue.push({id: id, optFileOrBlob: optFileOrBlob});
	                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();
	            }
	        },
	
	        updateThumbnail: function(id, thumbnailUrl, showWaitingImg) {
	            if (!this.isHiddenForever(id)) {
	                thumbGenerationQueue.push({update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});
	                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();
	            }
	        },
	
	        hasDialog: function(type) {
	            return qq.supportedFeatures.dialogElement && !!getDialog(type);
	        },
	
	        showDialog: function(type, message, defaultValue) {
	            var dialog = getDialog(type),
	                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),
	                inputEl = dialog.getElementsByTagName("INPUT")[0],
	                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),
	                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),
	                promise = new qq.Promise(),
	
	                closeHandler = function() {
	                    cancelBtn.removeEventListener("click", cancelClickHandler);
	                    okBtn && okBtn.removeEventListener("click", okClickHandler);
	                    promise.failure();
	                },
	
	                cancelClickHandler = function() {
	                    cancelBtn.removeEventListener("click", cancelClickHandler);
	                    dialog.close();
	                },
	
	                okClickHandler = function() {
	                    dialog.removeEventListener("close", closeHandler);
	                    okBtn.removeEventListener("click", okClickHandler);
	                    dialog.close();
	
	                    promise.success(inputEl && inputEl.value);
	                };
	
	            dialog.addEventListener("close", closeHandler);
	            cancelBtn.addEventListener("click", cancelClickHandler);
	            okBtn && okBtn.addEventListener("click", okClickHandler);
	
	            if (inputEl) {
	                inputEl.value = defaultValue;
	            }
	            messageEl.textContent = message;
	
	            dialog.showModal();
	
	            return promise;
	        }
	    });
	};
	
	/*globals qq */
	qq.s3 = qq.s3 || {};
	
	qq.s3.util = qq.s3.util || (function() {
	    "use strict";
	
	    return {
	        ALGORITHM_PARAM_NAME: "x-amz-algorithm",
	
	        AWS_PARAM_PREFIX: "x-amz-meta-",
	
	        CREDENTIAL_PARAM_NAME: "x-amz-credential",
	
	        DATE_PARAM_NAME: "x-amz-date",
	
	        REDUCED_REDUNDANCY_PARAM_NAME: "x-amz-storage-class",
	        REDUCED_REDUNDANCY_PARAM_VALUE: "REDUCED_REDUNDANCY",
	
	        SERVER_SIDE_ENCRYPTION_PARAM_NAME: "x-amz-server-side-encryption",
	        SERVER_SIDE_ENCRYPTION_PARAM_VALUE: "AES256",
	
	        SESSION_TOKEN_PARAM_NAME: "x-amz-security-token",
	
	        V4_ALGORITHM_PARAM_VALUE: "AWS4-HMAC-SHA256",
	
	        V4_SIGNATURE_PARAM_NAME: "x-amz-signature",
	
	        CASE_SENSITIVE_PARAM_NAMES: [
	            "Cache-Control",
	            "Content-Disposition",
	            "Content-Encoding",
	            "Content-MD5"
	        ],
	
	        UNSIGNABLE_REST_HEADER_NAMES: [
	            "Cache-Control",
	            "Content-Disposition",
	            "Content-Encoding",
	            "Content-MD5"
	        ],
	
	        UNPREFIXED_PARAM_NAMES: [
	            "Cache-Control",
	            "Content-Disposition",
	            "Content-Encoding",
	            "Content-MD5",
	            "x-amz-server-side-encryption-customer-algorithm",
	            "x-amz-server-side-encryption-customer-key",
	            "x-amz-server-side-encryption-customer-key-MD5"
	        ],
	
	        /**
	         * This allows for the region to be specified in the bucket's endpoint URL, or not.
	         *
	         * Examples of some valid endpoints are:
	         *     http://foo.s3.amazonaws.com
	         *     https://foo.s3.amazonaws.com
	         *     http://foo.s3-ap-northeast-1.amazonaws.com
	         *     foo.s3.amazonaws.com
	         *     http://foo.bar.com
	         *     http://s3.amazonaws.com/foo.bar.com
	         * ...etc
	         *
	         * @param endpoint The bucket's URL.
	         * @returns {String || undefined} The bucket name, or undefined if the URL cannot be parsed.
	         */
	        getBucket: function(endpoint) {
	            var patterns = [
	                    //bucket in domain
	                    /^(?:https?:\/\/)?([a-z0-9.\-_]+)\.s3(?:-[a-z0-9\-]+)?\.amazonaws\.com/i,
	                    //bucket in path
	                    /^(?:https?:\/\/)?s3(?:-[a-z0-9\-]+)?\.amazonaws\.com\/([a-z0-9.\-_]+)/i,
	                    //custom domain
	                    /^(?:https?:\/\/)?([a-z0-9.\-_]+)/i
	                ],
	                bucket;
	
	            qq.each(patterns, function(idx, pattern) {
	                var match = pattern.exec(endpoint);
	
	                if (match) {
	                    bucket = match[1];
	                    return false;
	                }
	            });
	
	            return bucket;
	        },
	
	        /** Create Prefixed request headers which are appropriate for S3.
	         *
	         * If the request header is appropriate for S3 (e.g. Cache-Control) then pass
	         * it along without a metadata prefix. For all other request header parameter names,
	         * apply qq.s3.util.AWS_PARAM_PREFIX before the name.
	         * See: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html
	         */
	        _getPrefixedParamName: function(name) {
	            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {
	                return name;
	            }
	            return qq.s3.util.AWS_PARAM_PREFIX + name;
	        },
	
	        /**
	         * Create a policy document to be signed and sent along with the S3 upload request.
	         *
	         * @param spec Object with properties use to construct the policy document.
	         * @returns {Object} Policy doc.
	         */
	        getPolicy: function(spec) {
	            var policy = {},
	                conditions = [],
	                bucket = spec.bucket,
	                date = spec.date,
	                drift = spec.clockDrift,
	                key = spec.key,
	                accessKey = spec.accessKey,
	                acl = spec.acl,
	                type = spec.type,
	                expectedStatus = spec.expectedStatus,
	                sessionToken = spec.sessionToken,
	                params = spec.params,
	                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),
	                minFileSize = spec.minFileSize,
	                maxFileSize = spec.maxFileSize,
	                reducedRedundancy = spec.reducedRedundancy,
	                region = spec.region,
	                serverSideEncryption = spec.serverSideEncryption,
	                signatureVersion = spec.signatureVersion;
	
	            policy.expiration = qq.s3.util.getPolicyExpirationDate(date, drift);
	
	            conditions.push({acl: acl});
	            conditions.push({bucket: bucket});
	
	            if (type) {
	                conditions.push({"Content-Type": type});
	            }
	
	            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
	            if (expectedStatus) {
	                conditions.push({success_action_status: expectedStatus.toString()});
	            }
	
	            if (successRedirectUrl) {
	                conditions.push({success_action_redirect: successRedirectUrl});
	            }
	            // jscs:enable
	            if (reducedRedundancy) {
	                conditions.push({});
	                conditions[conditions.length - 1][qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;
	            }
	
	            if (sessionToken) {
	                conditions.push({});
	                conditions[conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;
	            }
	
	            if (serverSideEncryption) {
	                conditions.push({});
	                conditions[conditions.length - 1][qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;
	            }
	
	            if (signatureVersion === 2) {
	                conditions.push({key: key});
	            }
	            else if (signatureVersion === 4) {
	                conditions.push({});
	                conditions[conditions.length - 1][qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;
	
	                conditions.push({});
	                conditions[conditions.length - 1].key = key;
	
	                conditions.push({});
	                conditions[conditions.length - 1][qq.s3.util.CREDENTIAL_PARAM_NAME] =
	                    qq.s3.util.getV4CredentialsString({date: date, key: accessKey, region: region});
	
	                conditions.push({});
	                conditions[conditions.length - 1][qq.s3.util.DATE_PARAM_NAME] =
	                    qq.s3.util.getV4PolicyDate(date, drift);
	            }
	
	            // user metadata
	            qq.each(params, function(name, val) {
	                var awsParamName = qq.s3.util._getPrefixedParamName(name),
	                    param = {};
	
	                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {
	                    param[awsParamName] = val;
	                }
	                else {
	                    param[awsParamName] = encodeURIComponent(val);
	                }
	
	                conditions.push(param);
	            });
	
	            policy.conditions = conditions;
	
	            qq.s3.util.enforceSizeLimits(policy, minFileSize, maxFileSize);
	
	            return policy;
	        },
	
	        /**
	         * Update a previously constructed policy document with updated credentials.  Currently, this only requires we
	         * update the session token.  This is only relevant if requests are being signed client-side.
	         *
	         * @param policy Live policy document
	         * @param newSessionToken Updated session token.
	         */
	        refreshPolicyCredentials: function(policy, newSessionToken) {
	            var sessionTokenFound = false;
	
	            qq.each(policy.conditions, function(oldCondIdx, oldCondObj) {
	                qq.each(oldCondObj, function(oldCondName, oldCondVal) {
	                    if (oldCondName === qq.s3.util.SESSION_TOKEN_PARAM_NAME) {
	                        oldCondObj[oldCondName] = newSessionToken;
	                        sessionTokenFound = true;
	                    }
	                });
	            });
	
	            if (!sessionTokenFound) {
	                policy.conditions.push({});
	                policy.conditions[policy.conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = newSessionToken;
	            }
	        },
	
	        /**
	         * Generates all parameters to be passed along with the S3 upload request.  This includes invoking a callback
	         * that is expected to asynchronously retrieve a signature for the policy document.  Note that the server
	         * signing the request should reject a "tainted" policy document that includes unexpected values, since it is
	         * still possible for a malicious user to tamper with these values during policy document generation,
	         * before it is sent to the server for signing.
	         *
	         * @param spec Object with properties: `params`, `type`, `key`, `accessKey`, `acl`, `expectedStatus`, `successRedirectUrl`,
	         * `reducedRedundancy`, `region`, `serverSideEncryption`, `version`, and `log()`, along with any options associated with `qq.s3.util.getPolicy()`.
	         * @returns {qq.Promise} Promise that will be fulfilled once all parameters have been determined.
	         */
	        generateAwsParams: function(spec, signPolicyCallback) {
	            var awsParams = {},
	                customParams = spec.params,
	                promise = new qq.Promise(),
	                sessionToken = spec.sessionToken,
	                drift = spec.clockDrift,
	                type = spec.type,
	                key = spec.key,
	                accessKey = spec.accessKey,
	                acl = spec.acl,
	                expectedStatus = spec.expectedStatus,
	                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),
	                reducedRedundancy = spec.reducedRedundancy,
	                region = spec.region,
	                serverSideEncryption = spec.serverSideEncryption,
	                signatureVersion = spec.signatureVersion,
	                now = new Date(),
	                log = spec.log,
	                policyJson;
	
	            spec.date = now;
	            policyJson = qq.s3.util.getPolicy(spec);
	
	            awsParams.key = key;
	
	            if (type) {
	                awsParams["Content-Type"] = type;
	            }
	            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
	            if (expectedStatus) {
	                awsParams.success_action_status = expectedStatus;
	            }
	
	            if (successRedirectUrl) {
	                awsParams.success_action_redirect = successRedirectUrl;
	            }
	            // jscs:enable
	            if (reducedRedundancy) {
	                awsParams[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;
	            }
	
	            if (serverSideEncryption) {
	                awsParams[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;
	            }
	
	            if (sessionToken) {
	                awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;
	            }
	
	            awsParams.acl = acl;
	
	            // Custom (user-supplied) params must be prefixed with the value of `qq.s3.util.AWS_PARAM_PREFIX`.
	            // Params such as Cache-Control or Content-Disposition will not be prefixed.
	            // Prefixed param values will be URI encoded as well.
	            qq.each(customParams, function(name, val) {
	                var awsParamName = qq.s3.util._getPrefixedParamName(name);
	
	                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {
	                    awsParams[awsParamName] = val;
	                }
	                else {
	                    awsParams[awsParamName] = encodeURIComponent(val);
	                }
	            });
	
	            if (signatureVersion === 2) {
	                awsParams.AWSAccessKeyId = accessKey;
	            }
	            else if (signatureVersion === 4) {
	                awsParams[qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;
	                awsParams[qq.s3.util.CREDENTIAL_PARAM_NAME] = qq.s3.util.getV4CredentialsString({date: now, key: accessKey, region: region});
	                awsParams[qq.s3.util.DATE_PARAM_NAME] = qq.s3.util.getV4PolicyDate(now, drift);
	            }
	
	            // Invoke a promissory callback that should provide us with a base64-encoded policy doc and an
	            // HMAC signature for the policy doc.
	            signPolicyCallback(policyJson).then(
	                function(policyAndSignature, updatedAccessKey, updatedSessionToken) {
	                    awsParams.policy = policyAndSignature.policy;
	
	                    if (spec.signatureVersion === 2) {
	                        awsParams.signature = policyAndSignature.signature;
	
	                        if (updatedAccessKey) {
	                            awsParams.AWSAccessKeyId = updatedAccessKey;
	                        }
	                    }
	                    else if (spec.signatureVersion === 4) {
	                        awsParams[qq.s3.util.V4_SIGNATURE_PARAM_NAME] = policyAndSignature.signature;
	                    }
	
	                    if (updatedSessionToken) {
	                        awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;
	                    }
	
	                    promise.success(awsParams);
	                },
	                function(errorMessage) {
	                    errorMessage = errorMessage || "Can't continue further with request to S3 as we did not receive " +
	                                                   "a valid signature and policy from the server.";
	
	                    log("Policy signing failed.  " + errorMessage, "error");
	                    promise.failure(errorMessage);
	                }
	            );
	
	            return promise;
	        },
	
	        /**
	         * Add a condition to an existing S3 upload request policy document used to ensure AWS enforces any size
	         * restrictions placed on files server-side.  This is important to do, in case users mess with the client-side
	         * checks already in place.
	         *
	         * @param policy Policy document as an `Object`, with a `conditions` property already attached
	         * @param minSize Minimum acceptable size, in bytes
	         * @param maxSize Maximum acceptable size, in bytes (0 = unlimited)
	         */
	        enforceSizeLimits: function(policy, minSize, maxSize) {
	            var adjustedMinSize = minSize < 0 ? 0 : minSize,
	                // Adjust a maxSize of 0 to the largest possible integer, since we must specify a high and a low in the request
	                adjustedMaxSize = maxSize <= 0 ? 9007199254740992 : maxSize;
	
	            if (minSize > 0 || maxSize > 0) {
	                policy.conditions.push(["content-length-range", adjustedMinSize.toString(), adjustedMaxSize.toString()]);
	            }
	        },
	
	        getPolicyExpirationDate: function(date, drift) {
	            var adjustedDate = new Date(date.getTime() + drift);
	            return qq.s3.util.getPolicyDate(adjustedDate, 5);
	        },
	
	        getCredentialsDate: function(date) {
	            return date.getUTCFullYear() + "" +
	                ("0" + (date.getUTCMonth() + 1)).slice(-2) +
	                ("0" + date.getUTCDate()).slice(-2);
	        },
	
	        getPolicyDate: function(date, _minutesToAdd_) {
	            var minutesToAdd = _minutesToAdd_ || 0,
	                pad, r;
	
	            /*jshint -W014 */
	            // Is this going to be a problem if we encounter this moments before 2 AM just before daylight savings time ends?
	            date.setMinutes(date.getMinutes() + (minutesToAdd || 0));
	
	            if (Date.prototype.toISOString) {
	                return date.toISOString();
	            }
	            else {
	                pad = function(number) {
	                    r = String(number);
	
	                    if (r.length === 1) {
	                        r = "0" + r;
	                    }
	
	                    return r;
	                };
	
	                return date.getUTCFullYear()
	                    + "-" + pad(date.getUTCMonth() + 1)
	                    + "-" + pad(date.getUTCDate())
	                    + "T" + pad(date.getUTCHours())
	                    + ":" + pad(date.getUTCMinutes())
	                    + ":" + pad(date.getUTCSeconds())
	                    + "." + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)
	                    + "Z";
	            }
	        },
	
	        /**
	         * Looks at a response from S3 contained in an iframe and parses the query string in an attempt to identify
	         * the associated resource.
	         *
	         * @param iframe Iframe containing response
	         * @returns {{bucket: *, key: *, etag: *}}
	         */
	        parseIframeResponse: function(iframe) {
	            var doc = iframe.contentDocument || iframe.contentWindow.document,
	                queryString = doc.location.search,
	                match = /bucket=(.+)&key=(.+)&etag=(.+)/.exec(queryString);
	
	            if (match) {
	                return {
	                    bucket: match[1],
	                    key: match[2],
	                    etag: match[3].replace(/%22/g, "")
	                };
	            }
	        },
	
	        /**
	         * @param successRedirectUrl Relative or absolute location of success redirect page
	         * @returns {*|string} undefined if the parameter is undefined, otherwise the absolute location of the success redirect page
	         */
	        getSuccessRedirectAbsoluteUrl: function(successRedirectUrl) {
	            if (successRedirectUrl) {
	                var targetAnchorContainer = document.createElement("div"),
	                    targetAnchor;
	
	                if (qq.ie7()) {
	                    // Note that we must make use of `innerHTML` for IE7 only instead of simply creating an anchor via
	                    // `document.createElement('a')` and setting the `href` attribute.  The latter approach does not allow us to
	                    // obtain an absolute URL in IE7 if the `endpoint` is a relative URL.
	                    targetAnchorContainer.innerHTML = "<a href='" + successRedirectUrl + "'></a>";
	                    targetAnchor = targetAnchorContainer.firstChild;
	                    return targetAnchor.href;
	                }
	                else {
	                    // IE8 and IE9 do not seem to derive an absolute URL from a relative URL using the `innerHTML`
	                    // approach above, so we'll just create an anchor this way and set it's `href` attribute.
	                    // Due to yet another quirk in IE8 and IE9, we have to set the `href` equal to itself
	                    // in order to ensure relative URLs will be properly parsed.
	                    targetAnchor = document.createElement("a");
	                    targetAnchor.href = successRedirectUrl;
	                    targetAnchor.href = targetAnchor.href;
	                    return targetAnchor.href;
	                }
	            }
	        },
	
	        getV4CredentialsString: function(spec) {
	            return spec.key + "/" +
	                qq.s3.util.getCredentialsDate(spec.date) + "/" +
	                spec.region + "/s3/aws4_request";
	        },
	
	        getV4PolicyDate: function(date, drift) {
	            var adjustedDate = new Date(date.getTime() + drift);
	
	            return qq.s3.util.getCredentialsDate(adjustedDate) + "T" +
	                    ("0" + adjustedDate.getUTCHours()).slice(-2) +
	                    ("0" + adjustedDate.getUTCMinutes()).slice(-2) +
	                    ("0" + adjustedDate.getUTCSeconds()).slice(-2) +
	                    "Z";
	        },
	
	        // AWS employs a strict interpretation of [RFC 3986](http://tools.ietf.org/html/rfc3986#page-12).
	        // So, we must ensure all reserved characters listed in the spec are percent-encoded,
	        // and spaces are replaced with "+".
	        encodeQueryStringParam: function(param) {
	            var percentEncoded = encodeURIComponent(param);
	
	            // %-encode characters not handled by `encodeURIComponent` (to follow RFC 3986)
	            percentEncoded = percentEncoded.replace(/[!'()]/g, escape);
	
	            // %-encode characters not handled by `escape` (to follow RFC 3986)
	            percentEncoded = percentEncoded.replace(/\*/g, "%2A");
	
	            // replace percent-encoded spaces with a "+"
	            return percentEncoded.replace(/%20/g, "+");
	        }
	    };
	}());
	
	/*globals qq*/
	/**
	 * Defines the public API for non-traditional FineUploaderBasic mode.
	 */
	(function() {
	    "use strict";
	
	    qq.nonTraditionalBasePublicApi = {
	        setUploadSuccessParams: function(params, id) {
	            this._uploadSuccessParamsStore.set(params, id);
	        },
	        setUploadSuccessEndpoint: function(endpoint, id) {
	            this._uploadSuccessEndpointStore.set(endpoint, id);
	        }
	    };
	
	    qq.nonTraditionalBasePrivateApi = {
	        /**
	         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).
	         * This will hold up the call to the `onComplete` callback until we have determined success of the upload
	         * according to the local server, if a `successEndpoint` has been defined by the integrator.
	         *
	         * @param id ID of the completed upload
	         * @param name Name of the associated item
	         * @param result Object created from the server's parsed JSON response.
	         * @param xhr Associated XmlHttpRequest, if this was used to send the request.
	         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`
	         * if we need to ask the server.
	         * @private
	         */
	        _onComplete: function(id, name, result, xhr) {
	            var success = result.success ? true : false,
	                self = this,
	                onCompleteArgs = arguments,
	                successEndpoint = this._uploadSuccessEndpointStore.get(id),
	                successCustomHeaders = this._options.uploadSuccess.customHeaders,
	                successMethod = this._options.uploadSuccess.method,
	                cors = this._options.cors,
	                promise = new qq.Promise(),
	                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),
	                fileParams = this._paramsStore.get(id),
	
	                // If we are waiting for confirmation from the local server, and have received it,
	                // include properties from the local server response in the `response` parameter
	                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and
	                // fulfill the associated promise.
	                onSuccessFromServer = function(successRequestResult) {
	                    delete self._failedSuccessRequestCallbacks[id];
	                    qq.extend(result, successRequestResult);
	                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);
	                    promise.success(successRequestResult);
	                },
	
	                // If the upload success request fails, attempt to re-send the success request (via the core retry code).
	                // The entire upload may be restarted if the server returns a "reset" property with a value of true as well.
	                onFailureFromServer = function(successRequestResult) {
	                    var callback = submitSuccessRequest;
	
	                    qq.extend(result, successRequestResult);
	
	                    if (result && result.reset) {
	                        callback = null;
	                    }
	
	                    if (!callback) {
	                        delete self._failedSuccessRequestCallbacks[id];
	                    }
	                    else {
	                        self._failedSuccessRequestCallbacks[id] = callback;
	                    }
	
	                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {
	                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);
	                        promise.failure(successRequestResult);
	                    }
	                },
	                submitSuccessRequest,
	                successAjaxRequester;
	
	            // Ask the local server if the file sent is ok.
	            if (success && successEndpoint) {
	                successAjaxRequester = new qq.UploadSuccessAjaxRequester({
	                    endpoint: successEndpoint,
	                    method: successMethod,
	                    customHeaders: successCustomHeaders,
	                    cors: cors,
	                    log: qq.bind(this.log, this)
	                });
	
	                // combine custom params and default params
	                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);
	
	                // include any params associated with the file
	                fileParams && qq.extend(uploadSuccessParams, fileParams, true);
	
	                submitSuccessRequest = qq.bind(function() {
	                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)
	                        .then(onSuccessFromServer, onFailureFromServer);
	                }, self);
	
	                submitSuccessRequest();
	
	                return promise;
	            }
	
	            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.
	            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);
	        },
	
	        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.
	        _manualRetry: function(id) {
	            var successRequestCallback = this._failedSuccessRequestCallbacks[id];
	
	            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);
	        }
	    };
	}());
	
	/*globals qq */
	/**
	 * This defines FineUploaderBasic mode w/ support for uploading to S3, which provides all the basic
	 * functionality of Fine Uploader Basic as well as code to handle uploads directly to S3.
	 * Some inherited options and API methods have a special meaning in the context of the S3 uploader.
	 */
	(function() {
	    "use strict";
	
	    qq.s3.FineUploaderBasic = function(o) {
	        var options = {
	            request: {
	                // public key (required for server-side signing, ignored if `credentials` have been provided)
	                accessKey: null,
	
	                // padding, in milliseconds, to add to the x-amz-date header & the policy expiration date
	                clockDrift: 0
	            },
	
	            objectProperties: {
	                acl: "private",
	
	                // string or a function which may be promissory
	                bucket: qq.bind(function(id) {
	                    return qq.s3.util.getBucket(this.getEndpoint(id));
	                }, this),
	
	                // string or a function which may be promissory - only used for V4 multipart uploads
	                host: qq.bind(function(id) {
	                    return (/(?:http|https):\/\/(.+)(?:\/.+)?/).exec(this._endpointStore.get(id))[1];
	                }, this),
	
	                // 'uuid', 'filename', or a function which may be promissory
	                key: "uuid",
	
	                reducedRedundancy: false,
	
	                // Defined at http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region
	                region: "us-east-1",
	
	                serverSideEncryption: false
	            },
	
	            credentials: {
	                // Public key (required).
	                accessKey: null,
	                // Private key (required).
	                secretKey: null,
	                // Expiration date for the credentials (required).  May be an ISO string or a `Date`.
	                expiration: null,
	                // Temporary credentials session token.
	                // Only required for temporary credentials obtained via AssumeRoleWithWebIdentity.
	                sessionToken: null
	            },
	
	            // All but `version` are ignored if `credentials` is provided.
	            signature: {
	                customHeaders: {},
	                endpoint: null,
	                version: 2
	            },
	
	            uploadSuccess: {
	                endpoint: null,
	
	                method: "POST",
	
	                // In addition to the default params sent by Fine Uploader
	                params: {},
	
	                customHeaders: {}
	            },
	
	            // required if non-File-API browsers, such as IE9 and older, are used
	            iframeSupport: {
	                localBlankPagePath: null
	            },
	
	            chunking: {
	                // minimum part size is 5 MiB when uploading to S3
	                partSize: 5242880
	            },
	
	            cors: {
	                allowXdr: true
	            },
	
	            callbacks: {
	                onCredentialsExpired: function() {}
	            }
	        };
	
	        // Replace any default options with user defined ones
	        qq.extend(options, o, true);
	
	        if (!this.setCredentials(options.credentials, true)) {
	            this._currentCredentials.accessKey = options.request.accessKey;
	        }
	
	        this._aclStore = this._createStore(options.objectProperties.acl);
	
	        // Call base module
	        qq.FineUploaderBasic.call(this, options);
	
	        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);
	        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);
	
	        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.
	        // Indexed by file ID.
	        this._failedSuccessRequestCallbacks = {};
	
	        // Holds S3 keys for file representations constructed from a session request.
	        this._cannedKeys = {};
	        // Holds S3 buckets for file representations constructed from a session request.
	        this._cannedBuckets = {};
	
	        this._buckets = {};
	        this._hosts = {};
	    };
	
	    // Inherit basic public & private API methods.
	    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePublicApi);
	    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePrivateApi);
	    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);
	    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);
	
	    // Define public & private API methods for this module.
	    qq.extend(qq.s3.FineUploaderBasic.prototype, {
	        getBucket: function(id) {
	            if (this._cannedBuckets[id] == null) {
	                return this._buckets[id];
	            }
	            return this._cannedBuckets[id];
	        },
	
	        /**
	         * @param id File ID
	         * @returns {*} Key name associated w/ the file, if one exists
	         */
	        getKey: function(id) {
	            /* jshint eqnull:true */
	            if (this._cannedKeys[id] == null) {
	                return this._handler.getThirdPartyFileId(id);
	            }
	
	            return this._cannedKeys[id];
	        },
	
	        /**
	         * Override the parent's reset function to cleanup various S3-related items.
	         */
	        reset: function() {
	            qq.FineUploaderBasic.prototype.reset.call(this);
	            this._failedSuccessRequestCallbacks = [];
	            this._buckets = {};
	            this._hosts = {};
	        },
	
	        setCredentials: function(credentials, ignoreEmpty) {
	            if (credentials && credentials.secretKey) {
	                if (!credentials.accessKey) {
	                    throw new qq.Error("Invalid credentials: no accessKey");
	                }
	                else if (!credentials.expiration) {
	                    throw new qq.Error("Invalid credentials: no expiration");
	                }
	                else {
	                    this._currentCredentials = qq.extend({}, credentials);
	
	                    // Ensure expiration is a `Date`.  If initially a string, assuming it is in ISO format.
	                    if (qq.isString(credentials.expiration)) {
	                        this._currentCredentials.expiration = new Date(credentials.expiration);
	                    }
	                }
	
	                return true;
	            }
	            else if (!ignoreEmpty) {
	                throw new qq.Error("Invalid credentials parameter!");
	            }
	            else {
	                this._currentCredentials = {};
	            }
	        },
	
	        setAcl: function(acl, id) {
	            this._aclStore.set(acl, id);
	        },
	
	        /**
	         * Ensures the parent's upload handler creator passes any additional S3-specific options to the handler as well
	         * as information required to instantiate the specific handler based on the current browser's capabilities.
	         *
	         * @returns {qq.UploadHandlerController}
	         * @private
	         */
	        _createUploadHandler: function() {
	            var self = this,
	                additionalOptions = {
	                    aclStore: this._aclStore,
	                    getBucket: qq.bind(this._determineBucket, this),
	                    getHost: qq.bind(this._determineHost, this),
	                    getKeyName: qq.bind(this._determineKeyName, this),
	                    iframeSupport: this._options.iframeSupport,
	                    objectProperties: this._options.objectProperties,
	                    signature: this._options.signature,
	                    clockDrift: this._options.request.clockDrift,
	                    // pass size limit validation values to include in the request so AWS enforces this server-side
	                    validation: {
	                        minSizeLimit: this._options.validation.minSizeLimit,
	                        maxSizeLimit: this._options.validation.sizeLimit
	                    }
	                };
	
	            // We assume HTTP if it is missing from the start of the endpoint string.
	            qq.override(this._endpointStore, function(super_) {
	                return {
	                    get: function(id) {
	                        var endpoint = super_.get(id);
	
	                        if (endpoint.indexOf("http") < 0) {
	                            return "http://" + endpoint;
	                        }
	
	                        return endpoint;
	                    }
	                };
	            });
	
	            // Some param names should be lower case to avoid signature mismatches
	            qq.override(this._paramsStore, function(super_) {
	                return {
	                    get: function(id) {
	                        var oldParams = super_.get(id),
	                            modifiedParams = {};
	
	                        qq.each(oldParams, function(name, val) {
	                            var paramName = name;
	
	                            if (qq.indexOf(qq.s3.util.CASE_SENSITIVE_PARAM_NAMES, paramName) < 0) {
	                                paramName = paramName.toLowerCase();
	                            }
	
	                            modifiedParams[paramName] = qq.isFunction(val) ? val() : val;
	                        });
	
	                        return modifiedParams;
	                    }
	                };
	            });
	
	            additionalOptions.signature.credentialsProvider = {
	                get: function() {
	                    return self._currentCredentials;
	                },
	
	                onExpired: function() {
	                    var updateCredentials = new qq.Promise(),
	                        callbackRetVal = self._options.callbacks.onCredentialsExpired();
	
	                    if (qq.isGenericPromise(callbackRetVal)) {
	                        callbackRetVal.then(function(credentials) {
	                            try {
	                                self.setCredentials(credentials);
	                                updateCredentials.success();
	                            }
	                            catch (error) {
	                                self.log("Invalid credentials returned from onCredentialsExpired callback! (" + error.message + ")", "error");
	                                updateCredentials.failure("onCredentialsExpired did not return valid credentials.");
	                            }
	                        }, function(errorMsg) {
	                            self.log("onCredentialsExpired callback indicated failure! (" + errorMsg + ")", "error");
	                            updateCredentials.failure("onCredentialsExpired callback failed.");
	                        });
	                    }
	                    else {
	                        self.log("onCredentialsExpired callback did not return a promise!", "error");
	                        updateCredentials.failure("Unexpected return value for onCredentialsExpired.");
	                    }
	
	                    return updateCredentials;
	                }
	            };
	
	            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this, additionalOptions, "s3");
	        },
	
	        _determineObjectPropertyValue: function(id, property) {
	            var maybe = this._options.objectProperties[property],
	                promise = new qq.Promise(),
	                self = this;
	
	            if (qq.isFunction(maybe)) {
	                maybe = maybe(id);
	                if (qq.isGenericPromise(maybe)) {
	                    promise = maybe;
	                }
	                else {
	                    promise.success(maybe);
	                }
	            }
	            else if (qq.isString(maybe)) {
	                promise.success(maybe);
	            }
	
	            promise.then(
	                function success(value) {
	                    self["_" + property + "s"][id] = value;
	                },
	
	                function failure(errorMsg) {
	                    qq.log("Problem determining " + property + " for ID " + id + " (" + errorMsg + ")", "error");
	                }
	            );
	
	            return promise;
	        },
	
	        _determineBucket: function(id) {
	            return this._determineObjectPropertyValue(id, "bucket");
	        },
	
	        _determineHost: function(id) {
	            return this._determineObjectPropertyValue(id, "host");
	        },
	
	        /**
	         * Determine the file's key name and passes it to the caller via a promissory callback.  This also may
	         * delegate to an integrator-defined function that determines the file's key name on demand,
	         * which also may be promissory.
	         *
	         * @param id ID of the file
	         * @param filename Name of the file
	         * @returns {qq.Promise} A promise that will be fulfilled when the key name has been determined (and will be passed to the caller via the success callback).
	         * @private
	         */
	        _determineKeyName: function(id, filename) {
	            /*jshint -W015*/
	            var promise = new qq.Promise(),
	                keynameLogic = this._options.objectProperties.key,
	                extension = qq.getExtension(filename),
	                onGetKeynameFailure = promise.failure,
	                onGetKeynameSuccess = function(keyname, extension) {
	                    var keynameToUse = keyname;
	
	                    if (extension !== undefined) {
	                        keynameToUse += "." + extension;
	                    }
	
	                    promise.success(keynameToUse);
	                };
	
	            switch (keynameLogic) {
	                case "uuid":
	                    onGetKeynameSuccess(this.getUuid(id), extension);
	                    break;
	                case "filename":
	                    onGetKeynameSuccess(filename);
	                    break;
	                default:
	                    if (qq.isFunction(keynameLogic)) {
	                        this._handleKeynameFunction(keynameLogic, id, onGetKeynameSuccess, onGetKeynameFailure);
	                    }
	                    else {
	                        this.log(keynameLogic + " is not a valid value for the s3.keyname option!", "error");
	                        onGetKeynameFailure();
	                    }
	            }
	
	            return promise;
	        },
	
	        /**
	         * Called by the internal onUpload handler if the integrator has supplied a function to determine
	         * the file's key name.  The integrator's function may be promissory.  We also need to fulfill
	         * the promise contract associated with the caller as well.
	         *
	         * @param keynameFunc Integrator-supplied function that must be executed to determine the key name.  May be promissory.
	         * @param id ID of the associated file
	         * @param successCallback Invoke this if key name retrieval is successful, passing in the key name.
	         * @param failureCallback Invoke this if key name retrieval was unsuccessful.
	         * @private
	         */
	        _handleKeynameFunction: function(keynameFunc, id, successCallback, failureCallback) {
	            var self = this,
	                onSuccess = function(keyname) {
	                    successCallback(keyname);
	                },
	                onFailure = function(reason) {
	                    self.log(qq.format("Failed to retrieve key name for {}.  Reason: {}", id, reason || "null"), "error");
	                    failureCallback(reason);
	                },
	                keyname = keynameFunc.call(this, id);
	
	            if (qq.isGenericPromise(keyname)) {
	                keyname.then(onSuccess, onFailure);
	            }
	            /*jshint -W116*/
	            else if (keyname == null) {
	                onFailure();
	            }
	            else {
	                onSuccess(keyname);
	            }
	        },
	
	        _getEndpointSpecificParams: function(id, response, maybeXhr) {
	            var params = {
	                key: this.getKey(id),
	                uuid: this.getUuid(id),
	                name: this.getName(id),
	                bucket: this.getBucket(id)
	            };
	
	            if (maybeXhr && maybeXhr.getResponseHeader("ETag")) {
	                params.etag = maybeXhr.getResponseHeader("ETag");
	            }
	            else if (response.etag) {
	                params.etag = response.etag;
	            }
	
	            return params;
	        },
	
	        // Hooks into the base internal `_onSubmitDelete` to add key and bucket params to the delete file request.
	        _onSubmitDelete: function(id, onSuccessCallback) {
	            var additionalMandatedParams = {
	                key: this.getKey(id),
	                bucket: this.getBucket(id)
	            };
	
	            return qq.FineUploaderBasic.prototype._onSubmitDelete.call(this, id, onSuccessCallback, additionalMandatedParams);
	        },
	
	        _addCannedFile: function(sessionData) {
	            var id;
	
	            /* jshint eqnull:true */
	            if (sessionData.s3Key == null) {
	                throw new qq.Error("Did not find s3Key property in server session response.  This is required!");
	            }
	            else {
	                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);
	                this._cannedKeys[id] = sessionData.s3Key;
	                this._cannedBuckets[id] = sessionData.s3Bucket;
	            }
	
	            return id;
	        }
	    });
	}());
	
	/* globals qq, CryptoJS */
	
	// IE 10 does not support Uint8ClampedArray. We don't need it, but CryptoJS attempts to reference it
	// inside a conditional via an instanceof check, which breaks S3 v4 signatures for chunked uploads.
	if (!window.Uint8ClampedArray) {
	    window.Uint8ClampedArray = function() {};
	}
	/**
	 * Handles signature determination for HTML Form Upload requests and Multipart Uploader requests (via the S3 REST API).
	 *
	 * If the S3 requests are to be signed server side, this module will send a POST request to the server in an attempt
	 * to solicit signatures for various S3-related requests.  This module also parses the response and attempts
	 * to determine if the effort was successful.
	 *
	 * If the S3 requests are to be signed client-side, without the help of a server, this module will utilize CryptoJS to
	 * sign the requests directly in the browser and send them off to S3.
	 *
	 * @param o Options associated with all such requests
	 * @returns {{getSignature: Function}} API method used to initiate the signature request.
	 * @constructor
	 */
	qq.s3.RequestSigner = function(o) {
	    "use strict";
	
	    var requester,
	        thisSignatureRequester = this,
	        pendingSignatures = {},
	        options = {
	            expectingPolicy: false,
	            method: "POST",
	            signatureSpec: {
	                drift: 0,
	                credentialsProvider: {},
	                endpoint: null,
	                customHeaders: {},
	                version: 2
	            },
	            maxConnections: 3,
	            endpointStore: {},
	            paramsStore: {},
	            cors: {
	                expected: false,
	                sendCredentials: false
	            },
	            log: function(str, level) {}
	        },
	        credentialsProvider,
	
	        generateHeaders = function(signatureConstructor, signature, promise) {
	            var headers = signatureConstructor.getHeaders();
	
	            if (options.signatureSpec.version === 4) {
	                headers.Authorization = qq.s3.util.V4_ALGORITHM_PARAM_VALUE +
	                    " Credential=" + options.signatureSpec.credentialsProvider.get().accessKey + "/" +
	                    qq.s3.util.getCredentialsDate(signatureConstructor.getRequestDate()) + "/" +
	                    options.signatureSpec.region + "/" +
	                    "s3/aws4_request," +
	                    "SignedHeaders=" + signatureConstructor.getSignedHeaders() + "," +
	                    "Signature=" + signature;
	            }
	            else {
	                headers.Authorization = "AWS " + options.signatureSpec.credentialsProvider.get().accessKey + ":" + signature;
	            }
	
	            promise.success(headers, signatureConstructor.getEndOfUrl());
	        },
	
	        v2 = {
	            getStringToSign: function(signatureSpec) {
	                return qq.format("{}\n{}\n{}\n\n{}/{}/{}",
	                    signatureSpec.method,
	                    signatureSpec.contentMd5 || "",
	                    signatureSpec.contentType || "",
	                    signatureSpec.headersStr || "\n",
	                    signatureSpec.bucket,
	                    signatureSpec.endOfUrl);
	            },
	
	            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {
	                var headersWordArray = qq.CryptoJS.enc.Utf8.parse(headersStr),
	                    headersHmacSha1 = qq.CryptoJS.HmacSHA1(headersWordArray, credentialsProvider.get().secretKey),
	                    headersHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(headersHmacSha1);
	
	                generateHeaders(signatureConstructor, headersHmacSha1Base64, signatureEffort);
	            },
	
	            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {
	                var policyStr = JSON.stringify(policy),
	                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),
	                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),
	                    policyHmacSha1 = qq.CryptoJS.HmacSHA1(base64Policy, credentialsProvider.get().secretKey),
	                    policyHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(policyHmacSha1);
	
	                signatureEffort.success({
	                    policy: base64Policy,
	                    signature: policyHmacSha1Base64
	                }, updatedAccessKey, updatedSessionToken);
	            }
	        },
	
	        v4 = {
	            getCanonicalQueryString: function(endOfUri) {
	                var queryParamIdx = endOfUri.indexOf("?"),
	                    canonicalQueryString = "",
	                    encodedQueryParams, encodedQueryParamNames, queryStrings;
	
	                if (queryParamIdx >= 0) {
	                    encodedQueryParams = {};
	                    queryStrings = endOfUri.substr(queryParamIdx + 1).split("&");
	
	                    qq.each(queryStrings, function(idx, queryString) {
	                        var nameAndVal = queryString.split("="),
	                            paramVal = nameAndVal[1];
	
	                        if (paramVal == null) {
	                            paramVal = "";
	                        }
	
	                        encodedQueryParams[encodeURIComponent(nameAndVal[0])] = encodeURIComponent(paramVal);
	                    });
	
	                    encodedQueryParamNames = Object.keys(encodedQueryParams).sort();
	                    encodedQueryParamNames.forEach(function(encodedQueryParamName, idx) {
	                        canonicalQueryString += encodedQueryParamName + "=" + encodedQueryParams[encodedQueryParamName];
	                        if (idx < encodedQueryParamNames.length - 1) {
	                            canonicalQueryString += "&";
	                        }
	                    });
	                }
	
	                return canonicalQueryString;
	            },
	
	            getCanonicalRequest: function(signatureSpec) {
	                return qq.format("{}\n{}\n{}\n{}\n{}\n{}",
	                    signatureSpec.method,
	                    v4.getCanonicalUri(signatureSpec.endOfUrl),
	                    v4.getCanonicalQueryString(signatureSpec.endOfUrl),
	                    signatureSpec.headersStr || "\n",
	                    v4.getSignedHeaders(signatureSpec.headerNames),
	                    signatureSpec.hashedContent);
	            },
	
	            getCanonicalUri: function(endOfUri) {
	                var path = endOfUri,
	                    queryParamIdx = endOfUri.indexOf("?");
	
	                if (queryParamIdx > 0) {
	                    path = endOfUri.substr(0, queryParamIdx);
	                }
	                return escape("/" + decodeURIComponent(path));
	            },
	
	            getEncodedHashedPayload: function(body) {
	                var promise = new qq.Promise(),
	                    reader;
	
	                if (qq.isBlob(body)) {
	                    // TODO hash blob in webworker if this becomes a notable perf issue
	                    reader = new FileReader();
	                    reader.onloadend = function(e) {
	                        if (e.target.readyState === FileReader.DONE) {
	                            if (e.target.error) {
	                                promise.failure(e.target.error);
	                            }
	                            else {
	                                var wordArray = qq.CryptoJS.lib.WordArray.create(e.target.result);
	                                promise.success(qq.CryptoJS.SHA256(wordArray).toString());
	                            }
	                        }
	                    };
	                    reader.readAsArrayBuffer(body);
	                }
	                else {
	                    body = body || "";
	                    promise.success(qq.CryptoJS.SHA256(body).toString());
	                }
	
	                return promise;
	            },
	
	            getScope: function(date, region) {
	                return qq.s3.util.getCredentialsDate(date) + "/" +
	                    region + "/s3/aws4_request";
	            },
	
	            getStringToSign: function(signatureSpec) {
	                var canonicalRequest = v4.getCanonicalRequest(signatureSpec),
	                    date = qq.s3.util.getV4PolicyDate(signatureSpec.date, signatureSpec.drift),
	                    hashedRequest = qq.CryptoJS.SHA256(canonicalRequest).toString(),
	                    scope = v4.getScope(signatureSpec.date, options.signatureSpec.region),
	                    stringToSignTemplate = "AWS4-HMAC-SHA256\n{}\n{}\n{}";
	
	                return {
	                    hashed: qq.format(stringToSignTemplate, date, scope, hashedRequest),
	                    raw: qq.format(stringToSignTemplate, date, scope, canonicalRequest)
	                };
	            },
	
	            getSignedHeaders: function(headerNames) {
	                var signedHeaders = "";
	
	                headerNames.forEach(function(headerName, idx) {
	                    signedHeaders += headerName.toLowerCase();
	
	                    if (idx < headerNames.length - 1) {
	                        signedHeaders += ";";
	                    }
	                });
	
	                return signedHeaders;
	            },
	
	            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {
	                var secretKey = credentialsProvider.get().secretKey,
	                    headersPattern = /.+\n.+\n(\d+)\/(.+)\/s3\/.+\n(.+)/,
	                    matches = headersPattern.exec(headersStr),
	                    dateKey, dateRegionKey, dateRegionServiceKey, signingKey;
	
	                dateKey = qq.CryptoJS.HmacSHA256(matches[1], "AWS4" + secretKey);
	                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);
	                dateRegionServiceKey = qq.CryptoJS.HmacSHA256("s3", dateRegionKey);
	                signingKey = qq.CryptoJS.HmacSHA256("aws4_request", dateRegionServiceKey);
	
	                generateHeaders(signatureConstructor, qq.CryptoJS.HmacSHA256(headersStr, signingKey), signatureEffort);
	            },
	
	            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {
	                var policyStr = JSON.stringify(policy),
	                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),
	                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),
	                    secretKey = credentialsProvider.get().secretKey,
	                    credentialPattern = /.+\/(.+)\/(.+)\/s3\/aws4_request/,
	                    credentialCondition = (function() {
	                        var credential = null;
	                        qq.each(policy.conditions, function(key, condition) {
	                            var val = condition["x-amz-credential"];
	                            if (val) {
	                                credential = val;
	                                return false;
	                            }
	                        });
	                        return credential;
	                    }()),
	                    matches, dateKey, dateRegionKey, dateRegionServiceKey, signingKey;
	
	                matches = credentialPattern.exec(credentialCondition);
	                dateKey = qq.CryptoJS.HmacSHA256(matches[1], "AWS4" + secretKey);
	                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);
	                dateRegionServiceKey = qq.CryptoJS.HmacSHA256("s3", dateRegionKey);
	                signingKey = qq.CryptoJS.HmacSHA256("aws4_request", dateRegionServiceKey);
	
	                signatureEffort.success({
	                    policy: base64Policy,
	                    signature: qq.CryptoJS.HmacSHA256(base64Policy, signingKey).toString()
	                }, updatedAccessKey, updatedSessionToken);
	            }
	        };
	
	    qq.extend(options, o, true);
	    credentialsProvider = options.signatureSpec.credentialsProvider;
	
	    function handleSignatureReceived(id, xhrOrXdr, isError) {
	        var responseJson = xhrOrXdr.responseText,
	            pendingSignatureData = pendingSignatures[id],
	            promise = pendingSignatureData.promise,
	            signatureConstructor = pendingSignatureData.signatureConstructor,
	            errorMessage, response;
	
	        delete pendingSignatures[id];
	
	        // Attempt to parse what we would expect to be a JSON response
	        if (responseJson) {
	            try {
	                response = qq.parseJson(responseJson);
	            }
	            catch (error) {
	                options.log("Error attempting to parse signature response: " + error, "error");
	            }
	        }
	
	        // If we have received a parsable response, and it has an `invalid` property,
	        // the policy document or request headers may have been tampered with client-side.
	        if (response && response.invalid) {
	            isError = true;
	            errorMessage = "Invalid policy document or request headers!";
	        }
	        // Make sure the response contains policy & signature properties
	        else if (response) {
	            if (options.expectingPolicy && !response.policy) {
	                isError = true;
	                errorMessage = "Response does not include the base64 encoded policy!";
	            }
	            else if (!response.signature) {
	                isError = true;
	                errorMessage = "Response does not include the signature!";
	            }
	        }
	        // Something unknown went wrong
	        else {
	            isError = true;
	            errorMessage = "Received an empty or invalid response from the server!";
	        }
	
	        if (isError) {
	            if (errorMessage) {
	                options.log(errorMessage, "error");
	            }
	
	            promise.failure(errorMessage);
	        }
	        else if (signatureConstructor) {
	            generateHeaders(signatureConstructor, response.signature, promise);
	        }
	        else {
	            promise.success(response);
	        }
	    }
	
	    function getStringToSignArtifacts(id, version, requestInfo) {
	        var promise = new qq.Promise(),
	            method = "POST",
	            headerNames = [],
	            headersStr = "",
	            now = new Date(),
	            endOfUrl, signatureSpec, toSign,
	
	            generateStringToSign = function(requestInfo) {
	                var contentMd5,
	                    headerIndexesToRemove = [];
	
	                qq.each(requestInfo.headers, function(name) {
	                    headerNames.push(name);
	                });
	                headerNames.sort();
	
	                qq.each(headerNames, function(idx, headerName) {
	                    if (qq.indexOf(qq.s3.util.UNSIGNABLE_REST_HEADER_NAMES, headerName) < 0) {
	                        headersStr += headerName.toLowerCase() + ":" + requestInfo.headers[headerName].trim() + "\n";
	                    }
	                    else if (headerName === "Content-MD5") {
	                        contentMd5 = requestInfo.headers[headerName];
	                    }
	                    else {
	                        headerIndexesToRemove.unshift(idx);
	                    }
	                });
	
	                qq.each(headerIndexesToRemove, function(idx, headerIdx) {
	                    headerNames.splice(headerIdx, 1);
	                });
	
	                signatureSpec = {
	                    bucket: requestInfo.bucket,
	                    contentMd5: contentMd5,
	                    contentType: requestInfo.contentType,
	                    date: now,
	                    drift: options.signatureSpec.drift,
	                    endOfUrl: endOfUrl,
	                    hashedContent: requestInfo.hashedContent,
	                    headerNames: headerNames,
	                    headersStr: headersStr,
	                    method: method
	                };
	
	                toSign = version === 2 ? v2.getStringToSign(signatureSpec) : v4.getStringToSign(signatureSpec);
	
	                return {
	                    date: now,
	                    endOfUrl: endOfUrl,
	                    signedHeaders: version === 4 ? v4.getSignedHeaders(signatureSpec.headerNames) : null,
	                    toSign: version === 4 ? toSign.hashed : toSign,
	                    toSignRaw: version === 4 ? toSign.raw : toSign
	                };
	            };
	
	        /*jshint indent:false */
	        switch (requestInfo.type) {
	            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_ABORT:
	                method = "DELETE";
	                endOfUrl = qq.format("uploadId={}", requestInfo.uploadId);
	                break;
	            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_INITIATE:
	                endOfUrl = "uploads";
	                break;
	            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_COMPLETE:
	                endOfUrl = qq.format("uploadId={}", requestInfo.uploadId);
	                break;
	            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_UPLOAD:
	                method = "PUT";
	                endOfUrl = qq.format("partNumber={}&uploadId={}", requestInfo.partNum, requestInfo.uploadId);
	                break;
	        }
	
	        endOfUrl = requestInfo.key + "?" + endOfUrl;
	
	        if (version === 4) {
	            v4.getEncodedHashedPayload(requestInfo.content).then(function(hashedContent) {
	                requestInfo.headers["x-amz-content-sha256"] = hashedContent;
	                requestInfo.headers.Host = requestInfo.host;
	                requestInfo.headers["x-amz-date"] = qq.s3.util.getV4PolicyDate(now, options.signatureSpec.drift);
	                requestInfo.hashedContent = hashedContent;
	
	                promise.success(generateStringToSign(requestInfo));
	            });
	        }
	        else {
	            promise.success(generateStringToSign(requestInfo));
	        }
	
	        return promise;
	    }
	
	    function determineSignatureClientSide(id, toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken) {
	        var updatedHeaders;
	
	        // REST API request
	        if (toBeSigned.signatureConstructor) {
	            if (updatedSessionToken) {
	                updatedHeaders = toBeSigned.signatureConstructor.getHeaders();
	                updatedHeaders[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;
	                toBeSigned.signatureConstructor.withHeaders(updatedHeaders);
	            }
	
	            toBeSigned.signatureConstructor.getToSign(id).then(function(signatureArtifacts) {
	                signApiRequest(toBeSigned.signatureConstructor, signatureArtifacts.stringToSign, signatureEffort);
	            });
	        }
	        // Form upload (w/ policy document)
	        else {
	            updatedSessionToken && qq.s3.util.refreshPolicyCredentials(toBeSigned, updatedSessionToken);
	            signPolicy(toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken);
	        }
	    }
	
	    function signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {
	        if (options.signatureSpec.version === 4) {
	            v4.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);
	        }
	        else {
	            v2.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);
	        }
	    }
	
	    function signApiRequest(signatureConstructor, headersStr, signatureEffort) {
	        if (options.signatureSpec.version === 4) {
	            v4.signApiRequest(signatureConstructor, headersStr, signatureEffort);
	        }
	        else {
	            v2.signApiRequest(signatureConstructor, headersStr, signatureEffort);
	        }
	    }
	
	    requester = qq.extend(this, new qq.AjaxRequester({
	        acceptHeader: "application/json",
	        method: options.method,
	        contentType: "application/json; charset=utf-8",
	        endpointStore: {
	            get: function() {
	                return options.signatureSpec.endpoint;
	            }
	        },
	        paramsStore: options.paramsStore,
	        maxConnections: options.maxConnections,
	        customHeaders: options.signatureSpec.customHeaders,
	        log: options.log,
	        onComplete: handleSignatureReceived,
	        cors: options.cors
	    }));
	
	    qq.extend(this, {
	        /**
	         * On success, an object containing the parsed JSON response will be passed into the success handler if the
	         * request succeeds.  Otherwise an error message will be passed into the failure method.
	         *
	         * @param id File ID.
	         * @param toBeSigned an Object that holds the item(s) to be signed
	         * @returns {qq.Promise} A promise that is fulfilled when the response has been received.
	         */
	        getSignature: function(id, toBeSigned) {
	            var params = toBeSigned,
	                signatureConstructor = toBeSigned.signatureConstructor,
	                signatureEffort = new qq.Promise(),
	                queryParams;
	
	            if (options.signatureSpec.version === 4) {
	                queryParams = {v4: true};
	            }
	
	            if (credentialsProvider.get().secretKey && qq.CryptoJS) {
	                if (credentialsProvider.get().expiration.getTime() > Date.now()) {
	                    determineSignatureClientSide(id, toBeSigned, signatureEffort);
	                }
	                // If credentials are expired, ask for new ones before attempting to sign request
	                else {
	                    credentialsProvider.onExpired().then(function() {
	                        determineSignatureClientSide(id, toBeSigned,
	                            signatureEffort,
	                            credentialsProvider.get().accessKey,
	                            credentialsProvider.get().sessionToken);
	                    }, function(errorMsg) {
	                        options.log("Attempt to update expired credentials apparently failed! Unable to sign request.  ", "error");
	                        signatureEffort.failure("Unable to sign request - expired credentials.");
	                    });
	                }
	            }
	            else {
	                options.log("Submitting S3 signature request for " + id);
	
	                if (signatureConstructor) {
	                    signatureConstructor.getToSign(id).then(function(signatureArtifacts) {
	                        params = {headers: signatureArtifacts.stringToSignRaw};
	                        requester.initTransport(id)
	                            .withParams(params)
	                            .withQueryParams(queryParams)
	                            .send();
	                    });
	                }
	                else {
	                    requester.initTransport(id)
	                        .withParams(params)
	                        .withQueryParams(queryParams)
	                        .send();
	                }
	
	                pendingSignatures[id] = {
	                    promise: signatureEffort,
	                    signatureConstructor: signatureConstructor
	                };
	            }
	
	            return signatureEffort;
	        },
	
	        constructStringToSign: function(type, bucket, host, key) {
	            var headers = {},
	                uploadId, content, contentType, partNum, artifacts;
	
	            return {
	                withHeaders: function(theHeaders) {
	                    headers = theHeaders;
	                    return this;
	                },
	
	                withUploadId: function(theUploadId) {
	                    uploadId = theUploadId;
	                    return this;
	                },
	
	                withContent: function(theContent) {
	                    content = theContent;
	                    return this;
	                },
	
	                withContentType: function(theContentType) {
	                    contentType = theContentType;
	                    return this;
	                },
	
	                withPartNum: function(thePartNum) {
	                    partNum = thePartNum;
	                    return this;
	                },
	
	                getToSign: function(id) {
	                    var sessionToken = credentialsProvider.get().sessionToken,
	                        promise = new qq.Promise(),
	                        adjustedDate = new Date(Date.now() + options.signatureSpec.drift);
	
	                    headers["x-amz-date"] = adjustedDate.toUTCString();
	
	                    if (sessionToken) {
	                        headers[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;
	                    }
	
	                    getStringToSignArtifacts(id, options.signatureSpec.version, {
	                        bucket: bucket,
	                        content: content,
	                        contentType: contentType,
	                        headers: headers,
	                        host: host,
	                        key: key,
	                        partNum: partNum,
	                        type: type,
	                        uploadId: uploadId
	                    }).then(function(_artifacts_) {
	                        artifacts = _artifacts_;
	                        promise.success({
	                            headers: (function() {
	                                if (contentType) {
	                                    headers["Content-Type"] = contentType;
	                                }
	
	                                delete headers.Host; // we don't want this to be set on the XHR-initiated request
	                                return headers;
	                            }()),
	                            date: artifacts.date,
	                            endOfUrl: artifacts.endOfUrl,
	                            signedHeaders: artifacts.signedHeaders,
	                            stringToSign: artifacts.toSign,
	                            stringToSignRaw: artifacts.toSignRaw
	                        });
	                    });
	
	                    return promise;
	                },
	
	                getHeaders: function() {
	                    return qq.extend({}, headers);
	                },
	
	                getEndOfUrl: function() {
	                    return artifacts && artifacts.endOfUrl;
	                },
	
	                getRequestDate: function() {
	                    return artifacts && artifacts.date;
	                },
	
	                getSignedHeaders: function() {
	                    return artifacts && artifacts.signedHeaders;
	                }
	            };
	        }
	    });
	};
	
	qq.s3.RequestSigner.prototype.REQUEST_TYPE = {
	    MULTIPART_INITIATE: "multipart_initiate",
	    MULTIPART_COMPLETE: "multipart_complete",
	    MULTIPART_ABORT: "multipart_abort",
	    MULTIPART_UPLOAD: "multipart_upload"
	};
	
	/*globals qq, XMLHttpRequest*/
	/**
	 * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success
	 * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`
	 * property (by default) in an "application/json" response.
	 *
	 * @param o Options associated with all requests.
	 * @constructor
	 */
	qq.UploadSuccessAjaxRequester = function(o) {
	    "use strict";
	
	    var requester,
	        pendingRequests = [],
	        options = {
	            method: "POST",
	            endpoint: null,
	            maxConnections: 3,
	            customHeaders: {},
	            paramsStore: {},
	            cors: {
	                expected: false,
	                sendCredentials: false
	            },
	            log: function(str, level) {}
	        };
	
	    qq.extend(options, o);
	
	    function handleSuccessResponse(id, xhrOrXdr, isError) {
	        var promise = pendingRequests[id],
	            responseJson = xhrOrXdr.responseText,
	            successIndicator = {success: true},
	            failureIndicator = {success: false},
	            parsedResponse;
	
	        delete pendingRequests[id];
	
	        options.log(qq.format("Received the following response body to an upload success request for id {}: {}", id, responseJson));
	
	        try {
	            parsedResponse = qq.parseJson(responseJson);
	
	            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties
	            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,
	            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the
	            // response body for an "error" response.
	            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {
	                options.log("Upload success request was rejected by the server.", "error");
	                promise.failure(qq.extend(parsedResponse, failureIndicator));
	            }
	            else {
	                options.log("Upload success was acknowledged by the server.");
	                promise.success(qq.extend(parsedResponse, successIndicator));
	            }
	        }
	        catch (error) {
	            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.
	            if (isError) {
	                options.log(qq.format("Your server indicated failure in its upload success request response for id {}!", id), "error");
	                promise.failure(failureIndicator);
	            }
	            else {
	                options.log("Upload success was acknowledged by the server.");
	                promise.success(successIndicator);
	            }
	        }
	    }
	
	    requester = qq.extend(this, new qq.AjaxRequester({
	        acceptHeader: "application/json",
	        method: options.method,
	        endpointStore: {
	            get: function() {
	                return options.endpoint;
	            }
	        },
	        paramsStore: options.paramsStore,
	        maxConnections: options.maxConnections,
	        customHeaders: options.customHeaders,
	        log: options.log,
	        onComplete: handleSuccessResponse,
	        cors: options.cors
	    }));
	
	    qq.extend(this, {
	        /**
	         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.
	         *
	         * @param id ID of the associated file
	         * @param spec `Object` with the properties that correspond to important values that we want to
	         * send to the server with this request.
	         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed
	         * payload of the response will be passed into the `failure` or `success` promise method.
	         */
	        sendSuccessRequest: function(id, spec) {
	            var promise = new qq.Promise();
	
	            options.log("Submitting upload success request/notification for " + id);
	
	            requester.initTransport(id)
	                .withParams(spec)
	                .send();
	
	            pendingRequests[id] = promise;
	
	            return promise;
	        }
	    });
	};
	
	/*globals qq*/
	/**
	 * Ajax requester used to send an ["Initiate Multipart Upload"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html)
	 * request to S3 via the REST API.
	 *
	 * @param o Options from the caller - will override the defaults.
	 * @constructor
	 */
	qq.s3.InitiateMultipartAjaxRequester = function(o) {
	    "use strict";
	
	    var requester,
	        pendingInitiateRequests = {},
	        options = {
	            filenameParam: "qqfilename",
	            method: "POST",
	            endpointStore: null,
	            paramsStore: null,
	            signatureSpec: null,
	            aclStore: null,
	            reducedRedundancy: false,
	            serverSideEncryption: false,
	            maxConnections: 3,
	            getContentType: function(id) {},
	            getBucket: function(id) {},
	            getHost: function(id) {},
	            getKey: function(id) {},
	            getName: function(id) {},
	            log: function(str, level) {}
	        },
	        getSignatureAjaxRequester;
	
	    qq.extend(options, o);
	
	    getSignatureAjaxRequester = new qq.s3.RequestSigner({
	        endpointStore: options.endpointStore,
	        signatureSpec: options.signatureSpec,
	        cors: options.cors,
	        log: options.log
	    });
	
	    /**
	     * Determine all headers for the "Initiate MPU" request, including the "Authorization" header, which must be determined
	     * by the local server.  This is a promissory function.  If the server responds with a signature, the headers
	     * (including the Authorization header) will be passed into the success method of the promise.  Otherwise, the failure
	     * method on the promise will be called.
	     *
	     * @param id Associated file ID
	     * @returns {qq.Promise}
	     */
	    function getHeaders(id) {
	        var bucket = options.getBucket(id),
	            host = options.getHost(id),
	            headers = {},
	            promise = new qq.Promise(),
	            key = options.getKey(id),
	            signatureConstructor;
	
	        headers["x-amz-acl"] = options.aclStore.get(id);
	
	        if (options.reducedRedundancy) {
	            headers[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;
	        }
	
	        if (options.serverSideEncryption) {
	            headers[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;
	        }
	
	        headers[qq.s3.util.AWS_PARAM_PREFIX + options.filenameParam] = encodeURIComponent(options.getName(id));
	
	        qq.each(options.paramsStore.get(id), function(name, val) {
	            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {
	                headers[name] = val;
	            }
	            else {
	                headers[qq.s3.util.AWS_PARAM_PREFIX + name] = encodeURIComponent(val);
	            }
	        });
	
	        signatureConstructor = getSignatureAjaxRequester.constructStringToSign
	            (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_INITIATE, bucket, host, key)
	            .withContentType(options.getContentType(id))
	            .withHeaders(headers);
	
	        // Ask the local server to sign the request.  Use this signature to form the Authorization header.
	        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);
	
	        return promise;
	    }
	
	    /**
	     * Called by the base ajax requester when the response has been received.  We definitively determine here if the
	     * "Initiate MPU" request has been a success or not.
	     *
	     * @param id ID associated with the file.
	     * @param xhr `XMLHttpRequest` object containing the response, among other things.
	     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).
	     */
	    function handleInitiateRequestComplete(id, xhr, isError) {
	        var promise = pendingInitiateRequests[id],
	            domParser = new DOMParser(),
	            responseDoc = domParser.parseFromString(xhr.responseText, "application/xml"),
	            uploadIdElements, messageElements, uploadId, errorMessage, status;
	
	        delete pendingInitiateRequests[id];
	
	        // The base ajax requester may declare the request to be a failure based on status code.
	        if (isError) {
	            status = xhr.status;
	
	            messageElements = responseDoc.getElementsByTagName("Message");
	            if (messageElements.length > 0) {
	                errorMessage = messageElements[0].textContent;
	            }
	        }
	        // If the base ajax requester has not declared this a failure, make sure we can retrieve the uploadId from the response.
	        else {
	            uploadIdElements = responseDoc.getElementsByTagName("UploadId");
	            if (uploadIdElements.length > 0) {
	                uploadId = uploadIdElements[0].textContent;
	            }
	            else {
	                errorMessage = "Upload ID missing from request";
	            }
	        }
	
	        // Either fail the promise (passing a descriptive error message) or declare it a success (passing the upload ID)
	        if (uploadId === undefined) {
	            if (errorMessage) {
	                options.log(qq.format("Specific problem detected initiating multipart upload request for {}: '{}'.", id, errorMessage), "error");
	            }
	            else {
	                options.log(qq.format("Unexplained error with initiate multipart upload request for {}.  Status code {}.", id, status), "error");
	            }
	
	            promise.failure("Problem initiating upload request.", xhr);
	        }
	        else {
	            options.log(qq.format("Initiate multipart upload request successful for {}.  Upload ID is {}", id, uploadId));
	            promise.success(uploadId, xhr);
	        }
	    }
	
	    requester = qq.extend(this, new qq.AjaxRequester({
	        method: options.method,
	        contentType: null,
	        endpointStore: options.endpointStore,
	        maxConnections: options.maxConnections,
	        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added
	        log: options.log,
	        onComplete: handleInitiateRequestComplete,
	        successfulResponseCodes: {
	            POST: [200]
	        }
	    }));
	
	    qq.extend(this, {
	        /**
	         * Sends the "Initiate MPU" request to AWS via the REST API.  First, though, we must get a signature from the
	         * local server for the request.  If all is successful, the uploadId from AWS will be passed into the promise's
	         * success handler. Otherwise, an error message will ultimately be passed into the failure method.
	         *
	         * @param id The ID associated with the file
	         * @returns {qq.Promise}
	         */
	        send: function(id) {
	            var promise = new qq.Promise();
	
	            getHeaders(id).then(function(headers, endOfUrl) {
	                options.log("Submitting S3 initiate multipart upload request for " + id);
	
	                pendingInitiateRequests[id] = promise;
	                requester.initTransport(id)
	                    .withPath(endOfUrl)
	                    .withHeaders(headers)
	                    .send();
	            }, promise.failure);
	
	            return promise;
	        }
	    });
	};
	
	/*globals qq*/
	/**
	 * Ajax requester used to send an ["Complete Multipart Upload"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadComplete.html)
	 * request to S3 via the REST API.
	 *
	 * @param o Options passed by the creator, to overwrite any default option values.
	 * @constructor
	 */
	qq.s3.CompleteMultipartAjaxRequester = function(o) {
	    "use strict";
	
	    var requester,
	        pendingCompleteRequests = {},
	        options = {
	            method: "POST",
	            contentType: "text/xml",
	            endpointStore: null,
	            signatureSpec: null,
	            maxConnections: 3,
	            getBucket: function(id) {},
	            getHost: function(id) {},
	            getKey: function(id) {},
	            log: function(str, level) {}
	        },
	        getSignatureAjaxRequester;
	
	    qq.extend(options, o);
	
	    // Transport for requesting signatures (for the "Complete" requests) from the local server
	    getSignatureAjaxRequester = new qq.s3.RequestSigner({
	        endpointStore: options.endpointStore,
	        signatureSpec: options.signatureSpec,
	        cors: options.cors,
	        log: options.log
	    });
	
	    /**
	     * Attach all required headers (including Authorization) to the "Complete" request.  This is a promissory function
	     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that
	     * prevents headers from being attached.
	     *
	     * @returns {qq.Promise}
	     */
	    function getHeaders(id, uploadId, body) {
	        var headers = {},
	            promise = new qq.Promise(),
	            bucket = options.getBucket(id),
	            host = options.getHost(id),
	            signatureConstructor = getSignatureAjaxRequester.constructStringToSign
	                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_COMPLETE, bucket, host, options.getKey(id))
	                .withUploadId(uploadId)
	                .withContent(body)
	                .withContentType("application/xml; charset=UTF-8");
	
	        // Ask the local server to sign the request.  Use this signature to form the Authorization header.
	        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);
	
	        return promise;
	    }
	
	    /**
	     * Called by the base ajax requester when the response has been received.  We definitively determine here if the
	     * "Complete MPU" request has been a success or not.
	     *
	     * @param id ID associated with the file.
	     * @param xhr `XMLHttpRequest` object containing the response, among other things.
	     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).
	     */
	    function handleCompleteRequestComplete(id, xhr, isError) {
	        var promise = pendingCompleteRequests[id],
	            domParser = new DOMParser(),
	            bucket = options.getBucket(id),
	            key = options.getKey(id),
	            responseDoc = domParser.parseFromString(xhr.responseText, "application/xml"),
	            bucketEls = responseDoc.getElementsByTagName("Bucket"),
	            keyEls = responseDoc.getElementsByTagName("Key");
	
	        delete pendingCompleteRequests[id];
	
	        options.log(qq.format("Complete response status {}, body = {}", xhr.status, xhr.responseText));
	
	        // If the base requester has determine this a failure, give up.
	        if (isError) {
	            options.log(qq.format("Complete Multipart Upload request for {} failed with status {}.", id, xhr.status), "error");
	        }
	        else {
	            // Make sure the correct bucket and key has been specified in the XML response from AWS.
	            if (bucketEls.length && keyEls.length) {
	                if (bucketEls[0].textContent !== bucket) {
	                    isError = true;
	                    options.log(qq.format("Wrong bucket in response to Complete Multipart Upload request for {}.", id), "error");
	                }
	
	                // TODO Compare key name from response w/ expected key name if AWS ever fixes the encoding of key names in this response.
	            }
	            else {
	                isError = true;
	                options.log(qq.format("Missing bucket and/or key in response to Complete Multipart Upload request for {}.", id), "error");
	            }
	        }
	
	        if (isError) {
	            promise.failure("Problem combining the file parts!", xhr);
	        }
	        else {
	            promise.success({}, xhr);
	        }
	    }
	
	    /**
	     * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.
	     * @returns {string} XML string containing the body to send with the "Complete" request
	     */
	    function getCompleteRequestBody(etagEntries) {
	        var doc = document.implementation.createDocument(null, "CompleteMultipartUpload", null);
	
	        // The entries MUST be sorted by part number, per the AWS API spec.
	        etagEntries.sort(function(a, b) {
	            return a.part - b.part;
	        });
	
	        // Construct an XML document for each pair of etag/part values that correspond to part uploads.
	        qq.each(etagEntries, function(idx, etagEntry) {
	            var part = etagEntry.part,
	                etag = etagEntry.etag,
	                partEl = doc.createElement("Part"),
	                partNumEl = doc.createElement("PartNumber"),
	                partNumTextEl = doc.createTextNode(part),
	                etagTextEl = doc.createTextNode(etag),
	                etagEl = doc.createElement("ETag");
	
	            etagEl.appendChild(etagTextEl);
	            partNumEl.appendChild(partNumTextEl);
	            partEl.appendChild(partNumEl);
	            partEl.appendChild(etagEl);
	            qq(doc).children()[0].appendChild(partEl);
	        });
	
	        // Turn the resulting XML document into a string fit for transport.
	        return new XMLSerializer().serializeToString(doc);
	    }
	
	    requester = qq.extend(this, new qq.AjaxRequester({
	        method: options.method,
	        contentType: "application/xml; charset=UTF-8",
	        endpointStore: options.endpointStore,
	        maxConnections: options.maxConnections,
	        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added
	        log: options.log,
	        onComplete: handleCompleteRequestComplete,
	        successfulResponseCodes: {
	            POST: [200]
	        }
	    }));
	
	    qq.extend(this, {
	        /**
	         * Sends the "Complete" request and fulfills the returned promise when the success of this request is known.
	         *
	         * @param id ID associated with the file.
	         * @param uploadId AWS uploadId for this file
	         * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.
	         * @returns {qq.Promise}
	         */
	        send: function(id, uploadId, etagEntries) {
	            var promise = new qq.Promise(),
	                body = getCompleteRequestBody(etagEntries);
	
	            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {
	                options.log("Submitting S3 complete multipart upload request for " + id);
	
	                pendingCompleteRequests[id] = promise;
	                delete headers["Content-Type"];
	
	                requester.initTransport(id)
	                    .withPath(endOfUrl)
	                    .withHeaders(headers)
	                    .withPayload(body)
	                    .send();
	            }, promise.failure);
	
	            return promise;
	        }
	    });
	};
	
	/*globals qq */
	/**
	 * Ajax requester used to send an ["Abort Multipart Upload"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadAbort.html)
	 * request to S3 via the REST API.
	
	 * @param o
	 * @constructor
	 */
	qq.s3.AbortMultipartAjaxRequester = function(o) {
	    "use strict";
	
	    var requester,
	        options = {
	            method: "DELETE",
	            endpointStore: null,
	            signatureSpec: null,
	            maxConnections: 3,
	            getBucket: function(id) {},
	            getHost: function(id) {},
	            getKey: function(id) {},
	            log: function(str, level) {}
	        },
	        getSignatureAjaxRequester;
	
	    qq.extend(options, o);
	
	    // Transport for requesting signatures (for the "Complete" requests) from the local server
	    getSignatureAjaxRequester = new qq.s3.RequestSigner({
	        endpointStore: options.endpointStore,
	        signatureSpec: options.signatureSpec,
	        cors: options.cors,
	        log: options.log
	    });
	
	    /**
	     * Attach all required headers (including Authorization) to the "Abort" request.  This is a promissory function
	     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that
	     * prevents headers from being attached.
	     *
	     * @param id Associated file ID
	     * @param uploadId ID of the associated upload, according to AWS
	     * @returns {qq.Promise}
	     */
	    function getHeaders(id, uploadId) {
	        var headers = {},
	            promise = new qq.Promise(),
	            bucket = options.getBucket(id),
	            host = options.getHost(id),
	            signatureConstructor = getSignatureAjaxRequester.constructStringToSign
	                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_ABORT, bucket, host, options.getKey(id))
	                .withUploadId(uploadId);
	
	        // Ask the local server to sign the request.  Use this signature to form the Authorization header.
	        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);
	
	        return promise;
	    }
	
	    /**
	     * Called by the base ajax requester when the response has been received.  We definitively determine here if the
	     * "Abort MPU" request has been a success or not.
	     *
	     * @param id ID associated with the file.
	     * @param xhr `XMLHttpRequest` object containing the response, among other things.
	     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).
	     */
	    function handleAbortRequestComplete(id, xhr, isError) {
	        var domParser = new DOMParser(),
	            responseDoc = domParser.parseFromString(xhr.responseText, "application/xml"),
	            errorEls = responseDoc.getElementsByTagName("Error"),
	            awsErrorMsg;
	
	        options.log(qq.format("Abort response status {}, body = {}", xhr.status, xhr.responseText));
	
	        // If the base requester has determine this a failure, give up.
	        if (isError) {
	            options.log(qq.format("Abort Multipart Upload request for {} failed with status {}.", id, xhr.status), "error");
	        }
	        else {
	            // Make sure the correct bucket and key has been specified in the XML response from AWS.
	            if (errorEls.length) {
	                isError = true;
	                awsErrorMsg = responseDoc.getElementsByTagName("Message")[0].textContent;
	                options.log(qq.format("Failed to Abort Multipart Upload request for {}.  Error: {}", id, awsErrorMsg), "error");
	            }
	            else {
	                options.log(qq.format("Abort MPU request succeeded for file ID {}.", id));
	            }
	        }
	    }
	
	    requester = qq.extend(this, new qq.AjaxRequester({
	        validMethods: ["DELETE"],
	        method: options.method,
	        contentType: null,
	        endpointStore: options.endpointStore,
	        maxConnections: options.maxConnections,
	        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added
	        log: options.log,
	        onComplete: handleAbortRequestComplete,
	        successfulResponseCodes: {
	            DELETE: [204]
	        }
	    }));
	
	    qq.extend(this, {
	        /**
	         * Sends the "Abort" request.
	         *
	         * @param id ID associated with the file.
	         * @param uploadId AWS uploadId for this file
	         */
	        send: function(id, uploadId) {
	            getHeaders(id, uploadId).then(function(headers, endOfUrl) {
	                options.log("Submitting S3 Abort multipart upload request for " + id);
	                requester.initTransport(id)
	                    .withPath(endOfUrl)
	                    .withHeaders(headers)
	                    .send();
	            });
	        }
	    });
	};
	
	/*globals qq */
	/**
	 * Upload handler used by the upload to S3 module that depends on File API support, and, therefore, makes use of
	 * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to S3 buckets via the associated AWS API.
	 *
	 * If chunking is supported and enabled, the S3 Multipart Upload REST API is utilized.
	 *
	 * @param spec Options passed from the base handler
	 * @param proxy Callbacks & methods used to query for or push out data/changes
	 */
	qq.s3.XhrUploadHandler = function(spec, proxy) {
	    "use strict";
	
	    var getName = proxy.getName,
	        log = proxy.log,
	        clockDrift = spec.clockDrift,
	        expectedStatus = 200,
	        onGetBucket = spec.getBucket,
	        onGetHost = spec.getHost,
	        onGetKeyName = spec.getKeyName,
	        filenameParam = spec.filenameParam,
	        paramsStore = spec.paramsStore,
	        endpointStore = spec.endpointStore,
	        aclStore = spec.aclStore,
	        reducedRedundancy = spec.objectProperties.reducedRedundancy,
	        region = spec.objectProperties.region,
	        serverSideEncryption = spec.objectProperties.serverSideEncryption,
	        validation = spec.validation,
	        signature = qq.extend({region: region, drift: clockDrift}, spec.signature),
	        handler = this,
	        credentialsProvider = spec.signature.credentialsProvider,
	
	        chunked = {
	            // Sends a "Complete Multipart Upload" request and then signals completion of the upload
	            // when the response to this request has been parsed.
	            combine: function(id) {
	                var uploadId = handler._getPersistableData(id).uploadId,
	                    etagMap = handler._getPersistableData(id).etags,
	                    result = new qq.Promise();
	
	                requesters.completeMultipart.send(id, uploadId, etagMap).then(
	                    result.success,
	
	                    function failure(reason, xhr) {
	                        result.failure(upload.done(id, xhr).response, xhr);
	                    }
	                );
	
	                return result;
	            },
	
	            // The last step in handling a chunked upload.  This is called after each chunk has been sent.
	            // The request may be successful, or not.  If it was successful, we must extract the "ETag" element
	            // in the XML response and store that along with the associated part number.
	            // We need these items to "Complete" the multipart upload after all chunks have been successfully sent.
	            done: function(id, xhr, chunkIdx) {
	                var response = upload.response.parse(id, xhr),
	                    etag;
	
	                if (response.success) {
	                    etag = xhr.getResponseHeader("ETag");
	
	                    if (!handler._getPersistableData(id).etags) {
	                        handler._getPersistableData(id).etags = [];
	                    }
	                    handler._getPersistableData(id).etags.push({part: chunkIdx + 1, etag: etag});
	                }
	            },
	
	            /**
	             * Determines headers that must be attached to the chunked (Multipart Upload) request.  One of these headers is an
	             * Authorization value, which must be determined by asking the local server to sign the request first.  So, this
	             * function returns a promise.  Once all headers are determined, the `success` method of the promise is called with
	             * the headers object.  If there was some problem determining the headers, we delegate to the caller's `failure`
	             * callback.
	             *
	             * @param id File ID
	             * @param chunkIdx Index of the chunk to PUT
	             * @returns {qq.Promise}
	             */
	            initHeaders: function(id, chunkIdx, blob) {
	                var headers = {},
	                    bucket = upload.bucket.getName(id),
	                    host = upload.host.getName(id),
	                    key = upload.key.urlSafe(id),
	                    promise = new qq.Promise(),
	                    signatureConstructor = requesters.restSignature.constructStringToSign
	                        (requesters.restSignature.REQUEST_TYPE.MULTIPART_UPLOAD, bucket, host, key)
	                        .withPartNum(chunkIdx + 1)
	                        .withContent(blob)
	                        .withUploadId(handler._getPersistableData(id).uploadId);
	
	                // Ask the local server to sign the request.  Use this signature to form the Authorization header.
	                requesters.restSignature.getSignature(id + "." + chunkIdx, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);
	
	                return promise;
	            },
	
	            put: function(id, chunkIdx) {
	                var xhr = handler._createXhr(id, chunkIdx),
	                    chunkData = handler._getChunkData(id, chunkIdx),
	                    domain = spec.endpointStore.get(id),
	                    promise = new qq.Promise();
	
	                // Add appropriate headers to the multipart upload request.
	                // Once these have been determined (asynchronously) attach the headers and send the chunk.
	                chunked.initHeaders(id, chunkIdx, chunkData.blob).then(function(headers, endOfUrl) {
	                    if (xhr._cancelled) {
	                        log(qq.format("Upload of item {}.{} cancelled. Upload will not start after successful signature request.", id, chunkIdx));
	                        promise.failure({error: "Chunk upload cancelled"});
	                    }
	                    else {
	                        var url = domain + "/" + endOfUrl;
	                        handler._registerProgressHandler(id, chunkIdx, chunkData.size);
	                        upload.track(id, xhr, chunkIdx).then(promise.success, promise.failure);
	                        xhr.open("PUT", url, true);
	
	                        qq.each(headers, function(name, val) {
	                            xhr.setRequestHeader(name, val);
	                        });
	
	                        xhr.send(chunkData.blob);
	                    }
	                }, function() {
	                    promise.failure({error: "Problem signing the chunk!"}, xhr);
	                });
	
	                return promise;
	            },
	
	            send: function(id, chunkIdx) {
	                var promise = new qq.Promise();
	
	                chunked.setup(id).then(
	                    // The "Initiate" request succeeded.  We are ready to send the first chunk.
	                    function() {
	                        chunked.put(id, chunkIdx).then(promise.success, promise.failure);
	                    },
	
	                    // We were unable to initiate the chunked upload process.
	                    function(errorMessage, xhr) {
	                        promise.failure({error: errorMessage}, xhr);
	                    }
	                );
	
	                return promise;
	            },
	
	            /**
	             * Sends an "Initiate Multipart Upload" request to S3 via the REST API, but only if the MPU has not already been
	             * initiated.
	             *
	             * @param id Associated file ID
	             * @returns {qq.Promise} A promise that is fulfilled when the initiate request has been sent and the response has been parsed.
	             */
	            setup: function(id) {
	                var promise = new qq.Promise(),
	                    uploadId = handler._getPersistableData(id).uploadId,
	                    uploadIdPromise = new qq.Promise();
	
	                if (!uploadId) {
	                    handler._getPersistableData(id).uploadId = uploadIdPromise;
	                    requesters.initiateMultipart.send(id).then(
	                        function(uploadId) {
	                            handler._getPersistableData(id).uploadId = uploadId;
	                            uploadIdPromise.success(uploadId);
	                            promise.success(uploadId);
	                        },
	                        function(errorMsg, xhr) {
	                            handler._getPersistableData(id).uploadId = null;
	                            promise.failure(errorMsg, xhr);
	                            uploadIdPromise.failure(errorMsg, xhr);
	                        }
	                    );
	                }
	                else if (uploadId instanceof qq.Promise) {
	                    uploadId.then(function(uploadId) {
	                        promise.success(uploadId);
	                    });
	                }
	                else {
	                    promise.success(uploadId);
	                }
	
	                return promise;
	            }
	        },
	
	        requesters = {
	            abortMultipart: new qq.s3.AbortMultipartAjaxRequester({
	                endpointStore: endpointStore,
	                signatureSpec: signature,
	                cors: spec.cors,
	                log: log,
	                getBucket: function(id) {
	                    return upload.bucket.getName(id);
	                },
	                getHost: function(id) {
	                    return upload.host.getName(id);
	                },
	                getKey: function(id) {
	                    return upload.key.urlSafe(id);
	                }
	            }),
	
	            completeMultipart: new qq.s3.CompleteMultipartAjaxRequester({
	                endpointStore: endpointStore,
	                signatureSpec: signature,
	                cors: spec.cors,
	                log: log,
	                getBucket: function(id) {
	                    return upload.bucket.getName(id);
	                },
	                getHost: function(id) {
	                    return upload.host.getName(id);
	                },
	                getKey: function(id) {
	                    return upload.key.urlSafe(id);
	                }
	            }),
	
	            initiateMultipart: new qq.s3.InitiateMultipartAjaxRequester({
	                filenameParam: filenameParam,
	                endpointStore: endpointStore,
	                paramsStore: paramsStore,
	                signatureSpec: signature,
	                aclStore: aclStore,
	                reducedRedundancy: reducedRedundancy,
	                serverSideEncryption: serverSideEncryption,
	                cors: spec.cors,
	                log: log,
	                getContentType: function(id) {
	                    return handler._getMimeType(id);
	                },
	                getBucket: function(id) {
	                    return upload.bucket.getName(id);
	                },
	                getHost: function(id) {
	                    return upload.host.getName(id);
	                },
	                getKey: function(id) {
	                    return upload.key.urlSafe(id);
	                },
	                getName: function(id) {
	                    return getName(id);
	                }
	            }),
	
	            policySignature: new qq.s3.RequestSigner({
	                expectingPolicy: true,
	                signatureSpec: signature,
	                cors: spec.cors,
	                log: log
	            }),
	
	            restSignature: new qq.s3.RequestSigner({
	                endpointStore: endpointStore,
	                signatureSpec: signature,
	                cors: spec.cors,
	                log: log
	            })
	        },
	
	        simple = {
	            /**
	             * Used for simple (non-chunked) uploads to determine the parameters to send along with the request.  Part of this
	             * process involves asking the local server to sign the request, so this function returns a promise.  The promise
	             * is fulfilled when all parameters are determined, or when we determine that all parameters cannnot be calculated
	             * due to some error.
	             *
	             * @param id File ID
	             * @returns {qq.Promise}
	             */
	            initParams: function(id) {
	                /*jshint -W040 */
	                var customParams = paramsStore.get(id);
	                customParams[filenameParam] = getName(id);
	
	                return qq.s3.util.generateAwsParams({
	                    endpoint: endpointStore.get(id),
	                    clockDrift: clockDrift,
	                    params: customParams,
	                    type: handler._getMimeType(id),
	                    bucket: upload.bucket.getName(id),
	                    key: handler.getThirdPartyFileId(id),
	                    accessKey: credentialsProvider.get().accessKey,
	                    sessionToken: credentialsProvider.get().sessionToken,
	                    acl: aclStore.get(id),
	                    expectedStatus: expectedStatus,
	                    minFileSize: validation.minSizeLimit,
	                    maxFileSize: validation.maxSizeLimit,
	                    reducedRedundancy: reducedRedundancy,
	                    region: region,
	                    serverSideEncryption: serverSideEncryption,
	                    signatureVersion: signature.version,
	                    log: log
	                },
	                qq.bind(requesters.policySignature.getSignature, this, id));
	            },
	
	            send: function(id) {
	                var promise = new qq.Promise(),
	                    xhr = handler._createXhr(id),
	                    fileOrBlob = handler.getFile(id);
	
	                handler._registerProgressHandler(id);
	                upload.track(id, xhr).then(promise.success, promise.failure);
	
	                // Delegate to a function the sets up the XHR request and notifies us when it is ready to be sent, along w/ the payload.
	                simple.setup(id, xhr, fileOrBlob).then(function(toSend) {
	                    log("Sending upload request for " + id);
	                    xhr.send(toSend);
	                }, promise.failure);
	
	                return promise;
	            },
	
	            /**
	             * Starts the upload process by delegating to an async function that determine parameters to be attached to the
	             * request.  If all params can be determined, we are called back with the params and the caller of this function is
	             * informed by invoking the `success` method on the promise returned by this function, passing the payload of the
	             * request.  If some error occurs here, we delegate to a function that signals a failure for this upload attempt.
	             *
	             * Note that this is only used by the simple (non-chunked) upload process.
	             *
	             * @param id File ID
	             * @param xhr XMLHttpRequest to use for the upload
	             * @param fileOrBlob `File` or `Blob` to send
	             * @returns {qq.Promise}
	             */
	            setup: function(id, xhr, fileOrBlob) {
	                var formData = new FormData(),
	                    endpoint = endpointStore.get(id),
	                    url = endpoint,
	                    promise = new qq.Promise();
	
	                simple.initParams(id).then(
	                    // Success - all params determined
	                    function(awsParams) {
	                        xhr.open("POST", url, true);
	
	                        qq.obj2FormData(awsParams, formData);
	
	                        // AWS requires the file field be named "file".
	                        formData.append("file", fileOrBlob);
	
	                        promise.success(formData);
	                    },
	
	                    // Failure - we couldn't determine some params (likely the signature)
	                    function(errorMessage) {
	                        promise.failure({error: errorMessage});
	                    }
	                );
	
	                return promise;
	            }
	        },
	
	        upload = {
	            /**
	             * Note that this is called when an upload has reached a termination point,
	             * regardless of success/failure.  For example, it is called when we have
	             * encountered an error during the upload or when the file may have uploaded successfully.
	             *
	             * @param id file ID
	             */
	            bucket: {
	                promise: function(id) {
	                    var promise = new qq.Promise(),
	                        cachedBucket = handler._getFileState(id).bucket;
	
	                    if (cachedBucket) {
	                        promise.success(cachedBucket);
	                    }
	                    else {
	                        onGetBucket(id).then(function(bucket) {
	                            handler._getFileState(id).bucket = bucket;
	                            promise.success(bucket);
	                        }, promise.failure);
	                    }
	
	                    return promise;
	                },
	
	                getName: function(id) {
	                    return handler._getFileState(id).bucket;
	                }
	            },
	
	            host: {
	                promise: function(id) {
	                    var promise = new qq.Promise(),
	                        cachedHost = handler._getFileState(id).host;
	
	                    if (cachedHost) {
	                        promise.success(cachedHost);
	                    }
	                    else {
	                        onGetHost(id).then(function(host) {
	                            handler._getFileState(id).host = host;
	                            promise.success(host);
	                        }, promise.failure);
	                    }
	
	                    return promise;
	                },
	
	                getName: function(id) {
	                    return handler._getFileState(id).host;
	                }
	            },
	
	            done: function(id, xhr) {
	                var response = upload.response.parse(id, xhr),
	                    isError = response.success !== true;
	
	                if (isError && upload.response.shouldReset(response.code)) {
	                    log("This is an unrecoverable error, we must restart the upload entirely on the next retry attempt.", "error");
	                    response.reset = true;
	                }
	
	                return {
	                    success: !isError,
	                    response: response
	                };
	            },
	
	            key: {
	                promise: function(id) {
	                    var promise = new qq.Promise(),
	                        key = handler.getThirdPartyFileId(id);
	
	                    /* jshint eqnull:true */
	                    if (key == null) {
	                        handler._setThirdPartyFileId(id, promise);
	                        onGetKeyName(id, getName(id)).then(
	                            function(keyName) {
	                                handler._setThirdPartyFileId(id, keyName);
	                                promise.success(keyName);
	                            },
	                            function(errorReason) {
	                                handler._setThirdPartyFileId(id, null);
	                                promise.failure(errorReason);
	                            }
	                        );
	                    }
	                    else if (qq.isGenericPromise(key)) {
	                        key.then(promise.success, promise.failure);
	                    }
	                    else {
	                        promise.success(key);
	                    }
	
	                    return promise;
	                },
	
	                urlSafe: function(id) {
	                    var encodedKey = encodeURIComponent(handler.getThirdPartyFileId(id));
	                    return encodedKey.replace(/%2F/g, "/");
	                }
	            },
	
	            response: {
	                parse: function(id, xhr) {
	                    var response = {},
	                        parsedErrorProps;
	
	                    try {
	                        log(qq.format("Received response status {} with body: {}", xhr.status, xhr.responseText));
	
	                        if (xhr.status === expectedStatus) {
	                            response.success = true;
	                        }
	                        else {
	                            parsedErrorProps = upload.response.parseError(xhr.responseText);
	
	                            if (parsedErrorProps) {
	                                response.error = parsedErrorProps.message;
	                                response.code = parsedErrorProps.code;
	                            }
	                        }
	                    }
	                    catch (error) {
	                        log("Error when attempting to parse xhr response text (" + error.message + ")", "error");
	                    }
	
	                    return response;
	                },
	
	                /**
	                 * This parses an XML response by extracting the "Message" and "Code" elements that accompany AWS error responses.
	                 *
	                 * @param awsResponseXml XML response from AWS
	                 * @returns {object} Object w/ `code` and `message` properties, or undefined if we couldn't find error info in the XML document.
	                 */
	                parseError: function(awsResponseXml) {
	                    var parser = new DOMParser(),
	                        parsedDoc = parser.parseFromString(awsResponseXml, "application/xml"),
	                        errorEls = parsedDoc.getElementsByTagName("Error"),
	                        errorDetails = {},
	                        codeEls, messageEls;
	
	                    if (errorEls.length) {
	                        codeEls = parsedDoc.getElementsByTagName("Code");
	                        messageEls = parsedDoc.getElementsByTagName("Message");
	
	                        if (messageEls.length) {
	                            errorDetails.message = messageEls[0].textContent;
	                        }
	
	                        if (codeEls.length) {
	                            errorDetails.code = codeEls[0].textContent;
	                        }
	
	                        return errorDetails;
	                    }
	                },
	
	                // Determine if the upload should be restarted on the next retry attempt
	                // based on the error code returned in the response from AWS.
	                shouldReset: function(errorCode) {
	                    /*jshint -W014 */
	                    return errorCode === "EntityTooSmall"
	                        || errorCode === "InvalidPart"
	                        || errorCode === "InvalidPartOrder"
	                        || errorCode === "NoSuchUpload";
	                }
	            },
	
	            start: function(id, optChunkIdx) {
	                var promise = new qq.Promise();
	
	                upload.key.promise(id).then(function() {
	                    upload.bucket.promise(id).then(function() {
	                        upload.host.promise(id).then(function() {
	                            /* jshint eqnull:true */
	                            if (optChunkIdx == null) {
	                                simple.send(id).then(promise.success, promise.failure);
	                            }
	                            else {
	                                chunked.send(id, optChunkIdx).then(promise.success, promise.failure);
	                            }
	                        });
	                    });
	                },
	                function(errorReason) {
	                    promise.failure({error: errorReason});
	                });
	
	                return promise;
	            },
	
	            track: function(id, xhr, optChunkIdx) {
	                var promise = new qq.Promise();
	
	                xhr.onreadystatechange = function() {
	                    if (xhr.readyState === 4) {
	                        var result;
	
	                        /* jshint eqnull:true */
	                        if (optChunkIdx == null) {
	                            result = upload.done(id, xhr);
	                            promise[result.success ? "success" : "failure"](result.response, xhr);
	                        }
	                        else {
	                            chunked.done(id, xhr, optChunkIdx);
	                            result = upload.done(id, xhr);
	                            promise[result.success ? "success" : "failure"](result.response, xhr);
	                        }
	                    }
	                };
	
	                return promise;
	            }
	        };
	
	    qq.extend(this, {
	        uploadChunk: upload.start,
	        uploadFile: upload.start
	    });
	
	    qq.extend(this, new qq.XhrUploadHandler({
	        options: qq.extend({namespace: "s3"}, spec),
	        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)
	    }));
	
	    qq.override(this, function(super_) {
	        return {
	            expunge: function(id) {
	                var uploadId = handler._getPersistableData(id) && handler._getPersistableData(id).uploadId,
	                    existedInLocalStorage = handler._maybeDeletePersistedChunkData(id);
	
	                if (uploadId !== undefined && existedInLocalStorage) {
	                    requesters.abortMultipart.send(id, uploadId);
	                }
	
	                super_.expunge(id);
	            },
	
	            finalizeChunks: function(id) {
	                return chunked.combine(id);
	            },
	
	            _getLocalStorageId: function(id) {
	                var baseStorageId = super_._getLocalStorageId(id),
	                    bucketName = upload.bucket.getName(id);
	
	                return baseStorageId + "-" + bucketName;
	            }
	        };
	    });
	};
	
	/*globals qq */
	/**
	 * Upload handler used by the upload to S3 module that assumes the current user agent does not have any support for the
	 * File API, and, therefore, makes use of iframes and forms to submit the files directly to S3 buckets via the associated
	 * AWS API.
	 *
	 * @param options Options passed from the base handler
	 * @param proxy Callbacks & methods used to query for or push out data/changes
	 */
	qq.s3.FormUploadHandler = function(options, proxy) {
	    "use strict";
	
	    var handler = this,
	        clockDrift = options.clockDrift,
	        onUuidChanged = proxy.onUuidChanged,
	        getName = proxy.getName,
	        getUuid = proxy.getUuid,
	        log = proxy.log,
	        onGetBucket = options.getBucket,
	        onGetKeyName = options.getKeyName,
	        filenameParam = options.filenameParam,
	        paramsStore = options.paramsStore,
	        endpointStore = options.endpointStore,
	        aclStore = options.aclStore,
	        reducedRedundancy = options.objectProperties.reducedRedundancy,
	        region = options.objectProperties.region,
	        serverSideEncryption = options.objectProperties.serverSideEncryption,
	        validation = options.validation,
	        signature = options.signature,
	        successRedirectUrl = options.iframeSupport.localBlankPagePath,
	        credentialsProvider = options.signature.credentialsProvider,
	        getSignatureAjaxRequester = new qq.s3.RequestSigner({
	            signatureSpec: signature,
	            cors: options.cors,
	            log: log
	        });
	
	    if (successRedirectUrl === undefined) {
	        throw new Error("successRedirectEndpoint MUST be defined if you intend to use browsers that do not support the File API!");
	    }
	
	    /**
	     * Attempt to parse the contents of an iframe after receiving a response from the server.  If the contents cannot be
	     * read (perhaps due to a security error) it is safe to assume that the upload was not successful since Amazon should
	     * have redirected to a known endpoint that should provide a parseable response.
	     *
	     * @param id ID of the associated file
	     * @param iframe target of the form submit
	     * @returns {boolean} true if the contents can be read, false otherwise
	     */
	    function isValidResponse(id, iframe) {
	        var response,
	            endpoint = options.endpointStore.get(id),
	            bucket = handler._getFileState(id).bucket,
	            doc,
	            innerHtml,
	            responseData;
	
	        //IE may throw an "access is denied" error when attempting to access contentDocument on the iframe in some cases
	        try {
	            // iframe.contentWindow.document - for IE<7
	            doc = iframe.contentDocument || iframe.contentWindow.document;
	            innerHtml = doc.body.innerHTML;
	
	            responseData = qq.s3.util.parseIframeResponse(iframe);
	            if (responseData.bucket === bucket &&
	                responseData.key === qq.s3.util.encodeQueryStringParam(handler.getThirdPartyFileId(id))) {
	
	                return true;
	            }
	
	            log("Response from AWS included an unexpected bucket or key name.", "error");
	
	        }
	        catch (error) {
	            log("Error when attempting to parse form upload response (" + error.message + ")", "error");
	        }
	
	        return false;
	    }
	
	    function generateAwsParams(id) {
	        /*jshint -W040 */
	        var customParams = paramsStore.get(id);
	
	        customParams[filenameParam] = getName(id);
	
	        return qq.s3.util.generateAwsParams({
	            endpoint: endpointStore.get(id),
	            clockDrift: clockDrift,
	            params: customParams,
	            bucket: handler._getFileState(id).bucket,
	            key: handler.getThirdPartyFileId(id),
	            accessKey: credentialsProvider.get().accessKey,
	            sessionToken: credentialsProvider.get().sessionToken,
	            acl: aclStore.get(id),
	            minFileSize: validation.minSizeLimit,
	            maxFileSize: validation.maxSizeLimit,
	            successRedirectUrl: successRedirectUrl,
	            reducedRedundancy: reducedRedundancy,
	            region: region,
	            serverSideEncryption: serverSideEncryption,
	            signatureVersion: signature.version,
	            log: log
	        },
	        qq.bind(getSignatureAjaxRequester.getSignature, this, id));
	    }
	
	    /**
	     * Creates form, that will be submitted to iframe
	     */
	    function createForm(id, iframe) {
	        var promise = new qq.Promise(),
	            method = "POST",
	            endpoint = options.endpointStore.get(id),
	            fileName = getName(id);
	
	        generateAwsParams(id).then(function(params) {
	            var form = handler._initFormForUpload({
	                method: method,
	                endpoint: endpoint,
	                params: params,
	                paramsInBody: true,
	                targetName: iframe.name
	            });
	
	            promise.success(form);
	        }, function(errorMessage) {
	            promise.failure(errorMessage);
	            handleFinishedUpload(id, iframe, fileName, {error: errorMessage});
	        });
	
	        return promise;
	    }
	
	    function handleUpload(id) {
	        var iframe = handler._createIframe(id),
	            input = handler.getInput(id),
	            promise = new qq.Promise();
	
	        createForm(id, iframe).then(function(form) {
	            form.appendChild(input);
	
	            // Register a callback when the response comes in from S3
	            handler._attachLoadEvent(iframe, function(response) {
	                log("iframe loaded");
	
	                // If the common response handler has determined success or failure immediately
	                if (response) {
	                    // If there is something fundamentally wrong with the response (such as iframe content is not accessible)
	                    if (response.success === false) {
	                        log("Amazon likely rejected the upload request", "error");
	                        promise.failure(response);
	                    }
	                }
	                // The generic response (iframe onload) handler was not able to make a determination regarding the success of the request
	                else {
	                    response = {};
	                    response.success = isValidResponse(id, iframe);
	
	                    // If the more specific response handle detected a problem with the response from S3
	                    if (response.success === false) {
	                        log("A success response was received by Amazon, but it was invalid in some way.", "error");
	                        promise.failure(response);
	                    }
	                    else {
	                        qq.extend(response, qq.s3.util.parseIframeResponse(iframe));
	                        promise.success(response);
	                    }
	                }
	
	                handleFinishedUpload(id, iframe);
	            });
	
	            log("Sending upload request for " + id);
	            form.submit();
	            qq(form).remove();
	        }, promise.failure);
	
	        return promise;
	    }
	
	    function handleFinishedUpload(id, iframe) {
	        handler._detachLoadEvent(id);
	        iframe && qq(iframe).remove();
	    }
	
	    qq.extend(this, new qq.FormUploadHandler({
	        options: {
	            isCors: false,
	            inputName: "file"
	        },
	
	        proxy: {
	            onCancel: options.onCancel,
	            onUuidChanged: onUuidChanged,
	            getName: getName,
	            getUuid: getUuid,
	            log: log
	        }
	    }));
	
	    qq.extend(this, {
	        uploadFile: function(id) {
	            var name = getName(id),
	                promise = new qq.Promise();
	
	            if (handler.getThirdPartyFileId(id)) {
	                if (handler._getFileState(id).bucket) {
	                    handleUpload(id).then(promise.success, promise.failure);
	                }
	                else {
	                    onGetBucket(id).then(function(bucket) {
	                        handler._getFileState(id).bucket = bucket;
	                        handleUpload(id).then(promise.success, promise.failure);
	                    });
	                }
	            }
	            else {
	                // The S3 uploader module will either calculate the key or ask the server for it
	                // and will call us back once it is known.
	                onGetKeyName(id, name).then(function(key) {
	                    onGetBucket(id).then(function(bucket) {
	                        handler._getFileState(id).bucket = bucket;
	                        handler._setThirdPartyFileId(id, key);
	                        handleUpload(id).then(promise.success, promise.failure);
	                    }, function(errorReason) {
	                        promise.failure({error: errorReason});
	                    });
	                }, function(errorReason) {
	                    promise.failure({error: errorReason});
	                });
	            }
	
	            return promise;
	        }
	    });
	};
	
	/*globals qq */
	/**
	 * This defines FineUploader mode w/ support for uploading to S3, which provides all the basic
	 * functionality of Fine Uploader as well as code to handle uploads directly to S3.
	 * This module inherits all logic from FineUploader mode and FineUploaderBasicS3 mode and adds some UI-related logic
	 * specific to the upload-to-S3 workflow.  Some inherited options and API methods have a special meaning
	 * in the context of the S3 uploader.
	 */
	(function() {
	    "use strict";
	
	    qq.s3.FineUploader = function(o) {
	        var options = {
	            failedUploadTextDisplay: {
	                mode: "custom"
	            }
	        };
	
	        // Replace any default options with user defined ones
	        qq.extend(options, o, true);
	
	        // Inherit instance data from FineUploader, which should in turn inherit from s3.FineUploaderBasic.
	        qq.FineUploader.call(this, options, "s3");
	
	        if (!qq.supportedFeatures.ajaxUploading && options.iframeSupport.localBlankPagePath === undefined) {
	            this._options.element.innerHTML = "<div>You MUST set the <code>localBlankPagePath</code> property " +
	                "of the <code>iframeSupport</code> option since this browser does not support the File API!</div>";
	        }
	    };
	
	    // Inherit the API methods from FineUploaderBasicS3
	    qq.extend(qq.s3.FineUploader.prototype, qq.s3.FineUploaderBasic.prototype);
	
	    // Inherit public and private API methods related to UI
	    qq.extend(qq.s3.FineUploader.prototype, qq.uiPublicApi);
	    qq.extend(qq.s3.FineUploader.prototype, qq.uiPrivateApi);
	}());
	
	/*globals qq*/
	qq.PasteSupport = function(o) {
	    "use strict";
	
	    var options, detachPasteHandler;
	
	    options = {
	        targetElement: null,
	        callbacks: {
	            log: function(message, level) {},
	            pasteReceived: function(blob) {}
	        }
	    };
	
	    function isImage(item) {
	        return item.type &&
	            item.type.indexOf("image/") === 0;
	    }
	
	    function registerPasteHandler() {
	        detachPasteHandler = qq(options.targetElement).attach("paste", function(event) {
	            var clipboardData = event.clipboardData;
	
	            if (clipboardData) {
	                qq.each(clipboardData.items, function(idx, item) {
	                    if (isImage(item)) {
	                        var blob = item.getAsFile();
	                        options.callbacks.pasteReceived(blob);
	                    }
	                });
	            }
	        });
	    }
	
	    function unregisterPasteHandler() {
	        if (detachPasteHandler) {
	            detachPasteHandler();
	        }
	    }
	
	    qq.extend(options, o);
	    registerPasteHandler();
	
	    qq.extend(this, {
	        reset: function() {
	            unregisterPasteHandler();
	        }
	    });
	};
	
	/*globals qq, document, CustomEvent*/
	qq.DragAndDrop = function(o) {
	    "use strict";
	
	    var options,
	        HIDE_ZONES_EVENT_NAME = "qq-hidezones",
	        HIDE_BEFORE_ENTER_ATTR = "qq-hide-dropzone",
	        uploadDropZones = [],
	        droppedFiles = [],
	        disposeSupport = new qq.DisposeSupport();
	
	    options = {
	        dropZoneElements: [],
	        allowMultipleItems: true,
	        classes: {
	            dropActive: null
	        },
	        callbacks: new qq.DragAndDrop.callbacks()
	    };
	
	    qq.extend(options, o, true);
	
	    function uploadDroppedFiles(files, uploadDropZone) {
	        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues
	        var filesAsArray = Array.prototype.slice.call(files);
	
	        options.callbacks.dropLog("Grabbed " + files.length + " dropped files.");
	        uploadDropZone.dropDisabled(false);
	        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());
	    }
	
	    function traverseFileTree(entry) {
	        var parseEntryPromise = new qq.Promise();
	
	        if (entry.isFile) {
	            entry.file(function(file) {
	                var name = entry.name,
	                    fullPath = entry.fullPath,
	                    indexOfNameInFullPath = fullPath.indexOf(name);
	
	                // remove file name from full path string
	                fullPath = fullPath.substr(0, indexOfNameInFullPath);
	
	                // remove leading slash in full path string
	                if (fullPath.charAt(0) === "/") {
	                    fullPath = fullPath.substr(1);
	                }
	
	                file.qqPath = fullPath;
	                droppedFiles.push(file);
	                parseEntryPromise.success();
	            },
	            function(fileError) {
	                options.callbacks.dropLog("Problem parsing '" + entry.fullPath + "'.  FileError code " + fileError.code + ".", "error");
	                parseEntryPromise.failure();
	            });
	        }
	        else if (entry.isDirectory) {
	            getFilesInDirectory(entry).then(
	                function allEntriesRead(entries) {
	                    var entriesLeft = entries.length;
	
	                    qq.each(entries, function(idx, entry) {
	                        traverseFileTree(entry).done(function() {
	                            entriesLeft -= 1;
	
	                            if (entriesLeft === 0) {
	                                parseEntryPromise.success();
	                            }
	                        });
	                    });
	
	                    if (!entries.length) {
	                        parseEntryPromise.success();
	                    }
	                },
	
	                function readFailure(fileError) {
	                    options.callbacks.dropLog("Problem parsing '" + entry.fullPath + "'.  FileError code " + fileError.code + ".", "error");
	                    parseEntryPromise.failure();
	                }
	            );
	        }
	
	        return parseEntryPromise;
	    }
	
	    // Promissory.  Guaranteed to read all files in the root of the passed directory.
	    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {
	        var promise = existingPromise || new qq.Promise(),
	            dirReader = reader || entry.createReader();
	
	        dirReader.readEntries(
	            function readSuccess(entries) {
	                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;
	
	                if (entries.length) {
	                    setTimeout(function() { // prevent stack oveflow, however unlikely
	                        getFilesInDirectory(entry, dirReader, newEntries, promise);
	                    }, 0);
	                }
	                else {
	                    promise.success(newEntries);
	                }
	            },
	
	            promise.failure
	        );
	
	        return promise;
	    }
	
	    function handleDataTransfer(dataTransfer, uploadDropZone) {
	        var pendingFolderPromises = [],
	            handleDataTransferPromise = new qq.Promise();
	
	        options.callbacks.processingDroppedFiles();
	        uploadDropZone.dropDisabled(true);
	
	        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {
	            options.callbacks.processingDroppedFilesComplete([]);
	            options.callbacks.dropError("tooManyFilesError", "");
	            uploadDropZone.dropDisabled(false);
	            handleDataTransferPromise.failure();
	        }
	        else {
	            droppedFiles = [];
	
	            if (qq.isFolderDropSupported(dataTransfer)) {
	                qq.each(dataTransfer.items, function(idx, item) {
	                    var entry = item.webkitGetAsEntry();
	
	                    if (entry) {
	                        //due to a bug in Chrome's File System API impl - #149735
	                        if (entry.isFile) {
	                            droppedFiles.push(item.getAsFile());
	                        }
	
	                        else {
	                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {
	                                pendingFolderPromises.pop();
	                                if (pendingFolderPromises.length === 0) {
	                                    handleDataTransferPromise.success();
	                                }
	                            }));
	                        }
	                    }
	                });
	            }
	            else {
	                droppedFiles = dataTransfer.files;
	            }
	
	            if (pendingFolderPromises.length === 0) {
	                handleDataTransferPromise.success();
	            }
	        }
	
	        return handleDataTransferPromise;
	    }
	
	    function setupDropzone(dropArea) {
	        var dropZone = new qq.UploadDropZone({
	            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,
	            element: dropArea,
	            onEnter: function(e) {
	                qq(dropArea).addClass(options.classes.dropActive);
	                e.stopPropagation();
	            },
	            onLeaveNotDescendants: function(e) {
	                qq(dropArea).removeClass(options.classes.dropActive);
	            },
	            onDrop: function(e) {
	                handleDataTransfer(e.dataTransfer, dropZone).then(
	                    function() {
	                        uploadDroppedFiles(droppedFiles, dropZone);
	                    },
	                    function() {
	                        options.callbacks.dropLog("Drop event DataTransfer parsing failed.  No files will be uploaded.", "error");
	                    }
	                );
	            }
	        });
	
	        disposeSupport.addDisposer(function() {
	            dropZone.dispose();
	        });
	
	        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();
	
	        uploadDropZones.push(dropZone);
	
	        return dropZone;
	    }
	
	    function isFileDrag(dragEvent) {
	        var fileDrag;
	
	        qq.each(dragEvent.dataTransfer.types, function(key, val) {
	            if (val === "Files") {
	                fileDrag = true;
	                return false;
	            }
	        });
	
	        return fileDrag;
	    }
	
	    // Attempt to determine when the file has left the document.  It is not always possible to detect this
	    // in all cases, but it is generally possible in all browsers, with a few exceptions.
	    //
	    // Exceptions:
	    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file
	    //                   overlays the browser window.
	    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the
	    //          event's X & Y properties.
	    function leavingDocumentOut(e) {
	        if (qq.firefox()) {
	            return !e.relatedTarget;
	        }
	
	        if (qq.safari()) {
	            return e.x < 0 || e.y < 0;
	        }
	
	        return e.x === 0 && e.y === 0;
	    }
	
	    function setupDragDrop() {
	        var dropZones = options.dropZoneElements,
	
	            maybeHideDropZones = function() {
	                setTimeout(function() {
	                    qq.each(dropZones, function(idx, dropZone) {
	                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();
	                        qq(dropZone).removeClass(options.classes.dropActive);
	                    });
	                }, 10);
	            };
	
	        qq.each(dropZones, function(idx, dropZone) {
	            var uploadDropZone = setupDropzone(dropZone);
	
	            // IE <= 9 does not support the File API used for drag+drop uploads
	            if (dropZones.length && qq.supportedFeatures.fileDrop) {
	                disposeSupport.attach(document, "dragenter", function(e) {
	                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {
	                        qq.each(dropZones, function(idx, dropZone) {
	                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.
	                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.
	                            if (dropZone instanceof HTMLElement &&
	                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {
	
	                                qq(dropZone).css({display: "block"});
	                            }
	                        });
	                    }
	                });
	            }
	        });
	
	        disposeSupport.attach(document, "dragleave", function(e) {
	            if (leavingDocumentOut(e)) {
	                maybeHideDropZones();
	            }
	        });
	
	        // Just in case we were not able to detect when a dragged file has left the document,
	        // hide all relevant drop zones the next time the mouse enters the document.
	        // Note that mouse events such as this one are not fired during drag operations.
	        disposeSupport.attach(qq(document).children()[0], "mouseenter", function(e) {
	            maybeHideDropZones();
	        });
	
	        disposeSupport.attach(document, "drop", function(e) {
	            e.preventDefault();
	            maybeHideDropZones();
	        });
	
	        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);
	    }
	
	    setupDragDrop();
	
	    qq.extend(this, {
	        setupExtraDropzone: function(element) {
	            options.dropZoneElements.push(element);
	            setupDropzone(element);
	        },
	
	        removeDropzone: function(element) {
	            var i,
	                dzs = options.dropZoneElements;
	
	            for (i in dzs) {
	                if (dzs[i] === element) {
	                    return dzs.splice(i, 1);
	                }
	            }
	        },
	
	        dispose: function() {
	            disposeSupport.dispose();
	            qq.each(uploadDropZones, function(idx, dropZone) {
	                dropZone.dispose();
	            });
	        }
	    });
	};
	
	qq.DragAndDrop.callbacks = function() {
	    "use strict";
	
	    return {
	        processingDroppedFiles: function() {},
	        processingDroppedFilesComplete: function(files, targetEl) {},
	        dropError: function(code, errorSpecifics) {
	            qq.log("Drag & drop error code '" + code + " with these specifics: '" + errorSpecifics + "'", "error");
	        },
	        dropLog: function(message, level) {
	            qq.log(message, level);
	        }
	    };
	};
	
	qq.UploadDropZone = function(o) {
	    "use strict";
	
	    var disposeSupport = new qq.DisposeSupport(),
	        options, element, preventDrop, dropOutsideDisabled;
	
	    options = {
	        element: null,
	        onEnter: function(e) {},
	        onLeave: function(e) {},
	        // is not fired when leaving element by hovering descendants
	        onLeaveNotDescendants: function(e) {},
	        onDrop: function(e) {}
	    };
	
	    qq.extend(options, o);
	    element = options.element;
	
	    function dragoverShouldBeCanceled() {
	        return qq.safari() || (qq.firefox() && qq.windows());
	    }
	
	    function disableDropOutside(e) {
	        // run only once for all instances
	        if (!dropOutsideDisabled) {
	
	            // for these cases we need to catch onDrop to reset dropArea
	            if (dragoverShouldBeCanceled) {
	                disposeSupport.attach(document, "dragover", function(e) {
	                    e.preventDefault();
	                });
	            } else {
	                disposeSupport.attach(document, "dragover", function(e) {
	                    if (e.dataTransfer) {
	                        e.dataTransfer.dropEffect = "none";
	                        e.preventDefault();
	                    }
	                });
	            }
	
	            dropOutsideDisabled = true;
	        }
	    }
	
	    function isValidFileDrag(e) {
	        // e.dataTransfer currently causing IE errors
	        // IE9 does NOT support file API, so drag-and-drop is not possible
	        if (!qq.supportedFeatures.fileDrop) {
	            return false;
	        }
	
	        var effectTest, dt = e.dataTransfer,
	        // do not check dt.types.contains in webkit, because it crashes safari 4
	        isSafari = qq.safari();
	
	        // dt.effectAllowed is none in Safari 5
	        // dt.types.contains check is for firefox
	
	        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from
	        // the filesystem
	        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== "none";
	        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains("Files")));
	    }
	
	    function isOrSetDropDisabled(isDisabled) {
	        if (isDisabled !== undefined) {
	            preventDrop = isDisabled;
	        }
	        return preventDrop;
	    }
	
	    function triggerHidezonesEvent() {
	        var hideZonesEvent;
	
	        function triggerUsingOldApi() {
	            hideZonesEvent = document.createEvent("Event");
	            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);
	        }
	
	        if (window.CustomEvent) {
	            try {
	                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);
	            }
	            catch (err) {
	                triggerUsingOldApi();
	            }
	        }
	        else {
	            triggerUsingOldApi();
	        }
	
	        document.dispatchEvent(hideZonesEvent);
	    }
	
	    function attachEvents() {
	        disposeSupport.attach(element, "dragover", function(e) {
	            if (!isValidFileDrag(e)) {
	                return;
	            }
	
	            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from
	            // the filesystem
	            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;
	            if (effect === "move" || effect === "linkMove") {
	                e.dataTransfer.dropEffect = "move"; // for FF (only move allowed)
	            } else {
	                e.dataTransfer.dropEffect = "copy"; // for Chrome
	            }
	
	            e.stopPropagation();
	            e.preventDefault();
	        });
	
	        disposeSupport.attach(element, "dragenter", function(e) {
	            if (!isOrSetDropDisabled()) {
	                if (!isValidFileDrag(e)) {
	                    return;
	                }
	                options.onEnter(e);
	            }
	        });
	
	        disposeSupport.attach(element, "dragleave", function(e) {
	            if (!isValidFileDrag(e)) {
	                return;
	            }
	
	            options.onLeave(e);
	
	            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);
	            // do not fire when moving a mouse over a descendant
	            if (qq(this).contains(relatedTarget)) {
	                return;
	            }
	
	            options.onLeaveNotDescendants(e);
	        });
	
	        disposeSupport.attach(element, "drop", function(e) {
	            if (!isOrSetDropDisabled()) {
	                if (!isValidFileDrag(e)) {
	                    return;
	                }
	
	                e.preventDefault();
	                e.stopPropagation();
	                options.onDrop(e);
	
	                triggerHidezonesEvent();
	            }
	        });
	    }
	
	    disableDropOutside();
	    attachEvents();
	
	    qq.extend(this, {
	        dropDisabled: function(isDisabled) {
	            return isOrSetDropDisabled(isDisabled);
	        },
	
	        dispose: function() {
	            disposeSupport.dispose();
	        },
	
	        getElement: function() {
	            return element;
	        }
	    });
	};
	
	/*globals qq, XMLHttpRequest*/
	qq.DeleteFileAjaxRequester = function(o) {
	    "use strict";
	
	    var requester,
	        options = {
	            method: "DELETE",
	            uuidParamName: "qquuid",
	            endpointStore: {},
	            maxConnections: 3,
	            customHeaders: function(id) {return {};},
	            paramsStore: {},
	            cors: {
	                expected: false,
	                sendCredentials: false
	            },
	            log: function(str, level) {},
	            onDelete: function(id) {},
	            onDeleteComplete: function(id, xhrOrXdr, isError) {}
	        };
	
	    qq.extend(options, o);
	
	    function getMandatedParams() {
	        if (options.method.toUpperCase() === "POST") {
	            return {
	                _method: "DELETE"
	            };
	        }
	
	        return {};
	    }
	
	    requester = qq.extend(this, new qq.AjaxRequester({
	        acceptHeader: "application/json",
	        validMethods: ["POST", "DELETE"],
	        method: options.method,
	        endpointStore: options.endpointStore,
	        paramsStore: options.paramsStore,
	        mandatedParams: getMandatedParams(),
	        maxConnections: options.maxConnections,
	        customHeaders: function(id) {
	            return options.customHeaders.get(id);
	        },
	        log: options.log,
	        onSend: options.onDelete,
	        onComplete: options.onDeleteComplete,
	        cors: options.cors
	    }));
	
	    qq.extend(this, {
	        sendDelete: function(id, uuid, additionalMandatedParams) {
	            var additionalOptions = additionalMandatedParams || {};
	
	            options.log("Submitting delete file request for " + id);
	
	            if (options.method === "DELETE") {
	                requester.initTransport(id)
	                    .withPath(uuid)
	                    .withParams(additionalOptions)
	                    .send();
	            }
	            else {
	                additionalOptions[options.uuidParamName] = uuid;
	                requester.initTransport(id)
	                    .withParams(additionalOptions)
	                    .send();
	            }
	        }
	    });
	};
	
	/*global qq, define */
	/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */
	/**
	 * Mega pixel image rendering library for iOS6+
	 *
	 * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),
	 * which causes unexpected subsampling when drawing it in canvas.
	 * By using this library, you can safely render the image with proper stretching.
	 *
	 * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>
	 * Released under the MIT license
	 *
	 * Heavily modified by Widen for Fine Uploader
	 */
	(function() {
	
	    /**
	     * Detect subsampling in loaded image.
	     * In iOS, larger images than 2M pixels may be subsampled in rendering.
	     */
	    function detectSubsampling(img) {
	        var iw = img.naturalWidth,
	            ih = img.naturalHeight,
	            canvas = document.createElement("canvas"),
	            ctx;
	
	        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image
	            canvas.width = canvas.height = 1;
	            ctx = canvas.getContext("2d");
	            ctx.drawImage(img, -iw + 1, 0);
	            // subsampled image becomes half smaller in rendering size.
	            // check alpha channel value to confirm image is covering edge pixel or not.
	            // if alpha value is 0 image is not covering, hence subsampled.
	            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;
	        } else {
	            return false;
	        }
	    }
	
	    /**
	     * Detecting vertical squash in loaded image.
	     * Fixes a bug which squash image vertically while drawing into canvas for some images.
	     */
	    function detectVerticalSquash(img, iw, ih) {
	        var canvas = document.createElement("canvas"),
	            sy = 0,
	            ey = ih,
	            py = ih,
	            ctx, data, alpha, ratio;
	
	        canvas.width = 1;
	        canvas.height = ih;
	        ctx = canvas.getContext("2d");
	        ctx.drawImage(img, 0, 0);
	        data = ctx.getImageData(0, 0, 1, ih).data;
	
	        // search image edge pixel position in case it is squashed vertically.
	        while (py > sy) {
	            alpha = data[(py - 1) * 4 + 3];
	            if (alpha === 0) {
	                ey = py;
	            } else {
	                sy = py;
	            }
	            py = (ey + sy) >> 1;
	        }
	
	        ratio = (py / ih);
	        return (ratio === 0) ? 1 : ratio;
	    }
	
	    /**
	     * Rendering image element (with resizing) and get its data URL
	     */
	    function renderImageToDataURL(img, options, doSquash) {
	        var canvas = document.createElement("canvas"),
	            mime = options.mime || "image/jpeg";
	
	        renderImageToCanvas(img, canvas, options, doSquash);
	        return canvas.toDataURL(mime, options.quality || 0.8);
	    }
	
	    function maybeCalculateDownsampledDimensions(spec) {
	        var maxPixels = 5241000; //iOS specific value
	
	        if (!qq.ios()) {
	            throw new qq.Error("Downsampled dimensions can only be reliably calculated for iOS!");
	        }
	
	        if (spec.origHeight * spec.origWidth > maxPixels) {
	            return {
	                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),
	                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))
	            }
	        }
	    }
	
	    /**
	     * Rendering image element (with resizing) into the canvas element
	     */
	    function renderImageToCanvas(img, canvas, options, doSquash) {
	        var iw = img.naturalWidth,
	            ih = img.naturalHeight,
	            width = options.width,
	            height = options.height,
	            ctx = canvas.getContext("2d"),
	            modifiedDimensions;
	
	        ctx.save();
	
	        if (!qq.supportedFeatures.unlimitedScaledImageSize) {
	            modifiedDimensions = maybeCalculateDownsampledDimensions({
	                origWidth: width,
	                origHeight: height
	            });
	
	            if (modifiedDimensions) {
	                qq.log(qq.format("Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h",
	                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),
	                "warn");
	
	                width = modifiedDimensions.newWidth;
	                height = modifiedDimensions.newHeight;
	            }
	        }
	
	        transformCoordinate(canvas, width, height, options.orientation);
	
	        // Fine Uploader specific: Save some CPU cycles if not using iOS
	        // Assumption: This logic is only needed to overcome iOS image sampling issues
	        if (qq.ios()) {
	            (function() {
	                if (detectSubsampling(img)) {
	                    iw /= 2;
	                    ih /= 2;
	                }
	
	                var d = 1024, // size of tiling canvas
	                    tmpCanvas = document.createElement("canvas"),
	                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,
	                    dw = Math.ceil(d * width / iw),
	                    dh = Math.ceil(d * height / ih / vertSquashRatio),
	                    sy = 0,
	                    dy = 0,
	                    tmpCtx, sx, dx;
	
	                tmpCanvas.width = tmpCanvas.height = d;
	                tmpCtx = tmpCanvas.getContext("2d");
	
	                while (sy < ih) {
	                    sx = 0,
	                    dx = 0;
	                    while (sx < iw) {
	                        tmpCtx.clearRect(0, 0, d, d);
	                        tmpCtx.drawImage(img, -sx, -sy);
	                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);
	                        sx += d;
	                        dx += dw;
	                    }
	                    sy += d;
	                    dy += dh;
	                }
	                ctx.restore();
	                tmpCanvas = tmpCtx = null;
	            }())
	        }
	        else {
	            ctx.drawImage(img, 0, 0, width, height);
	        }
	
	        canvas.qqImageRendered && canvas.qqImageRendered();
	    }
	
	    /**
	     * Transform canvas coordination according to specified frame size and orientation
	     * Orientation value is from EXIF tag
	     */
	    function transformCoordinate(canvas, width, height, orientation) {
	        switch (orientation) {
	            case 5:
	            case 6:
	            case 7:
	            case 8:
	                canvas.width = height;
	                canvas.height = width;
	                break;
	            default:
	                canvas.width = width;
	                canvas.height = height;
	        }
	        var ctx = canvas.getContext("2d");
	        switch (orientation) {
	            case 2:
	                // horizontal flip
	                ctx.translate(width, 0);
	                ctx.scale(-1, 1);
	                break;
	            case 3:
	                // 180 rotate left
	                ctx.translate(width, height);
	                ctx.rotate(Math.PI);
	                break;
	            case 4:
	                // vertical flip
	                ctx.translate(0, height);
	                ctx.scale(1, -1);
	                break;
	            case 5:
	                // vertical flip + 90 rotate right
	                ctx.rotate(0.5 * Math.PI);
	                ctx.scale(1, -1);
	                break;
	            case 6:
	                // 90 rotate right
	                ctx.rotate(0.5 * Math.PI);
	                ctx.translate(0, -height);
	                break;
	            case 7:
	                // horizontal flip + 90 rotate right
	                ctx.rotate(0.5 * Math.PI);
	                ctx.translate(width, -height);
	                ctx.scale(-1, 1);
	                break;
	            case 8:
	                // 90 rotate left
	                ctx.rotate(-0.5 * Math.PI);
	                ctx.translate(-width, 0);
	                break;
	            default:
	                break;
	        }
	    }
	
	    /**
	     * MegaPixImage class
	     */
	    function MegaPixImage(srcImage, errorCallback) {
	        var self = this;
	
	        if (window.Blob && srcImage instanceof Blob) {
	            (function() {
	                var img = new Image(),
	                    URL = window.URL && window.URL.createObjectURL ? window.URL :
	                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;
	                if (!URL) { throw Error("No createObjectURL function found to create blob url"); }
	                img.src = URL.createObjectURL(srcImage);
	                self.blob = srcImage;
	                srcImage = img;
	            }());
	        }
	        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {
	            srcImage.onload = function() {
	                var listeners = self.imageLoadListeners;
	                if (listeners) {
	                    self.imageLoadListeners = null;
	                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,
	                    // so let's push this to the end of the UI thread queue.
	                    setTimeout(function() {
	                        for (var i = 0, len = listeners.length; i < len; i++) {
	                            listeners[i]();
	                        }
	                    }, 0);
	                }
	            };
	            srcImage.onerror = errorCallback;
	            this.imageLoadListeners = [];
	        }
	        this.srcImage = srcImage;
	    }
	
	    /**
	     * Rendering megapix image into specified target element
	     */
	    MegaPixImage.prototype.render = function(target, options) {
	        options = options || {};
	
	        var self = this,
	            imgWidth = this.srcImage.naturalWidth,
	            imgHeight = this.srcImage.naturalHeight,
	            width = options.width,
	            height = options.height,
	            maxWidth = options.maxWidth,
	            maxHeight = options.maxHeight,
	            doSquash = !this.blob || this.blob.type === "image/jpeg",
	            tagName = target.tagName.toLowerCase(),
	            opt;
	
	        if (this.imageLoadListeners) {
	            this.imageLoadListeners.push(function() { self.render(target, options) });
	            return;
	        }
	
	        if (width && !height) {
	            height = (imgHeight * width / imgWidth) << 0;
	        } else if (height && !width) {
	            width = (imgWidth * height / imgHeight) << 0;
	        } else {
	            width = imgWidth;
	            height = imgHeight;
	        }
	        if (maxWidth && width > maxWidth) {
	            width = maxWidth;
	            height = (imgHeight * width / imgWidth) << 0;
	        }
	        if (maxHeight && height > maxHeight) {
	            height = maxHeight;
	            width = (imgWidth * height / imgHeight) << 0;
	        }
	
	        opt = { width: width, height: height },
	        qq.each(options, function(optionsKey, optionsValue) {
	            opt[optionsKey] = optionsValue;
	        });
	
	        if (tagName === "img") {
	            (function() {
	                var oldTargetSrc = target.src;
	                target.src = renderImageToDataURL(self.srcImage, opt, doSquash);
	                oldTargetSrc === target.src && target.onload();
	            }())
	        } else if (tagName === "canvas") {
	            renderImageToCanvas(this.srcImage, target, opt, doSquash);
	        }
	        if (typeof this.onrender === "function") {
	            this.onrender(target);
	        }
	    };
	
	    qq.MegaPixImage = MegaPixImage;
	})();
	
	/*globals qq */
	/**
	 * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.
	 *
	 * @constructor
	 */
	qq.ImageGenerator = function(log) {
	    "use strict";
	
	    function isImg(el) {
	        return el.tagName.toLowerCase() === "img";
	    }
	
	    function isCanvas(el) {
	        return el.tagName.toLowerCase() === "canvas";
	    }
	
	    function isImgCorsSupported() {
	        return new Image().crossOrigin !== undefined;
	    }
	
	    function isCanvasSupported() {
	        var canvas = document.createElement("canvas");
	
	        return canvas.getContext && canvas.getContext("2d");
	    }
	
	    // This is only meant to determine the MIME type of a renderable image file.
	    // It is used to ensure images drawn from a URL that have transparent backgrounds
	    // are rendered correctly, among other things.
	    function determineMimeOfFileName(nameWithPath) {
	        /*jshint -W015 */
	        var pathSegments = nameWithPath.split("/"),
	            name = pathSegments[pathSegments.length - 1],
	            extension = qq.getExtension(name);
	
	        extension = extension && extension.toLowerCase();
	
	        switch (extension) {
	            case "jpeg":
	            case "jpg":
	                return "image/jpeg";
	            case "png":
	                return "image/png";
	            case "bmp":
	                return "image/bmp";
	            case "gif":
	                return "image/gif";
	            case "tiff":
	            case "tif":
	                return "image/tiff";
	        }
	    }
	
	    // This will likely not work correctly in IE8 and older.
	    // It's only used as part of a formula to determine
	    // if a canvas can be used to scale a server-hosted thumbnail.
	    // If canvas isn't supported by the UA (IE8 and older)
	    // this method should not even be called.
	    function isCrossOrigin(url) {
	        var targetAnchor = document.createElement("a"),
	            targetProtocol, targetHostname, targetPort;
	
	        targetAnchor.href = url;
	
	        targetProtocol = targetAnchor.protocol;
	        targetPort = targetAnchor.port;
	        targetHostname = targetAnchor.hostname;
	
	        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {
	            return true;
	        }
	
	        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {
	            return true;
	        }
	
	        // IE doesn't take ports into consideration when determining if two endpoints are same origin.
	        if (targetPort !== window.location.port && !qq.ie()) {
	            return true;
	        }
	
	        return false;
	    }
	
	    function registerImgLoadListeners(img, promise) {
	        img.onload = function() {
	            img.onload = null;
	            img.onerror = null;
	            promise.success(img);
	        };
	
	        img.onerror = function() {
	            img.onload = null;
	            img.onerror = null;
	            log("Problem drawing thumbnail!", "error");
	            promise.failure(img, "Problem drawing thumbnail!");
	        };
	    }
	
	    function registerCanvasDrawImageListener(canvas, promise) {
	        // The image is drawn on the canvas by a third-party library,
	        // and we want to know when this is completed.  Since the library
	        // may invoke drawImage many times in a loop, we need to be called
	        // back when the image is fully rendered.  So, we are expecting the
	        // code that draws this image to follow a convention that involves a
	        // function attached to the canvas instance be invoked when it is done.
	        canvas.qqImageRendered = function() {
	            promise.success(canvas);
	        };
	    }
	
	    // Fulfills a `qq.Promise` when an image has been drawn onto the target,
	    // whether that is a <canvas> or an <img>.  The attempt is considered a
	    // failure if the target is not an <img> or a <canvas>, or if the drawing
	    // attempt was not successful.
	    function registerThumbnailRenderedListener(imgOrCanvas, promise) {
	        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);
	
	        if (isImg(imgOrCanvas)) {
	            registerImgLoadListeners(imgOrCanvas, promise);
	        }
	        else if (isCanvas(imgOrCanvas)) {
	            registerCanvasDrawImageListener(imgOrCanvas, promise);
	        }
	        else {
	            promise.failure(imgOrCanvas);
	            log(qq.format("Element container of type {} is not supported!", imgOrCanvas.tagName), "error");
	        }
	
	        return registered;
	    }
	
	    // Draw a preview iff the current UA can natively display it.
	    // Also rotate the image if necessary.
	    function draw(fileOrBlob, container, options) {
	        var drawPreview = new qq.Promise(),
	            identifier = new qq.Identify(fileOrBlob, log),
	            maxSize = options.maxSize,
	            // jshint eqnull:true
	            orient = options.orient == null ? true : options.orient,
	            megapixErrorHandler = function() {
	                container.onerror = null;
	                container.onload = null;
	                log("Could not render preview, file may be too large!", "error");
	                drawPreview.failure(container, "Browser cannot render image!");
	            };
	
	        identifier.isPreviewable().then(
	            function(mime) {
	                // If options explicitly specify that Orientation is not desired,
	                // replace the orient task with a dummy promise that "succeeds" immediately.
	                var dummyExif = {
	                        parse: function() {
	                            return new qq.Promise().success();
	                        }
	                    },
	                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,
	                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);
	
	                if (registerThumbnailRenderedListener(container, drawPreview)) {
	                    exif.parse().then(
	                        function(exif) {
	                            var orientation = exif && exif.Orientation;
	
	                            mpImg.render(container, {
	                                maxWidth: maxSize,
	                                maxHeight: maxSize,
	                                orientation: orientation,
	                                mime: mime
	                            });
	                        },
	
	                        function(failureMsg) {
	                            log(qq.format("EXIF data could not be parsed ({}).  Assuming orientation = 1.", failureMsg));
	
	                            mpImg.render(container, {
	                                maxWidth: maxSize,
	                                maxHeight: maxSize,
	                                mime: mime
	                            });
	                        }
	                    );
	                }
	            },
	
	            function() {
	                log("Not previewable");
	                drawPreview.failure(container, "Not previewable");
	            }
	        );
	
	        return drawPreview;
	    }
	
	    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize) {
	        var tempImg = new Image(),
	            tempImgRender = new qq.Promise();
	
	        registerThumbnailRenderedListener(tempImg, tempImgRender);
	
	        if (isCrossOrigin(url)) {
	            tempImg.crossOrigin = "anonymous";
	        }
	
	        tempImg.src = url;
	
	        tempImgRender.then(
	            function rendered() {
	                registerThumbnailRenderedListener(canvasOrImg, draw);
	
	                var mpImg = new qq.MegaPixImage(tempImg);
	                mpImg.render(canvasOrImg, {
	                    maxWidth: maxSize,
	                    maxHeight: maxSize,
	                    mime: determineMimeOfFileName(url)
	                });
	            },
	
	            draw.failure
	        );
	    }
	
	    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {
	        registerThumbnailRenderedListener(img, draw);
	        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images
	        // that must drop back to CSS is known and exploited by the templating module.
	        // In this module, we pre-render "waiting" thumbs for all files immediately after they
	        // are submitted, and we must be sure to pass any style associated with the "waiting" preview.
	        qq(img).css({
	            maxWidth: maxSize + "px",
	            maxHeight: maxSize + "px"
	        });
	
	        img.src = url;
	    }
	
	    // Draw a (server-hosted) thumbnail given a URL.
	    // This will optionally scale the thumbnail as well.
	    // It attempts to use <canvas> to scale, but will fall back
	    // to max-width and max-height style properties if the UA
	    // doesn't support canvas or if the images is cross-domain and
	    // the UA doesn't support the crossorigin attribute on img tags,
	    // which is required to scale a cross-origin image using <canvas> &
	    // then export it back to an <img>.
	    function drawFromUrl(url, container, options) {
	        var draw = new qq.Promise(),
	            scale = options.scale,
	            maxSize = scale ? options.maxSize : null;
	
	        // container is an img, scaling needed
	        if (scale && isImg(container)) {
	            // Iff canvas is available in this UA, try to use it for scaling.
	            // Otherwise, fall back to CSS scaling
	            if (isCanvasSupported()) {
	                // Attempt to use <canvas> for image scaling,
	                // but we must fall back to scaling via CSS/styles
	                // if this is a cross-origin image and the UA doesn't support <img> CORS.
	                if (isCrossOrigin(url) && !isImgCorsSupported()) {
	                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);
	                }
	                else {
	                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);
	                }
	            }
	            else {
	                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);
	            }
	        }
	        // container is a canvas, scaling optional
	        else if (isCanvas(container)) {
	            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);
	        }
	        // container is an img & no scaling: just set the src attr to the passed url
	        else if (registerThumbnailRenderedListener(container, draw)) {
	            container.src = url;
	        }
	
	        return draw;
	    }
	
	    qq.extend(this, {
	        /**
	         * Generate a thumbnail.  Depending on the arguments, this may either result in
	         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated
	         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).
	         *
	         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image
	         * @param container <img> or <canvas> to contain the preview
	         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), and `resize` (bool - default true)
	         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed
	         */
	        generate: function(fileBlobOrUrl, container, options) {
	            if (qq.isString(fileBlobOrUrl)) {
	                log("Attempting to update thumbnail based on server response.");
	                return drawFromUrl(fileBlobOrUrl, container, options || {});
	            }
	            else {
	                log("Attempting to draw client-side image preview.");
	                return draw(fileBlobOrUrl, container, options || {});
	            }
	        }
	    });
	
	};
	
	/*globals qq */
	/**
	 * EXIF image data parser.  Currently only parses the Orientation tag value,
	 * but this may be expanded to other tags in the future.
	 *
	 * @param fileOrBlob Attempt to parse EXIF data in this `Blob`
	 * @constructor
	 */
	qq.Exif = function(fileOrBlob, log) {
	    "use strict";
	
	    // Orientation is the only tag parsed here at this time.
	    var TAG_IDS = [274],
	        TAG_INFO = {
	            274: {
	                name: "Orientation",
	                bytes: 2
	            }
	        };
	
	    // Convert a little endian (hex string) to big endian (decimal).
	    function parseLittleEndian(hex) {
	        var result = 0,
	            pow = 0;
	
	        while (hex.length > 0) {
	            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);
	            hex = hex.substring(2, hex.length);
	            pow += 8;
	        }
	
	        return result;
	    }
	
	    // Find the byte offset, of Application Segment 1 (EXIF).
	    // External callers need not supply any arguments.
	    function seekToApp1(offset, promise) {
	        var theOffset = offset,
	            thePromise = promise;
	        if (theOffset === undefined) {
	            theOffset = 2;
	            thePromise = new qq.Promise();
	        }
	
	        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {
	            var match = /^ffe([0-9])/.exec(hex),
	                segmentLength;
	
	            if (match) {
	                if (match[1] !== "1") {
	                    segmentLength = parseInt(hex.slice(4, 8), 16);
	                    seekToApp1(theOffset + segmentLength + 2, thePromise);
	                }
	                else {
	                    thePromise.success(theOffset);
	                }
	            }
	            else {
	                thePromise.failure("No EXIF header to be found!");
	            }
	        });
	
	        return thePromise;
	    }
	
	    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.
	    function getApp1Offset() {
	        var promise = new qq.Promise();
	
	        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {
	            if (hex.indexOf("ffd8") !== 0) {
	                promise.failure("Not a valid JPEG!");
	            }
	            else {
	                seekToApp1().then(function(offset) {
	                    promise.success(offset);
	                },
	                function(error) {
	                    promise.failure(error);
	                });
	            }
	        });
	
	        return promise;
	    }
	
	    // Determine the byte ordering of the EXIF header.
	    function isLittleEndian(app1Start) {
	        var promise = new qq.Promise();
	
	        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {
	            promise.success(hex === "4949");
	        });
	
	        return promise;
	    }
	
	    // Determine the number of directory entries in the EXIF header.
	    function getDirEntryCount(app1Start, littleEndian) {
	        var promise = new qq.Promise();
	
	        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {
	            if (littleEndian) {
	                return promise.success(parseLittleEndian(hex));
	            }
	            else {
	                promise.success(parseInt(hex, 16));
	            }
	        });
	
	        return promise;
	    }
	
	    // Get the IFD portion of the EXIF header as a hex string.
	    function getIfd(app1Start, dirEntries) {
	        var offset = app1Start + 20,
	            bytes = dirEntries * 12;
	
	        return qq.readBlobToHex(fileOrBlob, offset, bytes);
	    }
	
	    // Obtain an array of all directory entries (as hex strings) in the EXIF header.
	    function getDirEntries(ifdHex) {
	        var entries = [],
	            offset = 0;
	
	        while (offset + 24 <= ifdHex.length) {
	            entries.push(ifdHex.slice(offset, offset + 24));
	            offset += 24;
	        }
	
	        return entries;
	    }
	
	    // Obtain values for all relevant tags and return them.
	    function getTagValues(littleEndian, dirEntries) {
	        var TAG_VAL_OFFSET = 16,
	            tagsToFind = qq.extend([], TAG_IDS),
	            vals = {};
	
	        qq.each(dirEntries, function(idx, entry) {
	            var idHex = entry.slice(0, 4),
	                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),
	                tagsToFindIdx = tagsToFind.indexOf(id),
	                tagValHex, tagName, tagValLength;
	
	            if (tagsToFindIdx >= 0) {
	                tagName = TAG_INFO[id].name;
	                tagValLength = TAG_INFO[id].bytes;
	                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));
	                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);
	
	                tagsToFind.splice(tagsToFindIdx, 1);
	            }
	
	            if (tagsToFind.length === 0) {
	                return false;
	            }
	        });
	
	        return vals;
	    }
	
	    qq.extend(this, {
	        /**
	         * Attempt to parse the EXIF header for the `Blob` associated with this instance.
	         *
	         * @returns {qq.Promise} To be fulfilled when the parsing is complete.
	         * If successful, the parsed EXIF header as an object will be included.
	         */
	        parse: function() {
	            var parser = new qq.Promise(),
	                onParseFailure = function(message) {
	                    log(qq.format("EXIF header parse failed: '{}' ", message));
	                    parser.failure(message);
	                };
	
	            getApp1Offset().then(function(app1Offset) {
	                log(qq.format("Moving forward with EXIF header parsing for '{}'", fileOrBlob.name === undefined ? "blob" : fileOrBlob.name));
	
	                isLittleEndian(app1Offset).then(function(littleEndian) {
	
	                    log(qq.format("EXIF Byte order is {} endian", littleEndian ? "little" : "big"));
	
	                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {
	
	                        log(qq.format("Found {} APP1 directory entries", dirEntryCount));
	
	                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {
	                            var dirEntries = getDirEntries(ifdHex),
	                                tagValues = getTagValues(littleEndian, dirEntries);
	
	                            log("Successfully parsed some EXIF tags");
	
	                            parser.success(tagValues);
	                        }, onParseFailure);
	                    }, onParseFailure);
	                }, onParseFailure);
	            }, onParseFailure);
	
	            return parser;
	        }
	    });
	
	};
	
	/*globals qq */
	qq.Identify = function(fileOrBlob, log) {
	    "use strict";
	
	    function isIdentifiable(magicBytes, questionableBytes) {
	        var identifiable = false,
	            magicBytesEntries = [].concat(magicBytes);
	
	        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {
	            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {
	                identifiable = true;
	                return false;
	            }
	        });
	
	        return identifiable;
	    }
	
	    qq.extend(this, {
	        /**
	         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic
	         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the
	         * file, we will examine the blob's type attribute to save CPU cycles.
	         *
	         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.
	         * If successful, the MIME string is passed to the success handler.
	         */
	        isPreviewable: function() {
	            var self = this,
	                idenitifer = new qq.Promise(),
	                previewable = false,
	                name = fileOrBlob.name === undefined ? "blob" : fileOrBlob.name;
	
	            log(qq.format("Attempting to determine if {} can be rendered in this browser", name));
	
	            log("First pass: check type attribute of blob object.");
	
	            if (this.isPreviewableSync()) {
	                log("Second pass: check for magic bytes in file header.");
	
	                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {
	                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {
	                        if (isIdentifiable(bytes, hex)) {
	                            // Safari is the only supported browser that can deal with TIFFs natively,
	                            // so, if this is a TIFF and the UA isn't Safari, declare this file "non-previewable".
	                            if (mime !== "image/tiff" || qq.supportedFeatures.tiffPreviews) {
	                                previewable = true;
	                                idenitifer.success(mime);
	                            }
	
	                            return false;
	                        }
	                    });
	
	                    log(qq.format("'{}' is {} able to be rendered in this browser", name, previewable ? "" : "NOT"));
	
	                    if (!previewable) {
	                        idenitifer.failure();
	                    }
	                },
	                function() {
	                    log("Error reading file w/ name '" + name + "'.  Not able to be rendered in this browser.");
	                    idenitifer.failure();
	                });
	            }
	            else {
	                idenitifer.failure();
	            }
	
	            return idenitifer;
	        },
	
	        /**
	         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the
	         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation
	         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the
	         * file's magic bytes.
	         *
	         * @returns {Boolean} true if the blob can be rendered in the current browser
	         */
	        isPreviewableSync: function() {
	            var fileMime = fileOrBlob.type,
	                // Assumption: This will only ever be executed in browsers that support `Object.keys`.
	                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,
	                previewable = false,
	                name = fileOrBlob.name === undefined ? "blob" : fileOrBlob.name;
	
	            if (isRecognizedImage) {
	                if (fileMime === "image/tiff") {
	                    previewable = qq.supportedFeatures.tiffPreviews;
	                }
	                else {
	                    previewable = true;
	                }
	            }
	
	            !previewable && log(name + " is not previewable in this browser per the blob's type attr");
	
	            return previewable;
	        }
	    });
	};
	
	qq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {
	    "image/jpeg": "ffd8ff",
	    "image/gif": "474946",
	    "image/png": "89504e",
	    "image/bmp": "424d",
	    "image/tiff": ["49492a00", "4d4d002a"]
	};
	
	/*globals qq*/
	/**
	 * Attempts to validate an image, wherever possible.
	 *
	 * @param blob File or Blob representing a user-selecting image.
	 * @param log Uses this to post log messages to the console.
	 * @constructor
	 */
	qq.ImageValidation = function(blob, log) {
	    "use strict";
	
	    /**
	     * @param limits Object with possible image-related limits to enforce.
	     * @returns {boolean} true if at least one of the limits has a non-zero value
	     */
	    function hasNonZeroLimits(limits) {
	        var atLeastOne = false;
	
	        qq.each(limits, function(limit, value) {
	            if (value > 0) {
	                atLeastOne = true;
	                return false;
	            }
	        });
	
	        return atLeastOne;
	    }
	
	    /**
	     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.
	     * Otherwise, `success` is called on the returned promise with an object containing
	     * `width` and `height` properties.
	     */
	    function getWidthHeight() {
	        var sizeDetermination = new qq.Promise();
	
	        new qq.Identify(blob, log).isPreviewable().then(function() {
	            var image = new Image(),
	                url = window.URL && window.URL.createObjectURL ? window.URL :
	                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :
	                      null;
	
	            if (url) {
	                image.onerror = function() {
	                    log("Cannot determine dimensions for image.  May be too large.", "error");
	                    sizeDetermination.failure();
	                };
	
	                image.onload = function() {
	                    sizeDetermination.success({
	                        width: this.width,
	                        height: this.height
	                    });
	                };
	
	                image.src = url.createObjectURL(blob);
	            }
	            else {
	                log("No createObjectURL function available to generate image URL!", "error");
	                sizeDetermination.failure();
	            }
	        }, sizeDetermination.failure);
	
	        return sizeDetermination;
	    }
	
	    /**
	     *
	     * @param limits Object with possible image-related limits to enforce.
	     * @param dimensions Object containing `width` & `height` properties for the image to test.
	     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.
	     */
	    function getFailingLimit(limits, dimensions) {
	        var failingLimit;
	
	        qq.each(limits, function(limitName, limitValue) {
	            if (limitValue > 0) {
	                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),
	                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),
	                    actualValue = dimensions[dimensionPropName];
	
	                /*jshint -W015*/
	                switch (limitMatcher[1]) {
	                    case "min":
	                        if (actualValue < limitValue) {
	                            failingLimit = limitName;
	                            return false;
	                        }
	                        break;
	                    case "max":
	                        if (actualValue > limitValue) {
	                            failingLimit = limitName;
	                            return false;
	                        }
	                        break;
	                }
	            }
	        });
	
	        return failingLimit;
	    }
	
	    /**
	     * Validate the associated blob.
	     *
	     * @param limits
	     * @returns {qq.Promise} `success` is called on the promise is the image is valid or
	     * if the blob is not an image, or if the image is not verifiable.
	     * Otherwise, `failure` with the name of the failing limit.
	     */
	    this.validate = function(limits) {
	        var validationEffort = new qq.Promise();
	
	        log("Attempting to validate image.");
	
	        if (hasNonZeroLimits(limits)) {
	            getWidthHeight().then(function(dimensions) {
	                var failingLimit = getFailingLimit(limits, dimensions);
	
	                if (failingLimit) {
	                    validationEffort.failure(failingLimit);
	                }
	                else {
	                    validationEffort.success();
	                }
	            }, validationEffort.success);
	        }
	        else {
	            validationEffort.success();
	        }
	
	        return validationEffort;
	    };
	};
	
	/* globals qq */
	/**
	 * Module used to control populating the initial list of files.
	 *
	 * @constructor
	 */
	qq.Session = function(spec) {
	    "use strict";
	
	    var options = {
	        endpoint: null,
	        params: {},
	        customHeaders: {},
	        cors: {},
	        addFileRecord: function(sessionData) {},
	        log: function(message, level) {}
	    };
	
	    qq.extend(options, spec, true);
	
	    function isJsonResponseValid(response) {
	        if (qq.isArray(response)) {
	            return true;
	        }
	
	        options.log("Session response is not an array.", "error");
	    }
	
	    function handleFileItems(fileItems, success, xhrOrXdr, promise) {
	        var someItemsIgnored = false;
	
	        success = success && isJsonResponseValid(fileItems);
	
	        if (success) {
	            qq.each(fileItems, function(idx, fileItem) {
	                /* jshint eqnull:true */
	                if (fileItem.uuid == null) {
	                    someItemsIgnored = true;
	                    options.log(qq.format("Session response item {} did not include a valid UUID - ignoring.", idx), "error");
	                }
	                else if (fileItem.name == null) {
	                    someItemsIgnored = true;
	                    options.log(qq.format("Session response item {} did not include a valid name - ignoring.", idx), "error");
	                }
	                else {
	                    try {
	                        options.addFileRecord(fileItem);
	                        return true;
	                    }
	                    catch (err) {
	                        someItemsIgnored = true;
	                        options.log(err.message, "error");
	                    }
	                }
	
	                return false;
	            });
	        }
	
	        promise[success && !someItemsIgnored ? "success" : "failure"](fileItems, xhrOrXdr);
	    }
	
	    // Initiate a call to the server that will be used to populate the initial file list.
	    // Returns a `qq.Promise`.
	    this.refresh = function() {
	        /*jshint indent:false */
	        var refreshEffort = new qq.Promise(),
	            refreshCompleteCallback = function(response, success, xhrOrXdr) {
	                handleFileItems(response, success, xhrOrXdr, refreshEffort);
	            },
	            requsterOptions = qq.extend({}, options),
	            requester = new qq.SessionAjaxRequester(
	                qq.extend(requsterOptions, {onComplete: refreshCompleteCallback})
	            );
	
	        requester.queryServer();
	
	        return refreshEffort;
	    };
	};
	
	/*globals qq, XMLHttpRequest*/
	/**
	 * Thin module used to send GET requests to the server, expecting information about session
	 * data used to initialize an uploader instance.
	 *
	 * @param spec Various options used to influence the associated request.
	 * @constructor
	 */
	qq.SessionAjaxRequester = function(spec) {
	    "use strict";
	
	    var requester,
	        options = {
	            endpoint: null,
	            customHeaders: {},
	            params: {},
	            cors: {
	                expected: false,
	                sendCredentials: false
	            },
	            onComplete: function(response, success, xhrOrXdr) {},
	            log: function(str, level) {}
	        };
	
	    qq.extend(options, spec);
	
	    function onComplete(id, xhrOrXdr, isError) {
	        var response = null;
	
	        /* jshint eqnull:true */
	        if (xhrOrXdr.responseText != null) {
	            try {
	                response = qq.parseJson(xhrOrXdr.responseText);
	            }
	            catch (err) {
	                options.log("Problem parsing session response: " + err.message, "error");
	                isError = true;
	            }
	        }
	
	        options.onComplete(response, !isError, xhrOrXdr);
	    }
	
	    requester = qq.extend(this, new qq.AjaxRequester({
	        acceptHeader: "application/json",
	        validMethods: ["GET"],
	        method: "GET",
	        endpointStore: {
	            get: function() {
	                return options.endpoint;
	            }
	        },
	        customHeaders: options.customHeaders,
	        log: options.log,
	        onComplete: onComplete,
	        cors: options.cors
	    }));
	
	    qq.extend(this, {
	        queryServer: function() {
	            var params = qq.extend({}, options.params);
	
	            options.log("Session query request.");
	
	            requester.initTransport("sessionRefresh")
	                .withParams(params)
	                .withCacheBuster()
	                .send();
	        }
	    });
	};
	
	/* globals qq */
	/**
	 * Module that handles support for existing forms.
	 *
	 * @param options Options passed from the integrator-supplied options related to form support.
	 * @param startUpload Callback to invoke when files "stored" should be uploaded.
	 * @param log Proxy for the logger
	 * @constructor
	 */
	qq.FormSupport = function(options, startUpload, log) {
	    "use strict";
	    var self  = this,
	        interceptSubmit = options.interceptSubmit,
	        formEl = options.element,
	        autoUpload = options.autoUpload;
	
	    // Available on the public API associated with this module.
	    qq.extend(this, {
	        // To be used by the caller to determine if the endpoint will be determined by some processing
	        // that occurs in this module, such as if the form has an action attribute.
	        // Ignore if `attachToForm === false`.
	        newEndpoint: null,
	
	        // To be used by the caller to determine if auto uploading should be allowed.
	        // Ignore if `attachToForm === false`.
	        newAutoUpload: autoUpload,
	
	        // true if a form was detected and is being tracked by this module
	        attachedToForm: false,
	
	        // Returns an object with names and values for all valid form elements associated with the attached form.
	        getFormInputsAsObject: function() {
	            /* jshint eqnull:true */
	            if (formEl == null) {
	                return null;
	            }
	
	            return self._form2Obj(formEl);
	        }
	    });
	
	    // If the form contains an action attribute, this should be the new upload endpoint.
	    function determineNewEndpoint(formEl) {
	        if (formEl.getAttribute("action")) {
	            self.newEndpoint = formEl.getAttribute("action");
	        }
	    }
	
	    // Return true only if the form is valid, or if we cannot make this determination.
	    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.
	    function validateForm(formEl, nativeSubmit) {
	        if (formEl.checkValidity && !formEl.checkValidity()) {
	            log("Form did not pass validation checks - will not upload.", "error");
	            nativeSubmit();
	        }
	        else {
	            return true;
	        }
	    }
	
	    // Intercept form submit attempts, unless the integrator has told us not to do this.
	    function maybeUploadOnSubmit(formEl) {
	        var nativeSubmit = formEl.submit;
	
	        // Intercept and squelch submit events.
	        qq(formEl).attach("submit", function(event) {
	            event = event || window.event;
	
	            if (event.preventDefault) {
	                event.preventDefault();
	            }
	            else {
	                event.returnValue = false;
	            }
	
	            validateForm(formEl, nativeSubmit) && startUpload();
	        });
	
	        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).
	        // Intercept that too.
	        formEl.submit = function() {
	            validateForm(formEl, nativeSubmit) && startUpload();
	        };
	    }
	
	    // If the element value passed from the uploader is a string, assume it is an element ID - select it.
	    // The rest of the code in this module depends on this being an HTMLElement.
	    function determineFormEl(formEl) {
	        if (formEl) {
	            if (qq.isString(formEl)) {
	                formEl = document.getElementById(formEl);
	            }
	
	            if (formEl) {
	                log("Attaching to form element.");
	                determineNewEndpoint(formEl);
	                interceptSubmit && maybeUploadOnSubmit(formEl);
	            }
	        }
	
	        return formEl;
	    }
	
	    formEl = determineFormEl(formEl);
	    this.attachedToForm = !!formEl;
	};
	
	qq.extend(qq.FormSupport.prototype, {
	    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will
	    // construct from a given form when the form is submitted.
	    _form2Obj: function(form) {
	        "use strict";
	        var obj = {},
	            notIrrelevantType = function(type) {
	                var irrelevantTypes = [
	                    "button",
	                    "image",
	                    "reset",
	                    "submit"
	                ];
	
	                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;
	            },
	            radioOrCheckbox = function(type) {
	                return qq.indexOf(["checkbox", "radio"], type.toLowerCase()) >= 0;
	            },
	            ignoreValue = function(el) {
	                if (radioOrCheckbox(el.type) && !el.checked) {
	                    return true;
	                }
	
	                return el.disabled && el.type.toLowerCase() !== "hidden";
	            },
	            selectValue = function(select) {
	                var value = null;
	
	                qq.each(qq(select).children(), function(idx, child) {
	                    if (child.tagName.toLowerCase() === "option" && child.selected) {
	                        value = child.value;
	                        return false;
	                    }
	                });
	
	                return value;
	            };
	
	        qq.each(form.elements, function(idx, el) {
	            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === "textarea") &&
	                notIrrelevantType(el.type) &&
	                !ignoreValue(el)) {
	
	                obj[el.name] = el.value;
	            }
	            else if (el.tagName.toLowerCase() === "select" && !ignoreValue(el)) {
	                var value = selectValue(el);
	
	                if (value !== null) {
	                    obj[el.name] = value;
	                }
	            }
	        });
	
	        return obj;
	    }
	});
	
	/* globals qq, ExifRestorer */
	/**
	 * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.
	 * Scaled images are generated and converted to blobs on-demand.
	 * Multiple scaled images per reference image with varying sizes and other properties are supported.
	 *
	 * @param spec Information about the scaled images to generate.
	 * @param log Logger instance
	 * @constructor
	 */
	qq.Scaler = function(spec, log) {
	    "use strict";
	
	    var self = this,
	        includeOriginal = spec.sendOriginal,
	        orient = spec.orient,
	        defaultType = spec.defaultType,
	        defaultQuality = spec.defaultQuality / 100,
	        failedToScaleText = spec.failureText,
	        includeExif = spec.includeExif,
	        sizes = this._getSortedSizes(spec.sizes);
	
	    // Revealed API for instances of this module
	    qq.extend(this, {
	        // If no targeted sizes have been declared or if this browser doesn't support
	        // client-side image preview generation, there is no scaling to do.
	        enabled: qq.supportedFeatures.scaling && sizes.length > 0,
	
	        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {
	            var self = this,
	                records = [],
	                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,
	                idenitifier = new qq.Identify(originalBlob, log);
	
	            // If the reference file cannot be rendered natively, we can't create scaled versions.
	            if (idenitifier.isPreviewableSync()) {
	                // Create records for each scaled version & add them to the records array, smallest first.
	                qq.each(sizes, function(idx, sizeRecord) {
	                    var outputType = self._determineOutputType({
	                        defaultType: defaultType,
	                        requestedType: sizeRecord.type,
	                        refType: originalBlob.type
	                    });
	
	                    records.push({
	                        uuid: qq.getUniqueId(),
	                        name: self._getName(originalFileName, {
	                            name: sizeRecord.name,
	                            type: outputType,
	                            refType: originalBlob.type
	                        }),
	                        blob: new qq.BlobProxy(originalBlob,
	                        qq.bind(self._generateScaledImage, self, {
	                            maxSize: sizeRecord.maxSize,
	                            orient: orient,
	                            type: outputType,
	                            quality: defaultQuality,
	                            failedText: failedToScaleText,
	                            includeExif: includeExif,
	                            log: log
	                        }))
	                    });
	                });
	
	                records.push({
	                    uuid: originalFileUuid,
	                    name: originalFileName,
	                    size: originalBlob.size,
	                    blob: includeOriginal ? originalBlob : null
	                });
	            }
	            else {
	                records.push({
	                    uuid: originalFileUuid,
	                    name: originalFileName,
	                    size: originalBlob.size,
	                    blob: originalBlob
	                });
	            }
	
	            return records;
	        },
	
	        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {
	            var self = this,
	                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),
	                scaledIds = [],
	                originalId = null,
	                addFileToHandler = api.addFileToHandler,
	                uploadData = api.uploadData,
	                paramsStore = api.paramsStore,
	                proxyGroupId = qq.getUniqueId();
	
	            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {
	                var blobSize = record.size,
	                    id;
	
	                if (record.blob instanceof qq.BlobProxy) {
	                    blobSize = -1;
	                }
	
	                id = uploadData.addFile({
	                    uuid: record.uuid,
	                    name: record.name,
	                    size: blobSize,
	                    batchId: batchId,
	                    proxyGroupId: proxyGroupId
	                });
	
	                if (record.blob instanceof qq.BlobProxy) {
	                    scaledIds.push(id);
	                }
	                else {
	                    originalId = id;
	                }
	
	                if (record.blob) {
	                    addFileToHandler(id, record.blob);
	                    fileList.push({id: id, file: record.blob});
	                }
	                else {
	                    uploadData.setStatus(id, qq.status.REJECTED);
	                }
	            });
	
	            // If we are potentially uploading an original file and some scaled versions,
	            // ensure the scaled versions include reference's to the parent's UUID and size
	            // in their associated upload requests.
	            if (originalId !== null) {
	                qq.each(scaledIds, function(idx, scaledId) {
	                    var params = {
	                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,
	                        qqparentsize: uploadData.retrieve({id: originalId}).size
	                    };
	
	                    // Make sure the UUID for each scaled image is sent with the upload request,
	                    // to be consistent (since we may need to ensure it is sent for the original file as well).
	                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;
	
	                    uploadData.setParentId(scaledId, originalId);
	                    paramsStore.addReadOnly(scaledId, params);
	                });
	
	                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request
	                // parameter as well.
	                if (scaledIds.length) {
	                    (function() {
	                        var param = {};
	                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;
	                        paramsStore.addReadOnly(originalId, param);
	                    }());
	                }
	            }
	        }
	    });
	};
	
	qq.extend(qq.Scaler.prototype, {
	    scaleImage: function(id, specs, api) {
	        "use strict";
	
	        if (!qq.supportedFeatures.scaling) {
	            throw new qq.Error("Scaling is not supported in this browser!");
	        }
	
	        var scalingEffort = new qq.Promise(),
	            log = api.log,
	            file = api.getFile(id),
	            uploadData = api.uploadData.retrieve({id: id}),
	            name = uploadData && uploadData.name,
	            uuid = uploadData && uploadData.uuid,
	            scalingOptions = {
	                sendOriginal: false,
	                orient: specs.orient,
	                defaultType: specs.type || null,
	                defaultQuality: specs.quality,
	                failedToScaleText: "Unable to scale",
	                sizes: [{name: "", maxSize: specs.maxSize}]
	            },
	            scaler = new qq.Scaler(scalingOptions, log);
	
	        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {
	            scalingEffort.failure();
	
	            log("Could not generate requested scaled image for " + id + ".  " +
	                "Scaling is either not possible in this browser, or the file could not be located.", "error");
	        }
	        else {
	            (qq.bind(function() {
	                // Assumption: There will never be more than one record
	                var record = scaler.getFileRecords(uuid, name, file)[0];
	
	                if (record && record.blob instanceof qq.BlobProxy) {
	                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);
	                }
	                else {
	                    log(id + " is not a scalable image!", "error");
	                    scalingEffort.failure();
	                }
	            }, this)());
	        }
	
	        return scalingEffort;
	    },
	
	    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.
	    // image/jpeg and image/png are the only safe choices at this time.
	    _determineOutputType: function(spec) {
	        "use strict";
	
	        var requestedType = spec.requestedType,
	            defaultType = spec.defaultType,
	            referenceType = spec.refType;
	
	        // If a default type and requested type have not been specified, this should be a
	        // JPEG if the original type is a JPEG, otherwise, a PNG.
	        if (!defaultType && !requestedType) {
	            if (referenceType !== "image/jpeg") {
	                return "image/png";
	            }
	            return referenceType;
	        }
	
	        // A specified default type is used when a requested type is not specified.
	        if (!requestedType) {
	            return defaultType;
	        }
	
	        // If requested type is specified, use it, as long as this recognized type is supported by the current UA
	        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {
	            if (requestedType === "image/tiff") {
	                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;
	            }
	
	            return requestedType;
	        }
	
	        return defaultType;
	    },
	
	    // Get a file name for a generated scaled file record, based on the provided scaled image description
	    _getName: function(originalName, scaledVersionProperties) {
	        "use strict";
	
	        var startOfExt = originalName.lastIndexOf("."),
	            versionType = scaledVersionProperties.type || "image/png",
	            referenceType = scaledVersionProperties.refType,
	            scaledName = "",
	            scaledExt = qq.getExtension(originalName),
	            nameAppendage = "";
	
	        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {
	            nameAppendage = " (" + scaledVersionProperties.name + ")";
	        }
	
	        if (startOfExt >= 0) {
	            scaledName = originalName.substr(0, startOfExt);
	
	            if (referenceType !== versionType) {
	                scaledExt = versionType.split("/")[1];
	            }
	
	            scaledName += nameAppendage + "." + scaledExt;
	        }
	        else {
	            scaledName = originalName + nameAppendage;
	        }
	
	        return scaledName;
	    },
	
	    // We want the smallest scaled file to be uploaded first
	    _getSortedSizes: function(sizes) {
	        "use strict";
	
	        sizes = qq.extend([], sizes);
	
	        return sizes.sort(function(a, b) {
	            if (a.maxSize > b.maxSize) {
	                return 1;
	            }
	            if (a.maxSize < b.maxSize) {
	                return -1;
	            }
	            return 0;
	        });
	    },
	
	    _generateScaledImage: function(spec, sourceFile) {
	        "use strict";
	
	        var self = this,
	            log = spec.log,
	            maxSize = spec.maxSize,
	            orient = spec.orient,
	            type = spec.type,
	            quality = spec.quality,
	            failedText = spec.failedText,
	            includeExif = spec.includeExif && sourceFile.type === "image/jpeg" && type === "image/jpeg",
	            scalingEffort = new qq.Promise(),
	            imageGenerator = new qq.ImageGenerator(log),
	            canvas = document.createElement("canvas");
	
	        log("Attempting to generate scaled version for " + sourceFile.name);
	
	        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient}).then(function() {
	            var scaledImageDataUri = canvas.toDataURL(type, quality),
	                signalSuccess = function() {
	                    log("Success generating scaled version for " + sourceFile.name);
	                    var blob = qq.dataUriToBlob(scaledImageDataUri);
	                    scalingEffort.success(blob);
	                };
	
	            if (includeExif) {
	                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {
	                    scaledImageDataUri = scaledImageDataUriWithExif;
	                    signalSuccess();
	                },
	                function() {
	                    log("Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.", "error");
	                    signalSuccess();
	                });
	            }
	            else {
	                signalSuccess();
	            }
	        }, function() {
	            log("Failed attempt to generate scaled version for " + sourceFile.name, "error");
	            scalingEffort.failure(failedText);
	        });
	
	        return scalingEffort;
	    },
	
	    // Attempt to insert the original image's EXIF header into a scaled version.
	    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {
	        "use strict";
	
	        var reader = new FileReader(),
	            insertionEffort = new qq.Promise(),
	            originalImageDataUri = "";
	
	        reader.onload = function() {
	            originalImageDataUri = reader.result;
	            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));
	        };
	
	        reader.onerror = function() {
	            log("Problem reading " + originalImage.name + " during attempt to transfer EXIF data to scaled version.", "error");
	            insertionEffort.failure();
	        };
	
	        reader.readAsDataURL(originalImage);
	
	        return insertionEffort;
	    },
	
	    _dataUriToBlob: function(dataUri) {
	        "use strict";
	
	        var byteString, mimeString, arrayBuffer, intArray;
	
	        // convert base64 to raw binary data held in a string
	        if (dataUri.split(",")[0].indexOf("base64") >= 0) {
	            byteString = atob(dataUri.split(",")[1]);
	        }
	        else {
	            byteString = decodeURI(dataUri.split(",")[1]);
	        }
	
	        // extract the MIME
	        mimeString = dataUri.split(",")[0]
	            .split(":")[1]
	            .split(";")[0];
	
	        // write the bytes of the binary string to an ArrayBuffer
	        arrayBuffer = new ArrayBuffer(byteString.length);
	        intArray = new Uint8Array(arrayBuffer);
	        qq.each(byteString, function(idx, character) {
	            intArray[idx] = character.charCodeAt(0);
	        });
	
	        return this._createBlob(arrayBuffer, mimeString);
	    },
	
	    _createBlob: function(data, mime) {
	        "use strict";
	
	        var BlobBuilder = window.BlobBuilder ||
	                window.WebKitBlobBuilder ||
	                window.MozBlobBuilder ||
	                window.MSBlobBuilder,
	            blobBuilder = BlobBuilder && new BlobBuilder();
	
	        if (blobBuilder) {
	            blobBuilder.append(data);
	            return blobBuilder.getBlob(mime);
	        }
	        else {
	            return new Blob([data], {type: mime});
	        }
	    }
	});
	
	//Based on MinifyJpeg
	//http://elicon.blog57.fc2.com/blog-entry-206.html
	
	qq.ExifRestorer = (function()
	{
	   
		var ExifRestorer = {};
		 
	    ExifRestorer.KEY_STR = "ABCDEFGHIJKLMNOP" +
	                         "QRSTUVWXYZabcdef" +
	                         "ghijklmnopqrstuv" +
	                         "wxyz0123456789+/" +
	                         "=";
	
	    ExifRestorer.encode64 = function(input)
	    {
	        var output = "",
	            chr1, chr2, chr3 = "",
	            enc1, enc2, enc3, enc4 = "",
	            i = 0;
	
	        do {
	            chr1 = input[i++];
	            chr2 = input[i++];
	            chr3 = input[i++];
	
	            enc1 = chr1 >> 2;
	            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	            enc4 = chr3 & 63;
	
	            if (isNaN(chr2)) {
	               enc3 = enc4 = 64;
	            } else if (isNaN(chr3)) {
	               enc4 = 64;
	            }
	
	            output = output +
	               this.KEY_STR.charAt(enc1) +
	               this.KEY_STR.charAt(enc2) +
	               this.KEY_STR.charAt(enc3) +
	               this.KEY_STR.charAt(enc4);
	            chr1 = chr2 = chr3 = "";
	            enc1 = enc2 = enc3 = enc4 = "";
	        } while (i < input.length);
	
	        return output;
	    };
	    
	    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)
	    {
	        var expectedBase64Header = "data:image/jpeg;base64,";
	
	        if (!origFileBase64.match(expectedBase64Header))
	        {
	        	return resizedFileBase64;
	        }       
	        
	        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, ""));
	        var segments = this.slice2Segments(rawImage);
	                
	        var image = this.exifManipulation(resizedFileBase64, segments);
	        
	        return expectedBase64Header + this.encode64(image);
	        
	    };
	
	
	    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)
	    {
	            var exifArray = this.getExifArray(segments),
	                newImageArray = this.insertExif(resizedFileBase64, exifArray),
	                aBuffer = new Uint8Array(newImageArray);
	
	            return aBuffer;
	    };
	
	
	    ExifRestorer.getExifArray = function(segments)
	    {
	            var seg;
	            for (var x = 0; x < segments.length; x++)
	            {
	                seg = segments[x];
	                if (seg[0] == 255 & seg[1] == 225) //(ff e1)
	                {
	                    return seg;
	                }
	            }
	            return [];
	    };
	
	
	    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)
	    {
	            var imageData = resizedFileBase64.replace("data:image/jpeg;base64,", ""),
	                buf = this.decode64(imageData),
	                separatePoint = buf.indexOf(255,3),
	                mae = buf.slice(0, separatePoint),
	                ato = buf.slice(separatePoint),
	                array = mae;
	
	            array = array.concat(exifArray);
	            array = array.concat(ato);
	           return array;
	    };
	
	
	    
	    ExifRestorer.slice2Segments = function(rawImageArray)
	    {
	        var head = 0,
	            segments = [];
	
	        while (1)
	        {
	            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}
	            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)
	            {
	                head += 2;
	            }
	            else
	            {
	                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],
	                    endPoint = head + length + 2,
	                    seg = rawImageArray.slice(head, endPoint);
	                segments.push(seg);
	                head = endPoint;
	            }
	            if (head > rawImageArray.length){break;}
	        }
	
	        return segments;
	    };
	
	
	    
	    ExifRestorer.decode64 = function(input) 
	    {
	        var output = "",
	            chr1, chr2, chr3 = "",
	            enc1, enc2, enc3, enc4 = "",
	            i = 0,
	            buf = [];
	
	        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
	        var base64test = /[^A-Za-z0-9\+\/\=]/g;
	        if (base64test.exec(input)) {
	            throw new Error("There were invalid base64 characters in the input text.  " +
	                "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='");
	        }
	        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
	
	        do {
	            enc1 = this.KEY_STR.indexOf(input.charAt(i++));
	            enc2 = this.KEY_STR.indexOf(input.charAt(i++));
	            enc3 = this.KEY_STR.indexOf(input.charAt(i++));
	            enc4 = this.KEY_STR.indexOf(input.charAt(i++));
	
	            chr1 = (enc1 << 2) | (enc2 >> 4);
	            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
	            chr3 = ((enc3 & 3) << 6) | enc4;
	
	            buf.push(chr1);
	
	            if (enc3 != 64) {
	               buf.push(chr2);
	            }
	            if (enc4 != 64) {
	               buf.push(chr3);
	            }
	
	            chr1 = chr2 = chr3 = "";
	            enc1 = enc2 = enc3 = enc4 = "";
	
	        } while (i < input.length);
	
	        return buf;
	    };
	
	    
	    return ExifRestorer;
	})();
	
	/* globals qq */
	/**
	 * Keeps a running tally of total upload progress for a batch of files.
	 *
	 * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.
	 * @param getSize Function that returns the size of a file given its ID
	 * @constructor
	 */
	qq.TotalProgress = function(callback, getSize) {
	    "use strict";
	
	    var perFileProgress = {},
	        totalLoaded = 0,
	        totalSize = 0,
	
	        lastLoadedSent = -1,
	        lastTotalSent = -1,
	        callbackProxy = function(loaded, total) {
	            if (loaded !== lastLoadedSent || total !== lastTotalSent) {
	                callback(loaded, total);
	            }
	
	            lastLoadedSent = loaded;
	            lastTotalSent = total;
	        },
	
	        /**
	         * @param failed Array of file IDs that have failed
	         * @param retryable Array of file IDs that are retryable
	         * @returns true if none of the failed files are eligible for retry
	         */
	        noRetryableFiles = function(failed, retryable) {
	            var none = true;
	
	            qq.each(failed, function(idx, failedId) {
	                if (qq.indexOf(retryable, failedId) >= 0) {
	                    none = false;
	                    return false;
	                }
	            });
	
	            return none;
	        },
	
	        onCancel = function(id) {
	            updateTotalProgress(id, -1, -1);
	            delete perFileProgress[id];
	        },
	
	        onAllComplete = function(successful, failed, retryable) {
	            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {
	                callbackProxy(totalSize, totalSize);
	                this.reset();
	            }
	        },
	
	        onNew = function(id) {
	            var size = getSize(id);
	
	            // We might not know the size yet, such as for blob proxies
	            if (size > 0) {
	                updateTotalProgress(id, 0, size);
	                perFileProgress[id] = {loaded: 0, total: size};
	            }
	        },
	
	        /**
	         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may
	         * be appropriate to re-calculate and dissemenate this data.
	         *
	         * @param id ID of a file that has changed in some important way
	         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations
	         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations
	         */
	        updateTotalProgress = function(id, newLoaded, newTotal) {
	            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,
	                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;
	
	            if (newLoaded === -1 && newTotal === -1) {
	                totalLoaded -= oldLoaded;
	                totalSize -= oldTotal;
	            }
	            else {
	                if (newLoaded) {
	                    totalLoaded += newLoaded - oldLoaded;
	                }
	                if (newTotal) {
	                    totalSize += newTotal - oldTotal;
	                }
	            }
	
	            callbackProxy(totalLoaded, totalSize);
	        };
	
	    qq.extend(this, {
	        // Called when a batch of files has completed uploading.
	        onAllComplete: onAllComplete,
	
	        // Called when the status of a file has changed.
	        onStatusChange: function(id, oldStatus, newStatus) {
	            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {
	                onCancel(id);
	            }
	            else if (newStatus === qq.status.SUBMITTING) {
	                onNew(id);
	            }
	        },
	
	        // Called whenever the upload progress of an individual file has changed.
	        onIndividualProgress: function(id, loaded, total) {
	            updateTotalProgress(id, loaded, total);
	            perFileProgress[id] = {loaded: loaded, total: total};
	        },
	
	        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.
	        onNewSize: function(id) {
	            onNew(id);
	        },
	
	        reset: function() {
	            perFileProgress = {};
	            totalLoaded = 0;
	            totalSize = 0;
	        }
	    });
	};
	
	/*globals qq */
	// Base handler for UI (FineUploader mode) events.
	// Some more specific handlers inherit from this one.
	qq.UiEventHandler = function(s, protectedApi) {
	    "use strict";
	
	    var disposer = new qq.DisposeSupport(),
	        spec = {
	            eventType: "click",
	            attachTo: null,
	            onHandled: function(target, event) {}
	        };
	
	    // This makes up the "public" API methods that will be accessible
	    // to instances constructing a base or child handler
	    qq.extend(this, {
	        addHandler: function(element) {
	            addHandler(element);
	        },
	
	        dispose: function() {
	            disposer.dispose();
	        }
	    });
	
	    function addHandler(element) {
	        disposer.attach(element, spec.eventType, function(event) {
	            // Only in IE: the `event` is a property of the `window`.
	            event = event || window.event;
	
	            // On older browsers, we must check the `srcElement` instead of the `target`.
	            var target = event.target || event.srcElement;
	
	            spec.onHandled(target, event);
	        });
	    }
	
	    // These make up the "protected" API methods that children of this base handler will utilize.
	    qq.extend(protectedApi, {
	        getFileIdFromItem: function(item) {
	            return item.qqFileId;
	        },
	
	        getDisposeSupport: function() {
	            return disposer;
	        }
	    });
	
	    qq.extend(spec, s);
	
	    if (spec.attachTo) {
	        addHandler(spec.attachTo);
	    }
	};
	
	/* global qq */
	qq.FileButtonsClickHandler = function(s) {
	    "use strict";
	
	    var inheritedInternalApi = {},
	        spec = {
	            templating: null,
	            log: function(message, lvl) {},
	            onDeleteFile: function(fileId) {},
	            onCancel: function(fileId) {},
	            onRetry: function(fileId) {},
	            onPause: function(fileId) {},
	            onContinue: function(fileId) {},
	            onGetName: function(fileId) {}
	        },
	        buttonHandlers = {
	            cancel: function(id) { spec.onCancel(id); },
	            retry:  function(id) { spec.onRetry(id); },
	            deleteButton: function(id) { spec.onDeleteFile(id); },
	            pause: function(id) { spec.onPause(id); },
	            continueButton: function(id) { spec.onContinue(id); }
	        };
	
	    function examineEvent(target, event) {
	        qq.each(buttonHandlers, function(buttonType, handler) {
	            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),
	                fileId;
	
	            if (spec.templating["is" + firstLetterCapButtonType](target)) {
	                fileId = spec.templating.getFileId(target);
	                qq.preventDefault(event);
	                spec.log(qq.format("Detected valid file button click event on file '{}', ID: {}.", spec.onGetName(fileId), fileId));
	                handler(fileId);
	                return false;
	            }
	        });
	    }
	
	    qq.extend(spec, s);
	
	    spec.eventType = "click";
	    spec.onHandled = examineEvent;
	    spec.attachTo = spec.templating.getFileList();
	
	    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));
	};
	
	/*globals qq */
	// Child of FilenameEditHandler.  Used to detect click events on filename display elements.
	qq.FilenameClickHandler = function(s) {
	    "use strict";
	
	    var inheritedInternalApi = {},
	        spec = {
	            templating: null,
	            log: function(message, lvl) {},
	            classes: {
	                file: "qq-upload-file",
	                editNameIcon: "qq-edit-filename-icon"
	            },
	            onGetUploadStatus: function(fileId) {},
	            onGetName: function(fileId) {}
	        };
	
	    qq.extend(spec, s);
	
	    // This will be called by the parent handler when a `click` event is received on the list element.
	    function examineEvent(target, event) {
	        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {
	            var fileId = spec.templating.getFileId(target),
	                status = spec.onGetUploadStatus(fileId);
	
	            // We only allow users to change filenames of files that have been submitted but not yet uploaded.
	            if (status === qq.status.SUBMITTED) {
	                spec.log(qq.format("Detected valid filename click event on file '{}', ID: {}.", spec.onGetName(fileId), fileId));
	                qq.preventDefault(event);
	
	                inheritedInternalApi.handleFilenameEdit(fileId, target, true);
	            }
	        }
	    }
	
	    spec.eventType = "click";
	    spec.onHandled = examineEvent;
	
	    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));
	};
	
	/*globals qq */
	// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.
	qq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {
	    "use strict";
	
	    var spec = {
	            templating: null,
	            onGetUploadStatus: function(fileId) {},
	            log: function(message, lvl) {}
	        };
	
	    if (!inheritedInternalApi) {
	        inheritedInternalApi = {};
	    }
	
	    // This will be called by the parent handler when a `focusin` event is received on the list element.
	    function handleInputFocus(target, event) {
	        if (spec.templating.isEditInput(target)) {
	            var fileId = spec.templating.getFileId(target),
	                status = spec.onGetUploadStatus(fileId);
	
	            if (status === qq.status.SUBMITTED) {
	                spec.log(qq.format("Detected valid filename input focus event on file '{}', ID: {}.", spec.onGetName(fileId), fileId));
	                inheritedInternalApi.handleFilenameEdit(fileId, target);
	            }
	        }
	    }
	
	    spec.eventType = "focusin";
	    spec.onHandled = handleInputFocus;
	
	    qq.extend(spec, s);
	    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));
	};
	
	/*globals qq */
	/**
	 * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only
	 * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.
	 *
	 * @param spec Overrides for default specifications
	 */
	qq.FilenameInputFocusHandler = function(spec) {
	    "use strict";
	
	    spec.eventType = "focus";
	    spec.attachTo = null;
	
	    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));
	};
	
	/*globals qq */
	// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.
	// Children will delegate to this handler when specific edit-related actions are detected.
	qq.FilenameEditHandler = function(s, inheritedInternalApi) {
	    "use strict";
	
	    var spec = {
	            templating: null,
	            log: function(message, lvl) {},
	            onGetUploadStatus: function(fileId) {},
	            onGetName: function(fileId) {},
	            onSetName: function(fileId, newName) {},
	            onEditingStatusChange: function(fileId, isEditing) {}
	        };
	
	    function getFilenameSansExtension(fileId) {
	        var filenameSansExt = spec.onGetName(fileId),
	            extIdx = filenameSansExt.lastIndexOf(".");
	
	        if (extIdx > 0) {
	            filenameSansExt = filenameSansExt.substr(0, extIdx);
	        }
	
	        return filenameSansExt;
	    }
	
	    function getOriginalExtension(fileId) {
	        var origName = spec.onGetName(fileId);
	        return qq.getExtension(origName);
	    }
	
	    // Callback iff the name has been changed
	    function handleNameUpdate(newFilenameInputEl, fileId) {
	        var newName = newFilenameInputEl.value,
	            origExtension;
	
	        if (newName !== undefined && qq.trimStr(newName).length > 0) {
	            origExtension = getOriginalExtension(fileId);
	
	            if (origExtension !== undefined) {
	                newName = newName + "." + origExtension;
	            }
	
	            spec.onSetName(fileId, newName);
	        }
	
	        spec.onEditingStatusChange(fileId, false);
	    }
	
	    // The name has been updated if the filename edit input loses focus.
	    function registerInputBlurHandler(inputEl, fileId) {
	        inheritedInternalApi.getDisposeSupport().attach(inputEl, "blur", function() {
	            handleNameUpdate(inputEl, fileId);
	        });
	    }
	
	    // The name has been updated if the user presses enter.
	    function registerInputEnterKeyHandler(inputEl, fileId) {
	        inheritedInternalApi.getDisposeSupport().attach(inputEl, "keyup", function(event) {
	
	            var code = event.keyCode || event.which;
	
	            if (code === 13) {
	                handleNameUpdate(inputEl, fileId);
	            }
	        });
	    }
	
	    qq.extend(spec, s);
	
	    spec.attachTo = spec.templating.getFileList();
	
	    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));
	
	    qq.extend(inheritedInternalApi, {
	        handleFilenameEdit: function(id, target, focusInput) {
	            var newFilenameInputEl = spec.templating.getEditInput(id);
	
	            spec.onEditingStatusChange(id, true);
	
	            newFilenameInputEl.value = getFilenameSansExtension(id);
	
	            if (focusInput) {
	                newFilenameInputEl.focus();
	            }
	
	            registerInputBlurHandler(newFilenameInputEl, id);
	            registerInputEnterKeyHandler(newFilenameInputEl, id);
	        }
	    });
	};
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/**
	 * CryptoJS core components.
	 */
	qq.CryptoJS = (function (Math, undefined) {
	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};
	
	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};
	
	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {
	        function F() {}
	
	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                F.prototype = this;
	                var subtype = new F();
	
	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }
	
	                // Create default initializer
	                if (!subtype.hasOwnProperty('init')) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }
	
	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;
	
	                // Reference supertype
	                subtype.$super = this;
	
	                return subtype;
	            },
	
	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);
	
	                return instance;
	            },
	
	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },
	
	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }
	
	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },
	
	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());
	
	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];
	
	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },
	
	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },
	
	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;
	
	            // Clamp excess bits
	            this.clamp();
	
	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else if (thatWords.length > 0xffff) {
	                // Copy one word at a time
	                for (var i = 0; i < thatSigBytes; i += 4) {
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	                }
	            } else {
	                // Copy all words at once
	                thisWords.push.apply(thisWords, thatWords);
	            }
	            this.sigBytes += thatSigBytes;
	
	            // Chainable
	            return this;
	        },
	
	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;
	
	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },
	
	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);
	
	            return clone;
	        },
	
	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];
	            for (var i = 0; i < nBytes; i += 4) {
	                words.push((Math.random() * 0x100000000) | 0);
	            }
	
	            return new WordArray.init(words, nBytes);
	        }
	    });
	
	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};
	
	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	
	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }
	
	            return hexChars.join('');
	        },
	
	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;
	
	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }
	
	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };
	
	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	
	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }
	
	            return latin1Chars.join('');
	        },
	
	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;
	
	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }
	
	            return new WordArray.init(words, latin1StrLength);
	        }
	    };
	
	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },
	
	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };
	
	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },
	
	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }
	
	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },
	
	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;
	
	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }
	
	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;
	
	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);
	
	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }
	
	                // Remove processed words
	                var processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }
	
	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },
	
	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();
	
	            return clone;
	        },
	
	        _minBufferSize: 0
	    });
	
	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),
	
	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);
	
	            // Set initial values
	            this.reset();
	        },
	
	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);
	
	            // Perform concrete-hasher logic
	            this._doReset();
	        },
	
	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);
	
	            // Update the hash
	            this._process();
	
	            // Chainable
	            return this;
	        },
	
	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }
	
	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();
	
	            return hash;
	        },
	
	        blockSize: 512/32,
	
	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },
	
	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });
	
	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};
	
	    return C;
	}(Math));
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function () {
	    // Shortcuts
	    var C = qq.CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;
	
	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;
	
	            // Clamp excess bits
	            wordArray.clamp();
	
	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;
	
	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;
	
	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }
	
	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }
	
	            return base64Chars.join('');
	        },
	
	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;
	
	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex != -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }
	
	            // Convert
	            var words = [];
	            var nBytes = 0;
	            for (var i = 0; i < base64StrLength; i++) {
	                if (i % 4) {
	                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);
	                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);
	                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
	                    nBytes++;
	                }
	            }
	
	            return WordArray.create(words, nBytes);
	        },
	
	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };
	}());
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function () {
	    // Shortcuts
	    var C = qq.CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;
	
	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();
	
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }
	
	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;
	
	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }
	
	            // Clamp excess bits
	            key.clamp();
	
	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();
	
	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;
	
	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
	
	            // Set initial values
	            this.reset();
	        },
	
	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;
	
	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },
	
	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);
	
	            // Chainable
	            return this;
	        },
	
	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;
	
	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
	
	            return hmac;
	        }
	    });
	}());
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function () {
	    // Shortcuts
	    var C = qq.CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;
	
	    // Reusable object
	    var W = [];
	
	    /**
	     * SHA-1 hash algorithm.
	     */
	    var SHA1 = C_algo.SHA1 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476,
	                0xc3d2e1f0
	            ]);
	        },
	
	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;
	
	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	
	            // Computation
	            for (var i = 0; i < 80; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	                    W[i] = (n << 1) | (n >>> 31);
	                }
	
	                var t = ((a << 5) | (a >>> 27)) + e + W[i];
	                if (i < 20) {
	                    t += ((b & c) | (~b & d)) + 0x5a827999;
	                } else if (i < 40) {
	                    t += (b ^ c ^ d) + 0x6ed9eba1;
	                } else if (i < 60) {
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
	                } else /* if (i < 80) */ {
	                    t += (b ^ c ^ d) - 0x359d3e2a;
	                }
	
	                e = d;
	                d = c;
	                c = (b << 30) | (b >>> 2);
	                b = a;
	                a = t;
	            }
	
	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	        },
	
	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	
	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;
	
	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;
	
	            // Hash final blocks
	            this._process();
	
	            // Return final computed hash
	            return this._hash;
	        },
	
	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();
	
	            return clone;
	        }
	    });
	
	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */
	    C.SHA1 = Hasher._createHelper(SHA1);
	
	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	}());
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function (Math) {
	    // Shortcuts
	    var C = qq.CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;
	
	    // Initialization and round constants tables
	    var H = [];
	    var K = [];
	
	    // Compute constants
	    (function () {
	        function isPrime(n) {
	            var sqrtN = Math.sqrt(n);
	            for (var factor = 2; factor <= sqrtN; factor++) {
	                if (!(n % factor)) {
	                    return false;
	                }
	            }
	
	            return true;
	        }
	
	        function getFractionalBits(n) {
	            return ((n - (n | 0)) * 0x100000000) | 0;
	        }
	
	        var n = 2;
	        var nPrime = 0;
	        while (nPrime < 64) {
	            if (isPrime(n)) {
	                if (nPrime < 8) {
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
	                }
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
	
	                nPrime++;
	            }
	
	            n++;
	        }
	    }());
	
	    // Reusable object
	    var W = [];
	
	    /**
	     * SHA-256 hash algorithm.
	     */
	    var SHA256 = C_algo.SHA256 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init(H.slice(0));
	        },
	
	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;
	
	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	            var f = H[5];
	            var g = H[6];
	            var h = H[7];
	
	            // Computation
	            for (var i = 0; i < 64; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var gamma0x = W[i - 15];
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
	                                   (gamma0x >>> 3);
	
	                    var gamma1x = W[i - 2];
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
	                                   (gamma1x >>> 10);
	
	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
	                }
	
	                var ch  = (e & f) ^ (~e & g);
	                var maj = (a & b) ^ (a & c) ^ (b & c);
	
	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));
	
	                var t1 = h + sigma1 + ch + K[i] + W[i];
	                var t2 = sigma0 + maj;
	
	                h = g;
	                g = f;
	                f = e;
	                e = (d + t1) | 0;
	                d = c;
	                c = b;
	                b = a;
	                a = (t1 + t2) | 0;
	            }
	
	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	            H[5] = (H[5] + f) | 0;
	            H[6] = (H[6] + g) | 0;
	            H[7] = (H[7] + h) | 0;
	        },
	
	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	
	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;
	
	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;
	
	            // Hash final blocks
	            this._process();
	
	            // Return final computed hash
	            return this._hash;
	        },
	
	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();
	
	            return clone;
	        }
	    });
	
	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */
	    C.SHA256 = Hasher._createHelper(SHA256);
	
	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	}(Math));
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function () {
	    // Check if typed arrays are supported
	    if (typeof ArrayBuffer != 'function') {
	        return;
	    }
	
	    // Shortcuts
	    var C = qq.CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	
	    // Reference original init
	    var superInit = WordArray.init;
	
	    // Augment WordArray.init to handle typed arrays
	    var subInit = WordArray.init = function (typedArray) {
	        // Convert buffers to uint8
	        if (typedArray instanceof ArrayBuffer) {
	            typedArray = new Uint8Array(typedArray);
	        }
	
	        // Convert other array views to uint8
	        if (
	            typedArray instanceof Int8Array ||
	            typedArray instanceof Uint8ClampedArray ||
	            typedArray instanceof Int16Array ||
	            typedArray instanceof Uint16Array ||
	            typedArray instanceof Int32Array ||
	            typedArray instanceof Uint32Array ||
	            typedArray instanceof Float32Array ||
	            typedArray instanceof Float64Array
	        ) {
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
	        }
	
	        // Handle Uint8Array
	        if (typedArray instanceof Uint8Array) {
	            // Shortcut
	            var typedArrayByteLength = typedArray.byteLength;
	
	            // Extract bytes
	            var words = [];
	            for (var i = 0; i < typedArrayByteLength; i++) {
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
	            }
	
	            // Initialize this word array
	            superInit.call(this, words, typedArrayByteLength);
	        } else {
	            // Else call normal init
	            superInit.apply(this, arguments);
	        }
	    };
	
	    subInit.prototype = WordArray;
	}());
	if (true) {
	   !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	       return qq;
	   }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	else if (typeof module !== 'undefined' && module.exports) {
	   module.exports = qq;
	}
	else {
	   global.qq = qq;
	}
	}(window));
	
	/*! 2016-05-14 */


/***/ },
/* 221 */
/*!**************************************!*\
  !*** ./~/fine-uploader/lib/rows.css ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../css-loader!./rows.css */ 222);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../style-loader/addStyles.js */ 227)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./rows.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./rows.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 222 */
/*!*****************************************************!*\
  !*** ./~/css-loader!./~/fine-uploader/lib/rows.css ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../css-loader/lib/css-base.js */ 223)();
	// imports
	
	
	// module
	exports.push([module.id, "/*!\n* Fine Uploader\n*\n* Copyright 2013-present, Widen Enterprises, Inc.\n*\n* Version: 5.9.0\n*\n* Homepage: http://fineuploader.com\n*\n* Repository: git://github.com/FineUploader/fine-uploader.git\n*\n* Licensed only under the MIT license (http://fineuploader.com/licensing).\n*/ \n\n\n/* ---------------------------------------\n/* Fine Uploader Styles\n/* ---------------------------------------\n\n/* Buttons\n------------------------------------------ */\n.qq-btn\n{\n    box-shadow: 0 1px 1px rgba(255, 255, 255, 0.37) inset,\n                1px 0 1px rgba(255, 255, 255, 0.07) inset,\n                0 1px 0 rgba(0, 0, 0, 0.36),\n                0 -2px 12px rgba(0, 0, 0, 0.08) inset;\n    padding: 3px 4px;\n    border: 1px solid #CCCCCC;\n    border-radius: 2px;\n    color: inherit;\n    background-color: #FFFFFF;\n}\n.qq-upload-delete, .qq-upload-pause, .qq-upload-continue {\n    display: inline;\n}\n.qq-upload-delete\n{\n    background-color: #e65c47;\n    color: #FAFAFA;\n    border-color: #dc523d;\n    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.55);\n}\n.qq-upload-delete:hover {\n    background-color: #f56b56;\n }\n.qq-upload-cancel\n{\n    background-color: #F5D7D7;\n    border-color: #e6c8c8;\n}\n.qq-upload-cancel:hover {\n    background-color: #ffe1e1;\n}\n.qq-upload-retry\n{\n    background-color: #EBF6E0;\n    border-color: #d2ddc7;\n}\n.qq-upload-retry:hover {\n    background-color: #f7ffec;\n}\n.qq-upload-pause, .qq-upload-continue {\n    background-color: #00ABC7;\n    color: #FAFAFA;\n    border-color: #2dadc2;\n    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.55);\n}\n.qq-upload-pause:hover, .qq-upload-continue:hover {\n    background-color: #0fbad6;\n}\n\n/* Upload Button\n------------------------------------------ */\n.qq-upload-button {\n    display: inline;\n    width: 105px;\n    margin-bottom: 10px;\n    padding: 7px 10px;\n    text-align: center;\n    float: left;\n    background: #00ABC7;\n    color: #FFFFFF;\n    border-radius: 2px;\n    border: 1px solid #2dadc2;\n    box-shadow: 0 1px 1px rgba(255, 255, 255, 0.37) inset,\n                1px 0 1px rgba(255, 255, 255, 0.07) inset,\n                0 1px 0 rgba(0, 0, 0, 0.36),\n                0 -2px 12px rgba(0, 0, 0, 0.08) inset;\n}\n.qq-upload-button-hover {\n    background: #33B6CC;\n}\n.qq-upload-button-focus {\n    outline: 1px dotted #000000;\n}\n\n\n/* Drop Zone\n------------------------------------------ */\n.qq-uploader {\n    position: relative;\n    min-height: 200px;\n    max-height: 490px;\n    overflow-y: hidden;\n    width: inherit;\n    border-radius: 6px;\n    background-color: #FDFDFD;\n    border: 1px dashed #CCCCCC;\n    padding: 20px;\n}\n.qq-uploader:before {\n    content: attr(qq-drop-area-text) \" \";\n    position: absolute;\n    font-size: 200%;\n    left: 0;\n    width: 100%;\n    text-align: center;\n    top: 45%;\n    opacity: 0.25;\n}\n.qq-upload-drop-area, .qq-upload-extra-drop-area {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    min-height: 30px;\n    z-index: 2;\n    background: #F9F9F9;\n    border-radius: 4px;\n    border: 1px dashed #CCCCCC;\n    text-align: center;\n}\n.qq-upload-drop-area span {\n    display: block;\n    position: absolute;\n    top: 50%;\n    width: 100%;\n    margin-top: -8px;\n    font-size: 16px;\n}\n.qq-upload-extra-drop-area {\n    position: relative;\n    margin-top: 50px;\n    font-size: 16px;\n    padding-top: 30px;\n    height: 20px;\n    min-height: 40px;\n}\n.qq-upload-drop-area-active {\n    background: #FDFDFD;\n    border-radius: 4px;\n    border: 1px dashed #CCCCCC;\n}\n.qq-upload-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    max-height: 450px;\n    overflow-y: auto;\n    box-shadow: 0px 1px 0px rgba(15, 15, 50, 0.14);\n    clear: both;\n}\n\n\n/* Uploaded Elements\n------------------------------------------ */\n.qq-upload-list li {\n    margin: 0;\n    padding: 9px;\n    line-height: 15px;\n    font-size: 16px;\n    color: #424242;\n    background-color: #F6F6F6;\n    border-top: 1px solid #FFFFFF;\n    border-bottom: 1px solid #DDDDDD;\n}\n.qq-upload-list li:first-child {\n    border-top: none;\n}\n.qq-upload-list li:last-child {\n    border-bottom: none;\n}\n\n.qq-upload-file, .qq-upload-spinner, .qq-upload-size,\n.qq-upload-cancel, .qq-upload-retry, .qq-upload-failed-text,\n.qq-upload-delete, .qq-upload-pause, .qq-upload-continue {\n    margin-right: 12px;\n    display: inline;\n}\n.qq-upload-file {\n    vertical-align: middle;\n    display: inline-block;\n    width: 300px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow-x: hidden;\n    height: 18px;\n}\n.qq-upload-spinner {\n    display: inline-block;\n    background: url(" + __webpack_require__(/*! ./loading.gif */ 224) + ");\n    width: 15px;\n    height: 15px;\n    vertical-align: text-bottom;\n}\n.qq-drop-processing {\n    display: block;\n}\n.qq-drop-processing-spinner {\n    display: inline-block;\n    background: url(" + __webpack_require__(/*! ./processing.gif */ 225) + ");\n    width: 24px;\n    height: 24px;\n    vertical-align: text-bottom;\n}\n.qq-upload-size, .qq-upload-cancel, .qq-upload-retry,\n.qq-upload-delete, .qq-upload-pause, .qq-upload-continue {\n    font-size: 12px;\n    font-weight: normal;\n    cursor: pointer;\n    vertical-align: middle;\n}\n.qq-upload-status-text {\n    font-size: 14px;\n    font-weight: bold;\n    display: block;\n}\n.qq-upload-failed-text {\n    display: none;\n    font-style: italic;\n    font-weight: bold;\n}\n.qq-upload-failed-icon {\n    display:none;\n    width:15px;\n    height:15px;\n    vertical-align:text-bottom;\n}\n.qq-upload-fail .qq-upload-failed-text {\n    display: inline;\n}\n.qq-upload-retrying .qq-upload-failed-text {\n    display: inline;\n}\n.qq-upload-list li.qq-upload-success {\n    background-color: #EBF6E0;\n    color: #424242;\n    border-bottom: 1px solid #D3DED1;\n    border-top: 1px solid #F7FFF5;\n}\n.qq-upload-list li.qq-upload-fail {\n    background-color: #F5D7D7;\n    color: #424242;\n    border-bottom: 1px solid #DECACA;\n    border-top: 1px solid #FCE6E6;\n}\n.qq-progress-bar {\n    display: block;\n    display: block;\n    background: #00abc7;\n    width: 0%;\n    height: 15px;\n    border-radius: 6px;\n    margin-bottom: 3px;\n}\n\n.qq-total-progress-bar {\n    height: 25px;\n    border-radius: 9px;\n}\n\n.qq-total-progress-bar-container {\n    margin-left: 9px;\n    display: inline;\n    float: right;\n    width: 500px;\n}\n\nINPUT.qq-edit-filename {\n    position: absolute;\n    opacity: 0;\n    filter: alpha(opacity=0);\n    z-index: -1;\n    -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";\n}\n\n.qq-upload-file.qq-editable {\n    cursor: pointer;\n    margin-right: 4px;\n}\n\n.qq-edit-filename-icon.qq-editable {\n    display: inline-block;\n    cursor: pointer;\n}\n\nINPUT.qq-edit-filename.qq-editing {\n    position: static;\n    height: 28px;\n    padding: 0 8px;\n    margin-right: 10px;\n    margin-bottom: -5px;\n    border: 1px solid #ccc;\n    border-radius: 2px;\n    font-size: 16px;\n\n    opacity: 1;\n    filter: alpha(opacity=100);\n    -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=100)\";\n}\n\n.qq-edit-filename-icon {\n    display: none;\n    background: url(" + __webpack_require__(/*! ./edit.gif */ 226) + ");\n    width: 15px;\n    height: 15px;\n    vertical-align: text-bottom;\n    margin-right: 16px;\n}\n\n.qq-hide {\n    display: none;\n}\n\n\n/* Thumbnail\n------------------------------------------ */\n.qq-thumbnail-selector {\n    vertical-align: middle;\n    margin-right: 12px;\n}\n\n\n/* <dialog> element styles */\n.qq-uploader DIALOG {\n    display: none;\n}\n\n.qq-uploader DIALOG[open] {\n    display: block;\n}\n\n.qq-uploader DIALOG {\n    display: none;\n}\n\n.qq-uploader DIALOG[open] {\n    display: block;\n}\n\n.qq-uploader DIALOG .qq-dialog-buttons {\n    text-align: center;\n    padding-top: 10px;\n}\n\n.qq-uploader DIALOG .qq-dialog-buttons BUTTON {\n    margin-left: 5px;\n    margin-right: 5px;\n}\n\n.qq-uploader DIALOG .qq-dialog-message-selector {\n    padding-bottom: 10px;\n}\n\n.qq-uploader DIALOG::backdrop {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n/*! 2016-05-14 */\n", ""]);
	
	// exports


/***/ },
/* 223 */
/*!**************************************!*\
  !*** ./~/css-loader/lib/css-base.js ***!
  \**************************************/
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 224 */
/*!*****************************************!*\
  !*** ./~/fine-uploader/lib/loading.gif ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "2da0807814ad64841cd597c4e8a653d1.gif";

/***/ },
/* 225 */
/*!********************************************!*\
  !*** ./~/fine-uploader/lib/processing.gif ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "68110b18c97c78c295ffb4d78e9c7237.gif";

/***/ },
/* 226 */
/*!**************************************!*\
  !*** ./~/fine-uploader/lib/edit.gif ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "1115b1192665d62c2c0fef7f2fb4f3b0.gif";

/***/ },
/* 227 */
/*!*************************************!*\
  !*** ./~/style-loader/addStyles.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(true) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 228 */
/*!**************************************!*\
  !*** ./~/js-cookie/src/js.cookie.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * JavaScript Cookie v2.1.1
	 * https://github.com/js-cookie/js-cookie
	 *
	 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
	 * Released under the MIT license
	 */
	;(function (factory) {
		if (true) {
			!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof exports === 'object') {
			module.exports = factory();
		} else {
			var OldCookies = window.Cookies;
			var api = window.Cookies = factory();
			api.noConflict = function () {
				window.Cookies = OldCookies;
				return api;
			};
		}
	}(function () {
		function extend () {
			var i = 0;
			var result = {};
			for (; i < arguments.length; i++) {
				var attributes = arguments[ i ];
				for (var key in attributes) {
					result[key] = attributes[key];
				}
			}
			return result;
		}
	
		function init (converter) {
			function api (key, value, attributes) {
				var result;
				if (typeof document === 'undefined') {
					return;
				}
	
				// Write
	
				if (arguments.length > 1) {
					attributes = extend({
						path: '/'
					}, api.defaults, attributes);
	
					if (typeof attributes.expires === 'number') {
						var expires = new Date();
						expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
						attributes.expires = expires;
					}
	
					try {
						result = JSON.stringify(value);
						if (/^[\{\[]/.test(result)) {
							value = result;
						}
					} catch (e) {}
	
					if (!converter.write) {
						value = encodeURIComponent(String(value))
							.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
					} else {
						value = converter.write(value, key);
					}
	
					key = encodeURIComponent(String(key));
					key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
					key = key.replace(/[\(\)]/g, escape);
	
					return (document.cookie = [
						key, '=', value,
						attributes.expires && '; expires=' + attributes.expires.toUTCString(), // use expires attribute, max-age is not supported by IE
						attributes.path    && '; path=' + attributes.path,
						attributes.domain  && '; domain=' + attributes.domain,
						attributes.secure ? '; secure' : ''
					].join(''));
				}
	
				// Read
	
				if (!key) {
					result = {};
				}
	
				// To prevent the for loop in the first place assign an empty array
				// in case there are no cookies at all. Also prevents odd result when
				// calling "get()"
				var cookies = document.cookie ? document.cookie.split('; ') : [];
				var rdecode = /(%[0-9A-Z]{2})+/g;
				var i = 0;
	
				for (; i < cookies.length; i++) {
					var parts = cookies[i].split('=');
					var name = parts[0].replace(rdecode, decodeURIComponent);
					var cookie = parts.slice(1).join('=');
	
					if (cookie.charAt(0) === '"') {
						cookie = cookie.slice(1, -1);
					}
	
					try {
						cookie = converter.read ?
							converter.read(cookie, name) : converter(cookie, name) ||
							cookie.replace(rdecode, decodeURIComponent);
	
						if (this.json) {
							try {
								cookie = JSON.parse(cookie);
							} catch (e) {}
						}
	
						if (key === name) {
							result = cookie;
							break;
						}
	
						if (!key) {
							result[name] = cookie;
						}
					} catch (e) {}
				}
	
				return result;
			}
	
			api.set = api;
			api.get = function (key) {
				return api(key);
			};
			api.getJSON = function () {
				return api.apply({
					json: true
				}, [].slice.call(arguments));
			};
			api.defaults = {};
	
			api.remove = function (key, attributes) {
				api(key, '', extend(attributes, {
					expires: -1
				}));
			};
	
			api.withConverter = init;
	
			return api;
		}
	
		return init(function () {});
	}));


/***/ },
/* 229 */
/*!****************************!*\
  !*** ./static/schema.json ***!
  \****************************/
/***/ function(module, exports) {

	module.exports = {
		"title": "Metadata Submission",
		"type": "object",
		"properties": {
			"Sample_Information": {
				"type": "object",
				"properties": {
					"Organism": {
						"type": "string",
						"required": true,
						"enum": [
							"Homo_sapiens_(Human)",
							"Mus_musculus_(Mouse)",
							"Rattus_norvegicus_(Rat)",
							"Danio_rerio_(Zebrafish)",
							"Arabidopsis_thaliana_(thale_cress)",
							"Other => <free text>"
						]
					},
					"Organism_Part": {
						"type": "string",
						"required": true,
						"enum": [
							"Whole_Organism",
							"Brain",
							"Kidney",
							"Eye",
							"Liver",
							"Ovary",
							"Pancreas",
							"Lung",
							"Lymph_Node",
							"Testis",
							"Leaf",
							"Stem",
							"Root",
							"Other = <free text>"
						]
					},
					"Condition": {
						"type": "string",
						"required": true,
						"enum": [
							"Wildtype",
							"Diseased",
							"Mutant",
							"Drug_Treated",
							"Other => <free text>"
						]
					},
					"Sample_Growth_Conditions": {
						"type": "string",
						"enum": [
							"Cultured_2D",
							"Cultured_3D",
							"Caged",
							"Other => <free text>"
						]
					}
				}
			},
			"Sample_Preparation": {
				"type": "object",
				"properties": {
					"Sample_Stabilisation": {
						"type": "string",
						"required": true,
						"enum": [
							"Fresh_Frozen",
							"Formalin_Fixed",
							"Formalin_Fixed_Paraffin_Embedded",
							"Other => <free text>"
						]
					},
					"Tissue_Modification": {
						"type": "string",
						"required": true,
						"enum": [
							"none",
							"Derivatisation",
							"Trypsinisation",
							"Other => <free text>"
						]
					},
					"MALDI_Matrix": {
						"type": "string",
						"required": true,
						"enum": [
							"none",
							"2,5-dihydroxybenzoic_acid_(DHB)",
							"2,5-dihydroxyacetophenone_(DHA)",
							"9-aminoacridine_(9AA)",
							"1,5-diaminonaphthalene_(DAN)",
							"2,4,6-trihydroxyacetophenone_(THAP)",
							"alpha-cyano-4-hydroxycinnamic_acid_(CHCA)",
							"Other => <free text>"
						]
					},
					"MALDI_Matrix_Application": {
						"type": "string",
						"required": true,
						"enum": [
							"none",
							"Spray_Robot",
							"Airbrush",
							"Sublimation",
							"Micro_Spotting",
							"Sieving",
							"Other => <free text>"
						]
					}
				}
			},
			"MS_Analysis": {
				"type": "object",
				"properties": {
					"Ionisation_Source": {
						"type": "string",
						"required": true,
						"enum": [
							"MALDI",
							"LDI",
							"DESI",
							"SIMS",
							"LAESI",
							"NIMS",
							"Other => <free text>"
						]
					},
					"Analyzer": {
						"type": "string",
						"required": true,
						"enum": [
							"FTICR",
							"Orbitrap",
							"QTOF",
							"TOF_Linear",
							"TOF_Reflector",
							"Other => <free text>"
						]
					},
					"Detector_Resolving_Power": {
						"type": "object",
						"title": "Detector Resolving Power",
						"properties": {
							"mz": {
								"type": "number",
								"required": true,
								"minimum": 50,
								"maximum": 5000,
								"default": 200
							},
							"Resolving_Power": {
								"type": "number",
								"required": true,
								"minimum": 10000,
								"maximum": 1000000
							}
						}
					}
				}
			},
			"Submitted_By": {
				"type": "object",
				"properties": {
					"Submitter": {
						"type": "object",
						"properties": {
							"Surname": {
								"type": "string",
								"required": true
							},
							"First_Name": {
								"type": "string",
								"required": true
							},
							"Email": {
								"type": "string",
								"required": true
							}
						}
					},
					"Principal_Investigator": {
						"type": "object",
						"properties": {
							"Surname": {
								"type": "string"
							},
							"First_Name": {
								"type": "string"
							},
							"Email": {
								"type": "string"
							}
						}
					}
				}
			},
			"metaspace_options": {
				"type": "object",
				"properties": {
					"Metabolite_Database": {
						"required": true,
						"type": "string",
						"enum": [
							"ChEBI",
							"HMDB",
							"LIPID_MAPS",
							"SwissLipids",
							"DrugBank",
							"Other => <free text>"
						]
					},
					"Alpha-tester": {
						"type": "boolean",
						"required": true,
						"default": false,
						"format": "checkbox"
					}
				}
			},
			"Additional_Information": {
				"type": "object",
				"properties": {
					"Publication_DOI": {
						"type": "string"
					},
					"Sample_Description_Freetext": {
						"type": "string"
					},
					"Sample_Preparation_Freetext": {
						"type": "string"
					},
					"Additional_Information_Freetext": {
						"type": "string"
					},
					"Expected_Molecules_Freetext": {
						"type": "string"
					}
				}
			}
		}
	};

/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map